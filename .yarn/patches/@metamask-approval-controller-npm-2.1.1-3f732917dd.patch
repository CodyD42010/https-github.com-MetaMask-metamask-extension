diff --git a/dist/ApprovalController.d.ts b/dist/ApprovalController.d.ts
index 4d8ddf0..2c23f3a 100644
--- a/dist/ApprovalController.d.ts
+++ b/dist/ApprovalController.d.ts
@@ -1,7 +1,7 @@
 import type { Patch } from 'immer';
 import { EthereumRpcError } from 'eth-rpc-errors';
 import { BaseControllerV2, RestrictedControllerMessenger } from '@metamask/base-controller';
-import { Json } from '@metamask/controller-utils';
+import { Json } from '@metamask/utils';
 declare const controllerName = "ApprovalController";
 declare type ApprovalRequestData = Record<string, Json> | null;
 declare type ApprovalRequestState = Record<string, Json> | null;
@@ -31,6 +31,10 @@ export declare type ApprovalRequest<RequestData extends ApprovalRequestData> = {
      * Additional mutable state associated with the request
      */
     requestState: ApprovalRequestState;
+    /**
+     * Whether the request expects a result object to be returned instead of just the approval value.
+     */
+    expectsResult: boolean;
 };
 declare type ShowApprovalRequest = () => void | Promise<void>;
 export declare type ApprovalControllerState = {
@@ -51,6 +55,7 @@ declare type AddApprovalOptions = {
     type: string;
     requestData?: Record<string, Json>;
     requestState?: Record<string, Json>;
+    expectsResult?: boolean;
 };
 export declare type AddApprovalRequest = {
     type: `${typeof controllerName}:addRequest`;
@@ -76,6 +81,45 @@ export declare type UpdateRequestState = {
     type: `${typeof controllerName}:updateRequestState`;
     handler: ApprovalController['updateRequestState'];
 };
+export declare type AcceptOptions = {
+    /**
+     * Whether to resolve the returned promise only when the request creator indicates the success of the
+     * post-approval logic using the result callbacks.
+     * If false or unspecified, the promise will resolve immediately.
+     */
+    waitForResult?: boolean;
+};
+export declare type AcceptResult = {
+    /**
+     * An optional value provided by the request creator when indicating a successful result.
+     */
+    value?: unknown;
+};
+export declare type AcceptResultCallbacks = {
+    /**
+     * Inform the request acceptor that the post-approval logic was successful.
+     *
+     * @param value - An optional value generated by the post-approval logic.
+     */
+    success: (value?: unknown) => void;
+    /**
+     * Inform the request acceptor that the post-approval logic failed.
+     *
+     * @param error - The reason for the failure.
+     */
+    error: (error: Error) => void;
+};
+export declare type AddResult = {
+    /**
+     * An optional value provided by the request acceptor.
+     */
+    value?: unknown;
+    /**
+     * Callback functions that must be used to indicate to the request acceptor whether the post-approval logic was successful or not.
+     * Will be undefined if the request acceptor did not specify that they want to wait for a result.
+     */
+    resultCallbacks?: AcceptResultCallbacks;
+};
 export declare type ApprovalControllerActions = GetApprovalsState | ClearApprovalRequests | AddApprovalRequest | HasApprovalRequest | AcceptRequest | RejectRequest | UpdateRequestState;
 export declare type ApprovalStateChange = {
     type: `${typeof controllerName}:stateChange`;
@@ -121,7 +165,8 @@ export declare class ApprovalController extends BaseControllerV2<typeof controll
     private registerMessageHandlers;
     /**
      * Adds an approval request per the given arguments, calls the show approval
-     * request function, and returns the associated approval promise.
+     * request function, and returns the associated approval promise resolving to
+     * an AddResult object.
      *
      * There can only be one approval per origin and type. An error is thrown if
      * attempting to add an invalid or duplicate request.
@@ -134,12 +179,33 @@ export declare class ApprovalController extends BaseControllerV2<typeof controll
      * @param opts.requestData - Additional data associated with the request,
      * @param opts.requestState - Additional state associated with the request,
      * if any.
-     * @returns The approval promise.
+     * @returns The approval promise resolving to an AddResult object.
+     */
+    addAndShowApprovalRequest(opts: AddApprovalOptions & {
+        expectsResult: true;
+    }): Promise<AddResult>;
+    /**
+     * Adds an approval request per the given arguments, calls the show approval
+     * request function, and returns the associated approval promise resolving
+     * to a value provided during acceptance.
+     *
+     * There can only be one approval per origin and type. An error is thrown if
+     * attempting to add an invalid or duplicate request.
+     *
+     * @param opts - Options bag.
+     * @param opts.id - The id of the approval request. A random id will be
+     * generated if none is provided.
+     * @param opts.origin - The origin of the approval request.
+     * @param opts.type - The type associated with the approval request.
+     * @param opts.requestData - Additional data associated with the request,
+     * @param opts.requestState - Additional state associated with the request,
+     * if any.
+     * @returns The approval promise resolving to a value provided during acceptance.
      */
     addAndShowApprovalRequest(opts: AddApprovalOptions): Promise<unknown>;
     /**
      * Adds an approval request per the given arguments and returns the approval
-     * promise.
+     * promise resolving to an AddResult object.
      *
      * There can only be one approval per origin and type. An error is thrown if
      * attempting to add an invalid or duplicate request.
@@ -151,7 +217,26 @@ export declare class ApprovalController extends BaseControllerV2<typeof controll
      * @param opts.type - The type associated with the approval request.
      * @param opts.requestData - Additional data associated with the request,
      * if any.
-     * @returns The approval promise.
+     * @returns The approval promise resolving to an AddResult object.
+     */
+    add(opts: AddApprovalOptions & {
+        expectsResult: true;
+    }): Promise<AddResult>;
+    /**
+     * Adds an approval request per the given arguments and returns the approval
+     * promise resolving to a value provided during acceptance.
+     *
+     * There can only be one approval per origin and type. An error is thrown if
+     * attempting to add an invalid or duplicate request.
+     *
+     * @param opts - Options bag.
+     * @param opts.id - The id of the approval request. A random id will be
+     * generated if none is provided.
+     * @param opts.origin - The origin of the approval request.
+     * @param opts.type - The type associated with the approval request.
+     * @param opts.requestData - Additional data associated with the request,
+     * if any.
+     * @returns The approval promise resolving to a value provided during acceptance.
      */
     add(opts: AddApprovalOptions): Promise<unknown>;
     /**
@@ -212,8 +297,12 @@ export declare class ApprovalController extends BaseControllerV2<typeof controll
      *
      * @param id - The id of the approval request.
      * @param value - The value to resolve the approval promise with.
+     * @param options - Options bag.
+     * @returns A promise that either resolves once a result is provided by
+     * the creator of the approval request, or immediately if `options.waitForResult`
+     * is `false` or `undefined`.
      */
-    accept(id: string, value?: unknown): void;
+    accept(id: string, value?: unknown, options?: AcceptOptions): Promise<AcceptResult>;
     /**
      * Rejects the promise of the approval with the given id, and deletes the
      * approval. Throws an error if no such approval exists.
@@ -245,6 +334,7 @@ export declare class ApprovalController extends BaseControllerV2<typeof controll
      * @param id - The id of the approval request.
      * @param requestData - The request data associated with the approval request.
      * @param requestState - The request state associated with the approval request.
+     * @param expectsResult - Whether the approval request expects a result object to be returned.
      * @returns The approval promise.
      */
     private _add;
@@ -275,6 +365,7 @@ export declare class ApprovalController extends BaseControllerV2<typeof controll
      * @param type - The type associated with the approval request.
      * @param requestData - The request data associated with the approval request.
      * @param requestState - The request state associated with the approval request.
+     * @param expectsResult - Whether the request expects a result object to be returned.
      */
     private _addToStore;
     /**
diff --git a/dist/ApprovalController.d.ts.map b/dist/ApprovalController.d.ts.map
index e410d1f..d9ce8e0 100644
--- a/dist/ApprovalController.d.ts.map
+++ b/dist/ApprovalController.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"ApprovalController.d.ts","sourceRoot":"","sources":["../src/ApprovalController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"ApprovalController.d.ts","sourceRoot":"","sources":["../src/ApprovalController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,KAAK,EAAE,MAAM,OAAO,CAAC;AACnC,OAAO,EAAE,gBAAgB,EAAa,MAAM,gBAAgB,CAAC;AAE7D,OAAO,EACL,gBAAgB,EAChB,6BAA6B,EAC9B,MAAM,2BAA2B,CAAC;AACnC,OAAO,EAAE,IAAI,EAAE,MAAM,iBAAiB,CAAC;AAMvC,QAAA,MAAM,cAAc,uBAAuB,CAAC;AAM5C,aAAK,mBAAmB,GAAG,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC;AAEvD,aAAK,oBAAoB,GAAG,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC;AAOxD,oBAAY,eAAe,CAAC,WAAW,SAAS,mBAAmB,IAAI;IACrE;;OAEG;IACH,EAAE,EAAE,MAAM,CAAC;IAEX;;OAEG;IACH,MAAM,EAAE,MAAM,CAAC;IAEf;;OAEG;IACH,IAAI,EAAE,MAAM,CAAC;IAEb;;OAEG;IACH,IAAI,EAAE,MAAM,CAAC;IAEb;;;OAGG;IACH,WAAW,EAAE,WAAW,CAAC;IAEzB;;OAEG;IACH,YAAY,EAAE,oBAAoB,CAAC;IAEnC;;OAEG;IACH,aAAa,EAAE,OAAO,CAAC;CACxB,CAAC;AAEF,aAAK,mBAAmB,GAAG,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AAEtD,oBAAY,uBAAuB,GAAG;IACpC,gBAAgB,EAAE,MAAM,CAAC,MAAM,EAAE,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IACxE,oBAAoB,EAAE,MAAM,CAAC;CAC9B,CAAC;AAiBF,oBAAY,iBAAiB,GAAG;IAC9B,IAAI,EAAE,GAAG,OAAO,cAAc,WAAW,CAAC;IAC1C,OAAO,EAAE,MAAM,uBAAuB,CAAC;CACxC,CAAC;AAEF,oBAAY,qBAAqB,GAAG;IAClC,IAAI,EAAE,GAAG,OAAO,cAAc,gBAAgB,CAAC;IAC/C,OAAO,EAAE,CAAC,KAAK,EAAE,gBAAgB,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC;CACrD,CAAC;AAEF,aAAK,kBAAkB,GAAG;IACxB,EAAE,CAAC,EAAE,MAAM,CAAC;IACZ,MAAM,EAAE,MAAM,CAAC;IACf,IAAI,EAAE,MAAM,CAAC;IACb,WAAW,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACnC,YAAY,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACpC,aAAa,CAAC,EAAE,OAAO,CAAC;CACzB,CAAC;AAEF,oBAAY,kBAAkB,GAAG;IAC/B,IAAI,EAAE,GAAG,OAAO,cAAc,aAAa,CAAC;IAC5C,OAAO,EAAE,CACP,IAAI,EAAE,kBAAkB,EACxB,iBAAiB,EAAE,OAAO,KACvB,UAAU,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;CAC5C,CAAC;AAEF,oBAAY,kBAAkB,GAAG;IAC/B,IAAI,EAAE,GAAG,OAAO,cAAc,aAAa,CAAC;IAC5C,OAAO,EAAE,kBAAkB,CAAC,KAAK,CAAC,CAAC;CACpC,CAAC;AAEF,oBAAY,aAAa,GAAG;IAC1B,IAAI,EAAE,GAAG,OAAO,cAAc,gBAAgB,CAAC;IAC/C,OAAO,EAAE,kBAAkB,CAAC,QAAQ,CAAC,CAAC;CACvC,CAAC;AAEF,oBAAY,aAAa,GAAG;IAC1B,IAAI,EAAE,GAAG,OAAO,cAAc,gBAAgB,CAAC;IAC/C,OAAO,EAAE,kBAAkB,CAAC,QAAQ,CAAC,CAAC;CACvC,CAAC;AAEF,aAAK,yBAAyB,GAAG;IAC/B,EAAE,EAAE,MAAM,CAAC;IACX,YAAY,EAAE,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;CACpC,CAAC;AAEF,oBAAY,kBAAkB,GAAG;IAC/B,IAAI,EAAE,GAAG,OAAO,cAAc,qBAAqB,CAAC;IACpD,OAAO,EAAE,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;CACnD,CAAC;AAEF,oBAAY,aAAa,GAAG;IAC1B;;;;OAIG;IACH,aAAa,CAAC,EAAE,OAAO,CAAC;CACzB,CAAC;AAEF,oBAAY,YAAY,GAAG;IACzB;;OAEG;IACH,KAAK,CAAC,EAAE,OAAO,CAAC;CACjB,CAAC;AAEF,oBAAY,qBAAqB,GAAG;IAClC;;;;OAIG;IACH,OAAO,EAAE,CAAC,KAAK,CAAC,EAAE,OAAO,KAAK,IAAI,CAAC;IAEnC;;;;OAIG;IACH,KAAK,EAAE,CAAC,KAAK,EAAE,KAAK,KAAK,IAAI,CAAC;CAC/B,CAAC;AAEF,oBAAY,SAAS,GAAG;IACtB;;OAEG;IACH,KAAK,CAAC,EAAE,OAAO,CAAC;IAEhB;;;OAGG;IACH,eAAe,CAAC,EAAE,qBAAqB,CAAC;CACzC,CAAC;AAEF,oBAAY,yBAAyB,GACjC,iBAAiB,GACjB,qBAAqB,GACrB,kBAAkB,GAClB,kBAAkB,GAClB,aAAa,GACb,aAAa,GACb,kBAAkB,CAAC;AAEvB,oBAAY,mBAAmB,GAAG;IAChC,IAAI,EAAE,GAAG,OAAO,cAAc,cAAc,CAAC;IAC7C,OAAO,EAAE,CAAC,uBAAuB,EAAE,KAAK,EAAE,CAAC,CAAC;CAC7C,CAAC;AAEF,oBAAY,wBAAwB,GAAG,mBAAmB,CAAC;AAE3D,oBAAY,2BAA2B,GAAG,6BAA6B,CACrE,OAAO,cAAc,EACrB,yBAAyB,EACzB,wBAAwB,EACxB,KAAK,EACL,KAAK,CACN,CAAC;AAEF,aAAK,yBAAyB,GAAG;IAC/B,SAAS,EAAE,2BAA2B,CAAC;IACvC,mBAAmB,EAAE,mBAAmB,CAAC;IACzC,KAAK,CAAC,EAAE,OAAO,CAAC,uBAAuB,CAAC,CAAC;IACzC,6BAA6B,CAAC,EAAE,MAAM,EAAE,CAAC;CAC1C,CAAC;AAEF;;;;;;;;GAQG;AACH,qBAAa,kBAAmB,SAAQ,gBAAgB,CACtD,OAAO,cAAc,EACrB,uBAAuB,EACvB,2BAA2B,CAC5B;IACC,OAAO,CAAC,UAAU,CAAiC;IAEnD,OAAO,CAAC,QAAQ,CAAmC;IAEnD,OAAO,CAAC,oBAAoB,CAAa;IAEzC,OAAO,CAAC,8BAA8B,CAAW;IAEjD;;;;;;;;;OASG;gBACS,EACV,SAAS,EACT,mBAAmB,EACnB,KAAU,EACV,6BAAkC,GACnC,EAAE,yBAAyB;IAe5B;;;OAGG;IACH,OAAO,CAAC,uBAAuB;IAqC/B;;;;;;;;;;;;;;;;;OAiBG;IACH,yBAAyB,CACvB,IAAI,EAAE,kBAAkB,GAAG;QAAE,aAAa,EAAE,IAAI,CAAA;KAAE,GACjD,OAAO,CAAC,SAAS,CAAC;IAErB;;;;;;;;;;;;;;;;;OAiBG;IACH,yBAAyB,CAAC,IAAI,EAAE,kBAAkB,GAAG,OAAO,CAAC,OAAO,CAAC;IAerE;;;;;;;;;;;;;;;OAeG;IACH,GAAG,CAAC,IAAI,EAAE,kBAAkB,GAAG;QAAE,aAAa,EAAE,IAAI,CAAA;KAAE,GAAG,OAAO,CAAC,SAAS,CAAC;IAE3E;;;;;;;;;;;;;;;OAeG;IACH,GAAG,CAAC,IAAI,EAAE,kBAAkB,GAAG,OAAO,CAAC,OAAO,CAAC;IAa/C;;;;;OAKG;IACH,GAAG,CAAC,EAAE,EAAE,MAAM,GAAG,eAAe,CAAC,mBAAmB,CAAC,GAAG,SAAS;IAIjE;;;;;;;;;;;;;;OAcG;IACH,gBAAgB,CAAC,IAAI,GAAE;QAAE,MAAM,CAAC,EAAE,MAAM,CAAC;QAAC,IAAI,CAAC,EAAE,MAAM,CAAA;KAAO,GAAG,MAAM;IA0BvE;;;;OAIG;IACH,qBAAqB,IAAI,MAAM;IAI/B;;;;;;;;;;;;;;OAcG;IACH,GAAG,CAAC,IAAI,GAAE;QAAE,EAAE,CAAC,EAAE,MAAM,CAAC;QAAC,MAAM,CAAC,EAAE,MAAM,CAAC;QAAC,IAAI,CAAC,EAAE,MAAM,CAAA;KAAO,GAAG,OAAO;IAuCxE;;;;;;;;;;OAUG;IACH,MAAM,CACJ,EAAE,EAAE,MAAM,EACV,KAAK,CAAC,EAAE,OAAO,EACf,OAAO,CAAC,EAAE,aAAa,GACtB,OAAO,CAAC,YAAY,CAAC;IA6BxB;;;;;;OAMG;IACH,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,GAAG,IAAI;IAIxC;;;;;OAKG;IACH,KAAK,CAAC,cAAc,EAAE,gBAAgB,CAAC,OAAO,CAAC,GAAG,IAAI;IAQtD;;;;;;OAMG;IACH,kBAAkB,CAAC,IAAI,EAAE,yBAAyB,GAAG,IAAI;IAYzD;;;;;;;;;;OAUG;IACH,OAAO,CAAC,IAAI;IAmCZ;;;;;;;;OAQG;IACH,OAAO,CAAC,kBAAkB;IAiC1B;;;;;;OAMG;IACH,OAAO,CAAC,yBAAyB;IAYjC;;;;;;;;;;OAUG;IACH,OAAO,CAAC,WAAW;IA2BnB;;;;;;;OAOG;IACH,OAAO,CAAC,OAAO;IA0Bf;;;;;;;OAOG;IACH,OAAO,CAAC,8BAA8B;CASvC;AACD,eAAe,kBAAkB,CAAC"}
\ No newline at end of file
diff --git a/dist/ApprovalController.js b/dist/ApprovalController.js
index f6428e6..c033f86 100644
--- a/dist/ApprovalController.js
+++ b/dist/ApprovalController.js
@@ -67,46 +67,13 @@ class ApprovalController extends base_controller_1.BaseControllerV2 {
         this.messagingSystem.registerActionHandler(`${controllerName}:rejectRequest`, this.reject.bind(this));
         this.messagingSystem.registerActionHandler(`${controllerName}:updateRequestState`, this.updateRequestState.bind(this));
     }
-    /**
-     * Adds an approval request per the given arguments, calls the show approval
-     * request function, and returns the associated approval promise.
-     *
-     * There can only be one approval per origin and type. An error is thrown if
-     * attempting to add an invalid or duplicate request.
-     *
-     * @param opts - Options bag.
-     * @param opts.id - The id of the approval request. A random id will be
-     * generated if none is provided.
-     * @param opts.origin - The origin of the approval request.
-     * @param opts.type - The type associated with the approval request.
-     * @param opts.requestData - Additional data associated with the request,
-     * @param opts.requestState - Additional state associated with the request,
-     * if any.
-     * @returns The approval promise.
-     */
     addAndShowApprovalRequest(opts) {
-        const promise = this._add(opts.origin, opts.type, opts.id, opts.requestData, opts.requestState);
+        const promise = this._add(opts.origin, opts.type, opts.id, opts.requestData, opts.requestState, opts.expectsResult);
         this._showApprovalRequest();
         return promise;
     }
-    /**
-     * Adds an approval request per the given arguments and returns the approval
-     * promise.
-     *
-     * There can only be one approval per origin and type. An error is thrown if
-     * attempting to add an invalid or duplicate request.
-     *
-     * @param opts - Options bag.
-     * @param opts.id - The id of the approval request. A random id will be
-     * generated if none is provided.
-     * @param opts.origin - The origin of the approval request.
-     * @param opts.type - The type associated with the approval request.
-     * @param opts.requestData - Additional data associated with the request,
-     * if any.
-     * @returns The approval promise.
-     */
     add(opts) {
-        return this._add(opts.origin, opts.type, opts.id, opts.requestData, opts.requestState);
+        return this._add(opts.origin, opts.type, opts.id, opts.requestData, opts.requestState, opts.expectsResult);
     }
     /**
      * Gets the info for the approval request with the given id.
@@ -214,9 +181,32 @@ class ApprovalController extends base_controller_1.BaseControllerV2 {
      *
      * @param id - The id of the approval request.
      * @param value - The value to resolve the approval promise with.
+     * @param options - Options bag.
+     * @returns A promise that either resolves once a result is provided by
+     * the creator of the approval request, or immediately if `options.waitForResult`
+     * is `false` or `undefined`.
      */
-    accept(id, value) {
-        this._deleteApprovalAndGetCallbacks(id).resolve(value);
+    accept(id, value, options) {
+        const approval = this.get(id);
+        const requestPromise = this._deleteApprovalAndGetCallbacks(id);
+        return new Promise((resolve, reject) => {
+            const resultCallbacks = {
+                success: (acceptValue) => resolve({ value: acceptValue }),
+                error: reject,
+            };
+            if ((options === null || options === void 0 ? void 0 : options.waitForResult) && !approval.expectsResult) {
+                reject(new errors_1.ApprovalRequestNoResultSupportError(id));
+                return;
+            }
+            const resultValue = (options === null || options === void 0 ? void 0 : options.waitForResult) ? resultCallbacks : undefined;
+            const resolveValue = approval.expectsResult
+                ? { value, resultCallbacks: resultValue }
+                : value;
+            requestPromise.resolve(resolveValue);
+            if (!(options === null || options === void 0 ? void 0 : options.waitForResult)) {
+                resolve({ value: undefined });
+            }
+        });
     }
     /**
      * Rejects the promise of the approval with the given id, and deletes the
@@ -266,9 +256,10 @@ class ApprovalController extends base_controller_1.BaseControllerV2 {
      * @param id - The id of the approval request.
      * @param requestData - The request data associated with the approval request.
      * @param requestState - The request state associated with the approval request.
+     * @param expectsResult - Whether the approval request expects a result object to be returned.
      * @returns The approval promise.
      */
-    _add(origin, type, id = (0, nanoid_1.nanoid)(), requestData, requestState) {
+    _add(origin, type, id = (0, nanoid_1.nanoid)(), requestData, requestState, expectsResult) {
         this._validateAddParams(id, origin, type, requestData, requestState);
         if (!this._typesExcludedFromRateLimiting.includes(type) &&
             this.has({ origin, type })) {
@@ -278,7 +269,7 @@ class ApprovalController extends base_controller_1.BaseControllerV2 {
         return new Promise((resolve, reject) => {
             this._approvals.set(id, { resolve, reject });
             this._addPendingApprovalOrigin(origin, type);
-            this._addToStore(id, origin, type, requestData, requestState);
+            this._addToStore(id, origin, type, requestData, requestState, expectsResult);
         });
     }
     /**
@@ -341,8 +332,9 @@ class ApprovalController extends base_controller_1.BaseControllerV2 {
      * @param type - The type associated with the approval request.
      * @param requestData - The request data associated with the approval request.
      * @param requestState - The request state associated with the approval request.
+     * @param expectsResult - Whether the request expects a result object to be returned.
      */
-    _addToStore(id, origin, type, requestData, requestState) {
+    _addToStore(id, origin, type, requestData, requestState, expectsResult) {
         const approval = {
             id,
             origin,
@@ -350,6 +342,7 @@ class ApprovalController extends base_controller_1.BaseControllerV2 {
             time: Date.now(),
             requestData: requestData || null,
             requestState: requestState || null,
+            expectsResult: expectsResult || false,
         };
         this.update((draftState) => {
             // Typecast: ts(2589)
diff --git a/dist/ApprovalController.js.map b/dist/ApprovalController.js.map
index 19badbe..7e357a0 100644
--- a/dist/ApprovalController.js.map
+++ b/dist/ApprovalController.js.map
@@ -1 +1 @@
-{"version":3,"file":"ApprovalController.js","sourceRoot":"","sources":["../src/ApprovalController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Patch } from 'immer';\nimport { EthereumRpcError, ethErrors } from 'eth-rpc-errors';\nimport { nanoid } from 'nanoid';\nimport {\n  BaseControllerV2,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { Json } from '@metamask/controller-utils';\nimport { ApprovalRequestNotFoundError } from './errors';\n\nconst controllerName = 'ApprovalController';\n\ntype ApprovalPromiseResolve = (value?: unknown) => void;\ntype ApprovalPromiseReject = (error?: unknown) => void;\n\ntype ApprovalRequestData = Record<string, Json> | null;\n\ntype ApprovalRequestState = Record<string, Json> | null;\n\ntype ApprovalCallbacks = {\n  resolve: ApprovalPromiseResolve;\n  reject: ApprovalPromiseReject;\n};\n\nexport type ApprovalRequest<RequestData extends ApprovalRequestData> = {\n  /**\n   * The ID of the approval request.\n   */\n  id: string;\n\n  /**\n   * The origin of the approval request.\n   */\n  origin: string;\n\n  /**\n   * The time that the request was received, per Date.now().\n   */\n  time: number;\n\n  /**\n   * The type of the approval request.\n   */\n  type: string;\n\n  /**\n   * Additional data associated with the request.\n   * TODO:TS4.4 make optional\n   */\n  requestData: RequestData;\n\n  /**\n   * Additional mutable state associated with the request\n   */\n  requestState: ApprovalRequestState;\n};\n\ntype ShowApprovalRequest = () => void | Promise<void>;\n\nexport type ApprovalControllerState = {\n  pendingApprovals: Record<string, ApprovalRequest<Record<string, Json>>>;\n  pendingApprovalCount: number;\n};\n\nconst stateMetadata = {\n  pendingApprovals: { persist: false, anonymous: true },\n  pendingApprovalCount: { persist: false, anonymous: false },\n};\n\nconst getAlreadyPendingMessage = (origin: string, type: string) =>\n  `Request of type '${type}' already pending for origin ${origin}. Please wait.`;\n\nconst getDefaultState = (): ApprovalControllerState => {\n  return {\n    pendingApprovals: {},\n    pendingApprovalCount: 0,\n  };\n};\n\nexport type GetApprovalsState = {\n  type: `${typeof controllerName}:getState`;\n  handler: () => ApprovalControllerState;\n};\n\nexport type ClearApprovalRequests = {\n  type: `${typeof controllerName}:clearRequests`;\n  handler: (error: EthereumRpcError<unknown>) => void;\n};\n\ntype AddApprovalOptions = {\n  id?: string;\n  origin: string;\n  type: string;\n  requestData?: Record<string, Json>;\n  requestState?: Record<string, Json>;\n};\n\nexport type AddApprovalRequest = {\n  type: `${typeof controllerName}:addRequest`;\n  handler: (\n    opts: AddApprovalOptions,\n    shouldShowRequest: boolean,\n  ) => ReturnType<ApprovalController['add']>;\n};\n\nexport type HasApprovalRequest = {\n  type: `${typeof controllerName}:hasRequest`;\n  handler: ApprovalController['has'];\n};\n\nexport type AcceptRequest = {\n  type: `${typeof controllerName}:acceptRequest`;\n  handler: ApprovalController['accept'];\n};\n\nexport type RejectRequest = {\n  type: `${typeof controllerName}:rejectRequest`;\n  handler: ApprovalController['reject'];\n};\n\ntype UpdateRequestStateOptions = {\n  id: string;\n  requestState: Record<string, Json>;\n};\n\nexport type UpdateRequestState = {\n  type: `${typeof controllerName}:updateRequestState`;\n  handler: ApprovalController['updateRequestState'];\n};\n\nexport type ApprovalControllerActions =\n  | GetApprovalsState\n  | ClearApprovalRequests\n  | AddApprovalRequest\n  | HasApprovalRequest\n  | AcceptRequest\n  | RejectRequest\n  | UpdateRequestState;\n\nexport type ApprovalStateChange = {\n  type: `${typeof controllerName}:stateChange`;\n  payload: [ApprovalControllerState, Patch[]];\n};\n\nexport type ApprovalControllerEvents = ApprovalStateChange;\n\nexport type ApprovalControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  ApprovalControllerActions,\n  ApprovalControllerEvents,\n  never,\n  never\n>;\n\ntype ApprovalControllerOptions = {\n  messenger: ApprovalControllerMessenger;\n  showApprovalRequest: ShowApprovalRequest;\n  state?: Partial<ApprovalControllerState>;\n  typesExcludedFromRateLimiting?: string[];\n};\n\n/**\n * Controller for managing requests that require user approval.\n *\n * Enables limiting the number of pending requests by origin and type, counting\n * pending requests, and more.\n *\n * Adding a request returns a promise that resolves or rejects when the request\n * is approved or denied, respectively.\n */\nexport class ApprovalController extends BaseControllerV2<\n  typeof controllerName,\n  ApprovalControllerState,\n  ApprovalControllerMessenger\n> {\n  private _approvals: Map<string, ApprovalCallbacks>;\n\n  private _origins: Map<string, Map<string, number>>;\n\n  private _showApprovalRequest: () => void;\n\n  private _typesExcludedFromRateLimiting: string[];\n\n  /**\n   * Construct an Approval controller.\n   *\n   * @param options - The controller options.\n   * @param options.showApprovalRequest - Function for opening the UI such that\n   * the request can be displayed to the user.\n   * @param options.messenger - The restricted controller messenger for the Approval controller.\n   * @param options.state - The initial controller state.\n   * @param options.typesExcludedFromRateLimiting - Array of aproval types which allow multiple pending approval requests from the same origin.\n   */\n  constructor({\n    messenger,\n    showApprovalRequest,\n    state = {},\n    typesExcludedFromRateLimiting = [],\n  }: ApprovalControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: { ...getDefaultState(), ...state },\n    });\n\n    this._approvals = new Map();\n    this._origins = new Map();\n    this._showApprovalRequest = showApprovalRequest;\n    this._typesExcludedFromRateLimiting = typesExcludedFromRateLimiting;\n    this.registerMessageHandlers();\n  }\n\n  /**\n   * Constructor helper for registering this controller's messaging system\n   * actions.\n   */\n  private registerMessageHandlers(): void {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:clearRequests` as const,\n      this.clear.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:addRequest` as const,\n      (opts: AddApprovalOptions, shouldShowRequest: boolean) => {\n        if (shouldShowRequest) {\n          return this.addAndShowApprovalRequest(opts);\n        }\n        return this.add(opts);\n      },\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:hasRequest` as const,\n      this.has.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:acceptRequest` as const,\n      this.accept.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:rejectRequest` as const,\n      this.reject.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateRequestState` as const,\n      this.updateRequestState.bind(this),\n    );\n  }\n\n  /**\n   * Adds an approval request per the given arguments, calls the show approval\n   * request function, and returns the associated approval promise.\n   *\n   * There can only be one approval per origin and type. An error is thrown if\n   * attempting to add an invalid or duplicate request.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request. A random id will be\n   * generated if none is provided.\n   * @param opts.origin - The origin of the approval request.\n   * @param opts.type - The type associated with the approval request.\n   * @param opts.requestData - Additional data associated with the request,\n   * @param opts.requestState - Additional state associated with the request,\n   * if any.\n   * @returns The approval promise.\n   */\n  addAndShowApprovalRequest(opts: AddApprovalOptions): Promise<unknown> {\n    const promise = this._add(\n      opts.origin,\n      opts.type,\n      opts.id,\n      opts.requestData,\n      opts.requestState,\n    );\n    this._showApprovalRequest();\n    return promise;\n  }\n\n  /**\n   * Adds an approval request per the given arguments and returns the approval\n   * promise.\n   *\n   * There can only be one approval per origin and type. An error is thrown if\n   * attempting to add an invalid or duplicate request.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request. A random id will be\n   * generated if none is provided.\n   * @param opts.origin - The origin of the approval request.\n   * @param opts.type - The type associated with the approval request.\n   * @param opts.requestData - Additional data associated with the request,\n   * if any.\n   * @returns The approval promise.\n   */\n  add(opts: AddApprovalOptions): Promise<unknown> {\n    return this._add(\n      opts.origin,\n      opts.type,\n      opts.id,\n      opts.requestData,\n      opts.requestState,\n    );\n  }\n\n  /**\n   * Gets the info for the approval request with the given id.\n   *\n   * @param id - The id of the approval request.\n   * @returns The approval request data associated with the id.\n   */\n  get(id: string): ApprovalRequest<ApprovalRequestData> | undefined {\n    return this.state.pendingApprovals[id];\n  }\n\n  /**\n   * Gets the number of pending approvals, by origin and/or type.\n   *\n   * If only `origin` is specified, all approvals for that origin will be\n   * counted, regardless of type.\n   * If only `type` is specified, all approvals for that type will be counted,\n   * regardless of origin.\n   * If both `origin` and `type` are specified, 0 or 1 will be returned.\n   *\n   * @param opts - The approval count options.\n   * @param opts.origin - An approval origin.\n   * @param opts.type - The type of the approval request.\n   * @returns The current approval request count for the given origin and/or\n   * type.\n   */\n  getApprovalCount(opts: { origin?: string; type?: string } = {}): number {\n    if (!opts.origin && !opts.type) {\n      throw new Error('Must specify origin, type, or both.');\n    }\n    const { origin, type: _type } = opts;\n\n    if (origin && _type) {\n      return this._origins.get(origin)?.get(_type) || 0;\n    }\n\n    if (origin) {\n      return Array.from(\n        (this._origins.get(origin) || new Map()).values(),\n      ).reduce((total, value) => total + value, 0);\n    }\n\n    // Only \"type\" was specified\n    let count = 0;\n    for (const approval of Object.values(this.state.pendingApprovals)) {\n      if (approval.type === _type) {\n        count += 1;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Get the total count of all pending approval requests for all origins.\n   *\n   * @returns The total pending approval request count.\n   */\n  getTotalApprovalCount(): number {\n    return this.state.pendingApprovalCount;\n  }\n\n  /**\n   * Checks if there's a pending approval request per the given parameters.\n   * At least one parameter must be specified. An error will be thrown if the\n   * parameters are invalid.\n   *\n   * If `id` is specified, all other parameters will be ignored.\n   * If `id` is not specified, the method will check for requests that match\n   * all of the specified parameters.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The ID to check for.\n   * @param opts.origin - The origin to check for.\n   * @param opts.type - The type to check for.\n   * @returns `true` if a matching approval is found, and `false` otherwise.\n   */\n  has(opts: { id?: string; origin?: string; type?: string } = {}): boolean {\n    const { id, origin, type: _type } = opts;\n\n    if (id) {\n      if (typeof id !== 'string') {\n        throw new Error('May not specify non-string id.');\n      }\n      return this._approvals.has(id);\n    }\n\n    if (_type && typeof _type !== 'string') {\n      throw new Error('May not specify non-string type.');\n    }\n\n    if (origin) {\n      if (typeof origin !== 'string') {\n        throw new Error('May not specify non-string origin.');\n      }\n\n      // Check origin and type pair if type also specified\n      if (_type) {\n        return Boolean(this._origins.get(origin)?.get(_type));\n      }\n      return this._origins.has(origin);\n    }\n\n    if (_type) {\n      for (const approval of Object.values(this.state.pendingApprovals)) {\n        if (approval.type === _type) {\n          return true;\n        }\n      }\n      return false;\n    }\n    throw new Error(\n      'Must specify a valid combination of id, origin, and type.',\n    );\n  }\n\n  /**\n   * Resolves the promise of the approval with the given id, and deletes the\n   * approval. Throws an error if no such approval exists.\n   *\n   * @param id - The id of the approval request.\n   * @param value - The value to resolve the approval promise with.\n   */\n  accept(id: string, value?: unknown): void {\n    this._deleteApprovalAndGetCallbacks(id).resolve(value);\n  }\n\n  /**\n   * Rejects the promise of the approval with the given id, and deletes the\n   * approval. Throws an error if no such approval exists.\n   *\n   * @param id - The id of the approval request.\n   * @param error - The error to reject the approval promise with.\n   */\n  reject(id: string, error: unknown): void {\n    this._deleteApprovalAndGetCallbacks(id).reject(error);\n  }\n\n  /**\n   * Rejects and deletes all approval requests.\n   *\n   * @param rejectionError - The EthereumRpcError to reject the approval\n   * requests with.\n   */\n  clear(rejectionError: EthereumRpcError<unknown>): void {\n    for (const id of this._approvals.keys()) {\n      this.reject(id, rejectionError);\n    }\n    this._origins.clear();\n    this.update(() => getDefaultState());\n  }\n\n  /**\n   * Updates the request state of the approval with the given id.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request.\n   * @param opts.requestState - Additional data associated with the request\n   */\n  updateRequestState(opts: UpdateRequestStateOptions): void {\n    if (!this.state.pendingApprovals[opts.id]) {\n      throw new ApprovalRequestNotFoundError(opts.id);\n    }\n\n    this.update((draftState) => {\n      // Typecast: ts(2589)\n      draftState.pendingApprovals[opts.id].requestState =\n        opts.requestState as any;\n    });\n  }\n\n  /**\n   * Implementation of add operation.\n   *\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   * @param id - The id of the approval request.\n   * @param requestData - The request data associated with the approval request.\n   * @param requestState - The request state associated with the approval request.\n   * @returns The approval promise.\n   */\n  private _add(\n    origin: string,\n    type: string,\n    id: string = nanoid(),\n    requestData?: Record<string, Json>,\n    requestState?: Record<string, Json>,\n  ): Promise<unknown> {\n    this._validateAddParams(id, origin, type, requestData, requestState);\n\n    if (\n      !this._typesExcludedFromRateLimiting.includes(type) &&\n      this.has({ origin, type })\n    ) {\n      throw ethErrors.rpc.resourceUnavailable(\n        getAlreadyPendingMessage(origin, type),\n      );\n    }\n\n    // add pending approval\n    return new Promise((resolve, reject) => {\n      this._approvals.set(id, { resolve, reject });\n      this._addPendingApprovalOrigin(origin, type);\n      this._addToStore(id, origin, type, requestData, requestState);\n    });\n  }\n\n  /**\n   * Validates parameters to the add method.\n   *\n   * @param id - The id of the approval request.\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   * @param requestData - The request data associated with the approval request.\n   * @param requestState - The request state associated with the approval request.\n   */\n  private _validateAddParams(\n    id: string,\n    origin: string,\n    type: string,\n    requestData?: Record<string, Json>,\n    requestState?: Record<string, Json>,\n  ): void {\n    let errorMessage = null;\n    if (!id || typeof id !== 'string') {\n      errorMessage = 'Must specify non-empty string id.';\n    } else if (this._approvals.has(id)) {\n      errorMessage = `Approval request with id '${id}' already exists.`;\n    } else if (!origin || typeof origin !== 'string') {\n      errorMessage = 'Must specify non-empty string origin.';\n    } else if (!type || typeof type !== 'string') {\n      errorMessage = 'Must specify non-empty string type.';\n    } else if (\n      requestData &&\n      (typeof requestData !== 'object' || Array.isArray(requestData))\n    ) {\n      errorMessage = 'Request data must be a plain object if specified.';\n    } else if (\n      requestState &&\n      (typeof requestState !== 'object' || Array.isArray(requestState))\n    ) {\n      errorMessage = 'Request state must be a plain object if specified.';\n    }\n\n    if (errorMessage) {\n      throw ethErrors.rpc.internal(errorMessage);\n    }\n  }\n\n  /**\n   * Adds an entry to _origins.\n   * Performs no validation.\n   *\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   */\n  private _addPendingApprovalOrigin(origin: string, type: string): void {\n    let originMap = this._origins.get(origin);\n\n    if (!originMap) {\n      originMap = new Map();\n      this._origins.set(origin, originMap);\n    }\n\n    const currentValue = originMap.get(type) || 0;\n    originMap.set(type, currentValue + 1);\n  }\n\n  /**\n   * Adds an entry to the store.\n   * Performs no validation.\n   *\n   * @param id - The id of the approval request.\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   * @param requestData - The request data associated with the approval request.\n   * @param requestState - The request state associated with the approval request.\n   */\n  private _addToStore(\n    id: string,\n    origin: string,\n    type: string,\n    requestData?: Record<string, Json>,\n    requestState?: Record<string, Json>,\n  ): void {\n    const approval: ApprovalRequest<Record<string, Json> | null> = {\n      id,\n      origin,\n      type,\n      time: Date.now(),\n      requestData: requestData || null,\n      requestState: requestState || null,\n    };\n\n    this.update((draftState) => {\n      // Typecast: ts(2589)\n      draftState.pendingApprovals[id] = approval as any;\n      draftState.pendingApprovalCount = Object.keys(\n        draftState.pendingApprovals,\n      ).length;\n    });\n  }\n\n  /**\n   * Deletes the approval with the given id. The approval promise must be\n   * resolved or reject before this method is called.\n   * Deletion is an internal operation because approval state is solely\n   * managed by this controller.\n   *\n   * @param id - The id of the approval request to be deleted.\n   */\n  private _delete(id: string): void {\n    this._approvals.delete(id);\n\n    // This method is only called after verifying that the approval with the\n    // specified id exists.\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const { origin, type } = this.state.pendingApprovals[id]!;\n\n    const originMap = this._origins.get(origin) as Map<string, number>;\n    const originTotalCount = this.getApprovalCount({ origin });\n    const originTypeCount = originMap.get(type) as number;\n\n    if (originTotalCount === 1) {\n      this._origins.delete(origin);\n    } else {\n      originMap.set(type, originTypeCount - 1);\n    }\n\n    this.update((draftState) => {\n      delete draftState.pendingApprovals[id];\n      draftState.pendingApprovalCount = Object.keys(\n        draftState.pendingApprovals,\n      ).length;\n    });\n  }\n\n  /**\n   * Gets the approval callbacks for the given id, deletes the entry, and then\n   * returns the callbacks for promise resolution.\n   * Throws an error if no approval is found for the given id.\n   *\n   * @param id - The id of the approval request.\n   * @returns The promise callbacks associated with the approval request.\n   */\n  private _deleteApprovalAndGetCallbacks(id: string): ApprovalCallbacks {\n    const callbacks = this._approvals.get(id);\n    if (!callbacks) {\n      throw new ApprovalRequestNotFoundError(id);\n    }\n\n    this._delete(id);\n    return callbacks;\n  }\n}\nexport default ApprovalController;\n"]}
\ No newline at end of file
+{"version":3,"file":"ApprovalController.js","sourceRoot":"","sources":["../src/ApprovalController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Patch } from 'immer';\nimport { EthereumRpcError, ethErrors } from 'eth-rpc-errors';\nimport { nanoid } from 'nanoid';\nimport {\n  BaseControllerV2,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { Json } from '@metamask/utils';\nimport {\n  ApprovalRequestNotFoundError,\n  ApprovalRequestNoResultSupportError,\n} from './errors';\n\nconst controllerName = 'ApprovalController';\n\ntype ApprovalPromiseResolve = (value?: unknown | AddResult) => void;\n\ntype ApprovalPromiseReject = (error?: unknown) => void;\n\ntype ApprovalRequestData = Record<string, Json> | null;\n\ntype ApprovalRequestState = Record<string, Json> | null;\n\ntype ApprovalCallbacks = {\n  resolve: ApprovalPromiseResolve;\n  reject: ApprovalPromiseReject;\n};\n\nexport type ApprovalRequest<RequestData extends ApprovalRequestData> = {\n  /**\n   * The ID of the approval request.\n   */\n  id: string;\n\n  /**\n   * The origin of the approval request.\n   */\n  origin: string;\n\n  /**\n   * The time that the request was received, per Date.now().\n   */\n  time: number;\n\n  /**\n   * The type of the approval request.\n   */\n  type: string;\n\n  /**\n   * Additional data associated with the request.\n   * TODO:TS4.4 make optional\n   */\n  requestData: RequestData;\n\n  /**\n   * Additional mutable state associated with the request\n   */\n  requestState: ApprovalRequestState;\n\n  /**\n   * Whether the request expects a result object to be returned instead of just the approval value.\n   */\n  expectsResult: boolean;\n};\n\ntype ShowApprovalRequest = () => void | Promise<void>;\n\nexport type ApprovalControllerState = {\n  pendingApprovals: Record<string, ApprovalRequest<Record<string, Json>>>;\n  pendingApprovalCount: number;\n};\n\nconst stateMetadata = {\n  pendingApprovals: { persist: false, anonymous: true },\n  pendingApprovalCount: { persist: false, anonymous: false },\n};\n\nconst getAlreadyPendingMessage = (origin: string, type: string) =>\n  `Request of type '${type}' already pending for origin ${origin}. Please wait.`;\n\nconst getDefaultState = (): ApprovalControllerState => {\n  return {\n    pendingApprovals: {},\n    pendingApprovalCount: 0,\n  };\n};\n\nexport type GetApprovalsState = {\n  type: `${typeof controllerName}:getState`;\n  handler: () => ApprovalControllerState;\n};\n\nexport type ClearApprovalRequests = {\n  type: `${typeof controllerName}:clearRequests`;\n  handler: (error: EthereumRpcError<unknown>) => void;\n};\n\ntype AddApprovalOptions = {\n  id?: string;\n  origin: string;\n  type: string;\n  requestData?: Record<string, Json>;\n  requestState?: Record<string, Json>;\n  expectsResult?: boolean;\n};\n\nexport type AddApprovalRequest = {\n  type: `${typeof controllerName}:addRequest`;\n  handler: (\n    opts: AddApprovalOptions,\n    shouldShowRequest: boolean,\n  ) => ReturnType<ApprovalController['add']>;\n};\n\nexport type HasApprovalRequest = {\n  type: `${typeof controllerName}:hasRequest`;\n  handler: ApprovalController['has'];\n};\n\nexport type AcceptRequest = {\n  type: `${typeof controllerName}:acceptRequest`;\n  handler: ApprovalController['accept'];\n};\n\nexport type RejectRequest = {\n  type: `${typeof controllerName}:rejectRequest`;\n  handler: ApprovalController['reject'];\n};\n\ntype UpdateRequestStateOptions = {\n  id: string;\n  requestState: Record<string, Json>;\n};\n\nexport type UpdateRequestState = {\n  type: `${typeof controllerName}:updateRequestState`;\n  handler: ApprovalController['updateRequestState'];\n};\n\nexport type AcceptOptions = {\n  /**\n   * Whether to resolve the returned promise only when the request creator indicates the success of the\n   * post-approval logic using the result callbacks.\n   * If false or unspecified, the promise will resolve immediately.\n   */\n  waitForResult?: boolean;\n};\n\nexport type AcceptResult = {\n  /**\n   * An optional value provided by the request creator when indicating a successful result.\n   */\n  value?: unknown;\n};\n\nexport type AcceptResultCallbacks = {\n  /**\n   * Inform the request acceptor that the post-approval logic was successful.\n   *\n   * @param value - An optional value generated by the post-approval logic.\n   */\n  success: (value?: unknown) => void;\n\n  /**\n   * Inform the request acceptor that the post-approval logic failed.\n   *\n   * @param error - The reason for the failure.\n   */\n  error: (error: Error) => void;\n};\n\nexport type AddResult = {\n  /**\n   * An optional value provided by the request acceptor.\n   */\n  value?: unknown;\n\n  /**\n   * Callback functions that must be used to indicate to the request acceptor whether the post-approval logic was successful or not.\n   * Will be undefined if the request acceptor did not specify that they want to wait for a result.\n   */\n  resultCallbacks?: AcceptResultCallbacks;\n};\n\nexport type ApprovalControllerActions =\n  | GetApprovalsState\n  | ClearApprovalRequests\n  | AddApprovalRequest\n  | HasApprovalRequest\n  | AcceptRequest\n  | RejectRequest\n  | UpdateRequestState;\n\nexport type ApprovalStateChange = {\n  type: `${typeof controllerName}:stateChange`;\n  payload: [ApprovalControllerState, Patch[]];\n};\n\nexport type ApprovalControllerEvents = ApprovalStateChange;\n\nexport type ApprovalControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  ApprovalControllerActions,\n  ApprovalControllerEvents,\n  never,\n  never\n>;\n\ntype ApprovalControllerOptions = {\n  messenger: ApprovalControllerMessenger;\n  showApprovalRequest: ShowApprovalRequest;\n  state?: Partial<ApprovalControllerState>;\n  typesExcludedFromRateLimiting?: string[];\n};\n\n/**\n * Controller for managing requests that require user approval.\n *\n * Enables limiting the number of pending requests by origin and type, counting\n * pending requests, and more.\n *\n * Adding a request returns a promise that resolves or rejects when the request\n * is approved or denied, respectively.\n */\nexport class ApprovalController extends BaseControllerV2<\n  typeof controllerName,\n  ApprovalControllerState,\n  ApprovalControllerMessenger\n> {\n  private _approvals: Map<string, ApprovalCallbacks>;\n\n  private _origins: Map<string, Map<string, number>>;\n\n  private _showApprovalRequest: () => void;\n\n  private _typesExcludedFromRateLimiting: string[];\n\n  /**\n   * Construct an Approval controller.\n   *\n   * @param options - The controller options.\n   * @param options.showApprovalRequest - Function for opening the UI such that\n   * the request can be displayed to the user.\n   * @param options.messenger - The restricted controller messenger for the Approval controller.\n   * @param options.state - The initial controller state.\n   * @param options.typesExcludedFromRateLimiting - Array of aproval types which allow multiple pending approval requests from the same origin.\n   */\n  constructor({\n    messenger,\n    showApprovalRequest,\n    state = {},\n    typesExcludedFromRateLimiting = [],\n  }: ApprovalControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: { ...getDefaultState(), ...state },\n    });\n\n    this._approvals = new Map();\n    this._origins = new Map();\n    this._showApprovalRequest = showApprovalRequest;\n    this._typesExcludedFromRateLimiting = typesExcludedFromRateLimiting;\n    this.registerMessageHandlers();\n  }\n\n  /**\n   * Constructor helper for registering this controller's messaging system\n   * actions.\n   */\n  private registerMessageHandlers(): void {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:clearRequests` as const,\n      this.clear.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:addRequest` as const,\n      (opts: AddApprovalOptions, shouldShowRequest: boolean) => {\n        if (shouldShowRequest) {\n          return this.addAndShowApprovalRequest(opts);\n        }\n        return this.add(opts);\n      },\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:hasRequest` as const,\n      this.has.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:acceptRequest` as const,\n      this.accept.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:rejectRequest` as const,\n      this.reject.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateRequestState` as const,\n      this.updateRequestState.bind(this),\n    );\n  }\n\n  /**\n   * Adds an approval request per the given arguments, calls the show approval\n   * request function, and returns the associated approval promise resolving to\n   * an AddResult object.\n   *\n   * There can only be one approval per origin and type. An error is thrown if\n   * attempting to add an invalid or duplicate request.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request. A random id will be\n   * generated if none is provided.\n   * @param opts.origin - The origin of the approval request.\n   * @param opts.type - The type associated with the approval request.\n   * @param opts.requestData - Additional data associated with the request,\n   * @param opts.requestState - Additional state associated with the request,\n   * if any.\n   * @returns The approval promise resolving to an AddResult object.\n   */\n  addAndShowApprovalRequest(\n    opts: AddApprovalOptions & { expectsResult: true },\n  ): Promise<AddResult>;\n\n  /**\n   * Adds an approval request per the given arguments, calls the show approval\n   * request function, and returns the associated approval promise resolving\n   * to a value provided during acceptance.\n   *\n   * There can only be one approval per origin and type. An error is thrown if\n   * attempting to add an invalid or duplicate request.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request. A random id will be\n   * generated if none is provided.\n   * @param opts.origin - The origin of the approval request.\n   * @param opts.type - The type associated with the approval request.\n   * @param opts.requestData - Additional data associated with the request,\n   * @param opts.requestState - Additional state associated with the request,\n   * if any.\n   * @returns The approval promise resolving to a value provided during acceptance.\n   */\n  addAndShowApprovalRequest(opts: AddApprovalOptions): Promise<unknown>;\n\n  addAndShowApprovalRequest(opts: AddApprovalOptions): Promise<unknown> {\n    const promise = this._add(\n      opts.origin,\n      opts.type,\n      opts.id,\n      opts.requestData,\n      opts.requestState,\n      opts.expectsResult,\n    );\n    this._showApprovalRequest();\n    return promise;\n  }\n\n  /**\n   * Adds an approval request per the given arguments and returns the approval\n   * promise resolving to an AddResult object.\n   *\n   * There can only be one approval per origin and type. An error is thrown if\n   * attempting to add an invalid or duplicate request.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request. A random id will be\n   * generated if none is provided.\n   * @param opts.origin - The origin of the approval request.\n   * @param opts.type - The type associated with the approval request.\n   * @param opts.requestData - Additional data associated with the request,\n   * if any.\n   * @returns The approval promise resolving to an AddResult object.\n   */\n  add(opts: AddApprovalOptions & { expectsResult: true }): Promise<AddResult>;\n\n  /**\n   * Adds an approval request per the given arguments and returns the approval\n   * promise resolving to a value provided during acceptance.\n   *\n   * There can only be one approval per origin and type. An error is thrown if\n   * attempting to add an invalid or duplicate request.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request. A random id will be\n   * generated if none is provided.\n   * @param opts.origin - The origin of the approval request.\n   * @param opts.type - The type associated with the approval request.\n   * @param opts.requestData - Additional data associated with the request,\n   * if any.\n   * @returns The approval promise resolving to a value provided during acceptance.\n   */\n  add(opts: AddApprovalOptions): Promise<unknown>;\n\n  add(opts: AddApprovalOptions): Promise<unknown | AddResult> {\n    return this._add(\n      opts.origin,\n      opts.type,\n      opts.id,\n      opts.requestData,\n      opts.requestState,\n      opts.expectsResult,\n    );\n  }\n\n  /**\n   * Gets the info for the approval request with the given id.\n   *\n   * @param id - The id of the approval request.\n   * @returns The approval request data associated with the id.\n   */\n  get(id: string): ApprovalRequest<ApprovalRequestData> | undefined {\n    return this.state.pendingApprovals[id];\n  }\n\n  /**\n   * Gets the number of pending approvals, by origin and/or type.\n   *\n   * If only `origin` is specified, all approvals for that origin will be\n   * counted, regardless of type.\n   * If only `type` is specified, all approvals for that type will be counted,\n   * regardless of origin.\n   * If both `origin` and `type` are specified, 0 or 1 will be returned.\n   *\n   * @param opts - The approval count options.\n   * @param opts.origin - An approval origin.\n   * @param opts.type - The type of the approval request.\n   * @returns The current approval request count for the given origin and/or\n   * type.\n   */\n  getApprovalCount(opts: { origin?: string; type?: string } = {}): number {\n    if (!opts.origin && !opts.type) {\n      throw new Error('Must specify origin, type, or both.');\n    }\n    const { origin, type: _type } = opts;\n\n    if (origin && _type) {\n      return this._origins.get(origin)?.get(_type) || 0;\n    }\n\n    if (origin) {\n      return Array.from(\n        (this._origins.get(origin) || new Map()).values(),\n      ).reduce((total, value) => total + value, 0);\n    }\n\n    // Only \"type\" was specified\n    let count = 0;\n    for (const approval of Object.values(this.state.pendingApprovals)) {\n      if (approval.type === _type) {\n        count += 1;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Get the total count of all pending approval requests for all origins.\n   *\n   * @returns The total pending approval request count.\n   */\n  getTotalApprovalCount(): number {\n    return this.state.pendingApprovalCount;\n  }\n\n  /**\n   * Checks if there's a pending approval request per the given parameters.\n   * At least one parameter must be specified. An error will be thrown if the\n   * parameters are invalid.\n   *\n   * If `id` is specified, all other parameters will be ignored.\n   * If `id` is not specified, the method will check for requests that match\n   * all of the specified parameters.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The ID to check for.\n   * @param opts.origin - The origin to check for.\n   * @param opts.type - The type to check for.\n   * @returns `true` if a matching approval is found, and `false` otherwise.\n   */\n  has(opts: { id?: string; origin?: string; type?: string } = {}): boolean {\n    const { id, origin, type: _type } = opts;\n\n    if (id) {\n      if (typeof id !== 'string') {\n        throw new Error('May not specify non-string id.');\n      }\n      return this._approvals.has(id);\n    }\n\n    if (_type && typeof _type !== 'string') {\n      throw new Error('May not specify non-string type.');\n    }\n\n    if (origin) {\n      if (typeof origin !== 'string') {\n        throw new Error('May not specify non-string origin.');\n      }\n\n      // Check origin and type pair if type also specified\n      if (_type) {\n        return Boolean(this._origins.get(origin)?.get(_type));\n      }\n      return this._origins.has(origin);\n    }\n\n    if (_type) {\n      for (const approval of Object.values(this.state.pendingApprovals)) {\n        if (approval.type === _type) {\n          return true;\n        }\n      }\n      return false;\n    }\n    throw new Error(\n      'Must specify a valid combination of id, origin, and type.',\n    );\n  }\n\n  /**\n   * Resolves the promise of the approval with the given id, and deletes the\n   * approval. Throws an error if no such approval exists.\n   *\n   * @param id - The id of the approval request.\n   * @param value - The value to resolve the approval promise with.\n   * @param options - Options bag.\n   * @returns A promise that either resolves once a result is provided by\n   * the creator of the approval request, or immediately if `options.waitForResult`\n   * is `false` or `undefined`.\n   */\n  accept(\n    id: string,\n    value?: unknown,\n    options?: AcceptOptions,\n  ): Promise<AcceptResult> {\n    const approval = this.get(id) as ApprovalRequest<any>;\n    const requestPromise = this._deleteApprovalAndGetCallbacks(id);\n\n    return new Promise((resolve, reject) => {\n      const resultCallbacks: AcceptResultCallbacks = {\n        success: (acceptValue?: unknown) => resolve({ value: acceptValue }),\n        error: reject,\n      };\n\n      if (options?.waitForResult && !approval.expectsResult) {\n        reject(new ApprovalRequestNoResultSupportError(id));\n        return;\n      }\n\n      const resultValue = options?.waitForResult ? resultCallbacks : undefined;\n\n      const resolveValue = approval.expectsResult\n        ? { value, resultCallbacks: resultValue }\n        : value;\n\n      requestPromise.resolve(resolveValue);\n\n      if (!options?.waitForResult) {\n        resolve({ value: undefined });\n      }\n    });\n  }\n\n  /**\n   * Rejects the promise of the approval with the given id, and deletes the\n   * approval. Throws an error if no such approval exists.\n   *\n   * @param id - The id of the approval request.\n   * @param error - The error to reject the approval promise with.\n   */\n  reject(id: string, error: unknown): void {\n    this._deleteApprovalAndGetCallbacks(id).reject(error);\n  }\n\n  /**\n   * Rejects and deletes all approval requests.\n   *\n   * @param rejectionError - The EthereumRpcError to reject the approval\n   * requests with.\n   */\n  clear(rejectionError: EthereumRpcError<unknown>): void {\n    for (const id of this._approvals.keys()) {\n      this.reject(id, rejectionError);\n    }\n    this._origins.clear();\n    this.update(() => getDefaultState());\n  }\n\n  /**\n   * Updates the request state of the approval with the given id.\n   *\n   * @param opts - Options bag.\n   * @param opts.id - The id of the approval request.\n   * @param opts.requestState - Additional data associated with the request\n   */\n  updateRequestState(opts: UpdateRequestStateOptions): void {\n    if (!this.state.pendingApprovals[opts.id]) {\n      throw new ApprovalRequestNotFoundError(opts.id);\n    }\n\n    this.update((draftState) => {\n      // Typecast: ts(2589)\n      draftState.pendingApprovals[opts.id].requestState =\n        opts.requestState as any;\n    });\n  }\n\n  /**\n   * Implementation of add operation.\n   *\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   * @param id - The id of the approval request.\n   * @param requestData - The request data associated with the approval request.\n   * @param requestState - The request state associated with the approval request.\n   * @param expectsResult - Whether the approval request expects a result object to be returned.\n   * @returns The approval promise.\n   */\n  private _add(\n    origin: string,\n    type: string,\n    id: string = nanoid(),\n    requestData?: Record<string, Json>,\n    requestState?: Record<string, Json>,\n    expectsResult?: boolean,\n  ): Promise<unknown | AddResult> {\n    this._validateAddParams(id, origin, type, requestData, requestState);\n\n    if (\n      !this._typesExcludedFromRateLimiting.includes(type) &&\n      this.has({ origin, type })\n    ) {\n      throw ethErrors.rpc.resourceUnavailable(\n        getAlreadyPendingMessage(origin, type),\n      );\n    }\n\n    // add pending approval\n    return new Promise((resolve, reject) => {\n      this._approvals.set(id, { resolve, reject });\n      this._addPendingApprovalOrigin(origin, type);\n\n      this._addToStore(\n        id,\n        origin,\n        type,\n        requestData,\n        requestState,\n        expectsResult,\n      );\n    });\n  }\n\n  /**\n   * Validates parameters to the add method.\n   *\n   * @param id - The id of the approval request.\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   * @param requestData - The request data associated with the approval request.\n   * @param requestState - The request state associated with the approval request.\n   */\n  private _validateAddParams(\n    id: string,\n    origin: string,\n    type: string,\n    requestData?: Record<string, Json>,\n    requestState?: Record<string, Json>,\n  ): void {\n    let errorMessage = null;\n    if (!id || typeof id !== 'string') {\n      errorMessage = 'Must specify non-empty string id.';\n    } else if (this._approvals.has(id)) {\n      errorMessage = `Approval request with id '${id}' already exists.`;\n    } else if (!origin || typeof origin !== 'string') {\n      errorMessage = 'Must specify non-empty string origin.';\n    } else if (!type || typeof type !== 'string') {\n      errorMessage = 'Must specify non-empty string type.';\n    } else if (\n      requestData &&\n      (typeof requestData !== 'object' || Array.isArray(requestData))\n    ) {\n      errorMessage = 'Request data must be a plain object if specified.';\n    } else if (\n      requestState &&\n      (typeof requestState !== 'object' || Array.isArray(requestState))\n    ) {\n      errorMessage = 'Request state must be a plain object if specified.';\n    }\n\n    if (errorMessage) {\n      throw ethErrors.rpc.internal(errorMessage);\n    }\n  }\n\n  /**\n   * Adds an entry to _origins.\n   * Performs no validation.\n   *\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   */\n  private _addPendingApprovalOrigin(origin: string, type: string): void {\n    let originMap = this._origins.get(origin);\n\n    if (!originMap) {\n      originMap = new Map();\n      this._origins.set(origin, originMap);\n    }\n\n    const currentValue = originMap.get(type) || 0;\n    originMap.set(type, currentValue + 1);\n  }\n\n  /**\n   * Adds an entry to the store.\n   * Performs no validation.\n   *\n   * @param id - The id of the approval request.\n   * @param origin - The origin of the approval request.\n   * @param type - The type associated with the approval request.\n   * @param requestData - The request data associated with the approval request.\n   * @param requestState - The request state associated with the approval request.\n   * @param expectsResult - Whether the request expects a result object to be returned.\n   */\n  private _addToStore(\n    id: string,\n    origin: string,\n    type: string,\n    requestData?: Record<string, Json>,\n    requestState?: Record<string, Json>,\n    expectsResult?: boolean,\n  ): void {\n    const approval: ApprovalRequest<Record<string, Json> | null> = {\n      id,\n      origin,\n      type,\n      time: Date.now(),\n      requestData: requestData || null,\n      requestState: requestState || null,\n      expectsResult: expectsResult || false,\n    };\n\n    this.update((draftState) => {\n      // Typecast: ts(2589)\n      draftState.pendingApprovals[id] = approval as any;\n      draftState.pendingApprovalCount = Object.keys(\n        draftState.pendingApprovals,\n      ).length;\n    });\n  }\n\n  /**\n   * Deletes the approval with the given id. The approval promise must be\n   * resolved or reject before this method is called.\n   * Deletion is an internal operation because approval state is solely\n   * managed by this controller.\n   *\n   * @param id - The id of the approval request to be deleted.\n   */\n  private _delete(id: string): void {\n    this._approvals.delete(id);\n\n    // This method is only called after verifying that the approval with the\n    // specified id exists.\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const { origin, type } = this.state.pendingApprovals[id]!;\n\n    const originMap = this._origins.get(origin) as Map<string, number>;\n    const originTotalCount = this.getApprovalCount({ origin });\n    const originTypeCount = originMap.get(type) as number;\n\n    if (originTotalCount === 1) {\n      this._origins.delete(origin);\n    } else {\n      originMap.set(type, originTypeCount - 1);\n    }\n\n    this.update((draftState) => {\n      delete draftState.pendingApprovals[id];\n      draftState.pendingApprovalCount = Object.keys(\n        draftState.pendingApprovals,\n      ).length;\n    });\n  }\n\n  /**\n   * Gets the approval callbacks for the given id, deletes the entry, and then\n   * returns the callbacks for promise resolution.\n   * Throws an error if no approval is found for the given id.\n   *\n   * @param id - The id of the approval request.\n   * @returns The promise callbacks associated with the approval request.\n   */\n  private _deleteApprovalAndGetCallbacks(id: string): ApprovalCallbacks {\n    const callbacks = this._approvals.get(id);\n    if (!callbacks) {\n      throw new ApprovalRequestNotFoundError(id);\n    }\n\n    this._delete(id);\n    return callbacks;\n  }\n}\nexport default ApprovalController;\n"]}
\ No newline at end of file
diff --git a/dist/errors.d.ts b/dist/errors.d.ts
index f127df8..4e60ebe 100644
--- a/dist/errors.d.ts
+++ b/dist/errors.d.ts
@@ -1,4 +1,7 @@
 export declare class ApprovalRequestNotFoundError extends Error {
     constructor(id: string);
 }
+export declare class ApprovalRequestNoResultSupportError extends Error {
+    constructor(id: string);
+}
 //# sourceMappingURL=errors.d.ts.map
\ No newline at end of file
diff --git a/dist/errors.d.ts.map b/dist/errors.d.ts.map
index f743a52..a852716 100644
--- a/dist/errors.d.ts.map
+++ b/dist/errors.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"errors.d.ts","sourceRoot":"","sources":["../src/errors.ts"],"names":[],"mappings":"AAAA,qBAAa,4BAA6B,SAAQ,KAAK;gBACzC,EAAE,EAAE,MAAM;CAGvB"}
\ No newline at end of file
+{"version":3,"file":"errors.d.ts","sourceRoot":"","sources":["../src/errors.ts"],"names":[],"mappings":"AAAA,qBAAa,4BAA6B,SAAQ,KAAK;gBACzC,EAAE,EAAE,MAAM;CAGvB;AAED,qBAAa,mCAAoC,SAAQ,KAAK;gBAChD,EAAE,EAAE,MAAM;CAKvB"}
\ No newline at end of file
diff --git a/dist/errors.js b/dist/errors.js
index e9263a6..fb4020b 100644
--- a/dist/errors.js
+++ b/dist/errors.js
@@ -1,10 +1,16 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.ApprovalRequestNotFoundError = void 0;
+exports.ApprovalRequestNoResultSupportError = exports.ApprovalRequestNotFoundError = void 0;
 class ApprovalRequestNotFoundError extends Error {
     constructor(id) {
         super(`Approval request with id '${id}' not found.`);
     }
 }
 exports.ApprovalRequestNotFoundError = ApprovalRequestNotFoundError;
+class ApprovalRequestNoResultSupportError extends Error {
+    constructor(id) {
+        super(`Approval acceptance requested result but request with id '${id}' does not support it.`);
+    }
+}
+exports.ApprovalRequestNoResultSupportError = ApprovalRequestNoResultSupportError;
 //# sourceMappingURL=errors.js.map
\ No newline at end of file
diff --git a/dist/errors.js.map b/dist/errors.js.map
index b1668c5..c112d27 100644
--- a/dist/errors.js.map
+++ b/dist/errors.js.map
@@ -1 +1 @@
-{"version":3,"file":"errors.js","sourceRoot":"","sources":["../src/errors.ts"],"names":[],"mappings":";;;AAAA,MAAa,4BAA6B,SAAQ,KAAK;IACrD,YAAY,EAAU;QACpB,KAAK,CAAC,6BAA6B,EAAE,cAAc,CAAC,CAAC;IACvD,CAAC;CACF;AAJD,oEAIC","sourcesContent":["export class ApprovalRequestNotFoundError extends Error {\n  constructor(id: string) {\n    super(`Approval request with id '${id}' not found.`);\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"errors.js","sourceRoot":"","sources":["../src/errors.ts"],"names":[],"mappings":";;;AAAA,MAAa,4BAA6B,SAAQ,KAAK;IACrD,YAAY,EAAU;QACpB,KAAK,CAAC,6BAA6B,EAAE,cAAc,CAAC,CAAC;IACvD,CAAC;CACF;AAJD,oEAIC;AAED,MAAa,mCAAoC,SAAQ,KAAK;IAC5D,YAAY,EAAU;QACpB,KAAK,CACH,6DAA6D,EAAE,wBAAwB,CACxF,CAAC;IACJ,CAAC;CACF;AAND,kFAMC","sourcesContent":["export class ApprovalRequestNotFoundError extends Error {\n  constructor(id: string) {\n    super(`Approval request with id '${id}' not found.`);\n  }\n}\n\nexport class ApprovalRequestNoResultSupportError extends Error {\n  constructor(id: string) {\n    super(\n      `Approval acceptance requested result but request with id '${id}' does not support it.`,\n    );\n  }\n}\n"]}
\ No newline at end of file