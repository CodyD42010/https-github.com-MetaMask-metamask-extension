diff --git a/node_modules/@metamask/snap-controllers/dist/permissions/endowments/network-access.js b/node_modules/@metamask/snap-controllers/dist/permissions/endowments/network-access.js
index 8ada843..1a44768 100644
--- a/node_modules/@metamask/snap-controllers/dist/permissions/endowments/network-access.js
+++ b/node_modules/@metamask/snap-controllers/dist/permissions/endowments/network-access.js
@@ -14,7 +14,7 @@ const specificationBuilder = (_builderOptions) => {
         targetKey: permissionName,
         allowedCaveats: null,
         endowmentGetter: (_getterOptions) => {
-            return ['fetch'];
+            return ['fetch', 'XMLHttpRequest'];
         },
     };
 };
diff --git a/node_modules/@metamask/snap-controllers/dist/snaps/SnapController.js b/node_modules/@metamask/snap-controllers/dist/snaps/SnapController.js
index 801ece1..13a52b7 100644
--- a/node_modules/@metamask/snap-controllers/dist/snaps/SnapController.js
+++ b/node_modules/@metamask/snap-controllers/dist/snaps/SnapController.js
@@ -465,7 +465,7 @@ class SnapController extends controllers_1.BaseControllerV2 {
      */
     async installSnaps(origin, requestedSnaps) {
         const result = {};
-        await Promise.all(Object.entries(requestedSnaps).map(async ([snapId, { version = 'latest' }]) => {
+      await Promise.all(Object.entries(requestedSnaps).map(async ([snapId, { version = 'latest' }]) => {
             const permissionName = exports.SNAP_PREFIX + snapId;
             if (!isValidSnapVersion(version)) {
                 result[snapId] = {
@@ -495,10 +495,15 @@ class SnapController extends controllers_1.BaseControllerV2 {
      * @param version - The version of the snap to install.
      * @returns The resulting snap object, or an error if something went wrong.
      */
-    async processRequestedSnap(snapId, version) {
+  async processRequestedSnap(snapId, version) {
         const existingSnap = this.getTruncated(snapId);
         if (existingSnap) {
+          if (!snapId.startsWith(utils_2.SnapIdPrefixes.local)) {
             return existingSnap;
+          }
+          if (this.isRunning(snapId)) {
+            this.stopSnap(snapId);
+          }
         }
         try {
             const { sourceCode } = await this.add({
@@ -593,7 +598,13 @@ class SnapController extends controllers_1.BaseControllerV2 {
                 }
             }
         }
-        return allEndowments.length > 0 ? allEndowments : undefined;
+      return [
+        'atob',
+        'btoa',
+        'TextEncoder',
+        'TextEncoderStream',
+        ...allEndowments,
+      ]
     }
     /**
      * Internal method. See the "add" method.
