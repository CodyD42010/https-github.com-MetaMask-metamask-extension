diff --git a/dist/CustodyKeyring.d.ts b/dist/CustodyKeyring.d.ts
index 13391c4fa1ca8190fee8aa8122a8a9fb0c2f0b9b..47f9bb5d8830609e96ce682eb7d457308d72a95a 100644
--- a/dist/CustodyKeyring.d.ts
+++ b/dist/CustodyKeyring.d.ts
@@ -1,7 +1,7 @@
 /// <reference types="node" />
 import { FeeMarketEIP1559Transaction, Transaction } from "@ethereumjs/tx";
 import { MMISDK } from "@metamask-institutional/sdk";
-import { AddressType, AuthDetails, AuthTypes, ICustodianAccount, ICustodianTransactionLink, ICustodianType, IExtensionCustodianAccount, IInteractiveRefreshTokenChangeEvent, IMetamaskContractMetadata, IRefreshTokenAuthDetails, IRefreshTokenChangeEvent, ISignatureDetails, ITransactionDetails, ITransactionStatusMap, MetamaskTransaction } from "@metamask-institutional/types";
+import { AddressType, AuthDetails, AuthTypes, ICustodianAccount, ICustodianTransactionLink, ICustodianType, IExtensionCustodianAccount, IInteractiveRefreshTokenChangeEvent, IMetamaskContractMetadata, IRefreshTokenChangeEvent, ISignatureDetails, ITransactionDetails, ITransactionStatusMap, MetamaskTransaction } from "@metamask-institutional/types";
 import { EventEmitter } from "events";
 import { ICustodyKeyringOptions } from "./interfaces/ICustodyKeyringOptions";
 import { ISerializedKeyring } from "./interfaces/ISerializedKeyring";
@@ -9,7 +9,7 @@ import { MmiConfigurationController } from "./MmiConfiguration";
 export type UniqueAccountDetails = {
     hash: string;
     authDetails: AuthDetails;
-    apiUrl: string;
+    envName: string;
 };
 export declare abstract class CustodyKeyring extends EventEmitter {
     static readonly type: any;
@@ -26,7 +26,7 @@ export declare abstract class CustodyKeyring extends EventEmitter {
     trackingActiveByCredentials: {};
     mmiConfigurationController: MmiConfigurationController;
     abstract txDeepLink(custodianDetails: any, txId: string): Promise<Partial<ICustodianTransactionLink> | null>;
-    abstract sdkFactory(authDetails: AuthDetails, apiUrl: string): MMISDK;
+    abstract sdkFactory(authDetails: AuthDetails, envName: string): MMISDK;
     protected sdkList: {
         sdk: MMISDK;
         hash: string;
@@ -47,14 +47,14 @@ export declare abstract class CustodyKeyring extends EventEmitter {
     addAccounts(n: number): Promise<void>;
     getAccounts(): Promise<any>;
     removeAccount(address: string): void;
-    hashAuthDetails(authDetails: AuthDetails, apiUrl: string): string;
-    replaceRefreshTokenAuthDetails(address: string, newAuthDetails: IRefreshTokenAuthDetails): void;
-    updateAccountsDetailsWithNewRefreshToken(oldRefreshToken: string, newRefreshToken: string, oldApiUrl: string): void;
-    handleRefreshTokenChangeEvent(event: IRefreshTokenChangeEvent, apiUrl: string): void;
+    hashAuthDetails(authDetails: AuthDetails, envName: string): string;
+    replaceRefreshTokenAuthDetails(address: string, refreshToken: string): void;
+    updateAccountsDetailsWithNewRefreshToken(oldRefreshToken: string, newRefreshToken: string, envName: string): void;
+    handleRefreshTokenChangeEvent(event: IRefreshTokenChangeEvent, envName: string): void;
     handleInteractiveRefreshTokenChangeEvent(event: IInteractiveRefreshTokenChangeEvent): void;
     createAuthDetails(token: string): AuthDetails;
-    getSDK(authDetails: AuthDetails, apiUrl?: string): MMISDK;
-    getCustodianAccounts(token: string, apiUrl: string, searchText?: string, getNonImportedAccounts?: boolean): Promise<ICustodianAccount<AuthDetails>[]>;
+    getSDK(authDetails: AuthDetails, envName: string): MMISDK;
+    getCustodianAccounts(token: string, envName: string, searchText?: string, getNonImportedAccounts?: boolean): Promise<ICustodianAccount<AuthDetails>[]>;
     getTransactionNote(txMeta: MetamaskTransaction): string;
     signTransaction(fromAddress: string, ethTx: FeeMarketEIP1559Transaction | Transaction, txMeta: MetamaskTransaction): Promise<ITransactionDetails>;
     getAllAccountsWithToken(token: string): ICustodianAccount[];
@@ -70,5 +70,39 @@ export declare abstract class CustodyKeyring extends EventEmitter {
     getCustomerProof(address: string): Promise<string>;
     signTypedData(address: string, data: any, opts: any): Promise<ITransactionDetails>;
     getSupportedChains(address: string): Promise<string[]>;
+    protected getCustodians(): {
+        type: string;
+        name: string;
+        onboardingUrl: string;
+        website: string;
+        envName: string;
+        apiUrl: string;
+        apiVersion: string;
+        iconUrl: string;
+        displayName: string;
+        websocketApiUrl: any;
+        production: boolean;
+        refreshTokenUrl: any;
+        isNoteToTraderSupported: boolean;
+        custodianPublishesTransaction: boolean;
+        version: number;
+    }[];
+    protected getCustodianFromEnvName(envName: string): {
+        type: string;
+        name: string;
+        onboardingUrl: string;
+        website: string;
+        envName: string;
+        apiUrl: string;
+        apiVersion: string;
+        iconUrl: string;
+        displayName: string;
+        websocketApiUrl: any;
+        production: boolean;
+        refreshTokenUrl: any;
+        isNoteToTraderSupported: boolean;
+        custodianPublishesTransaction: boolean;
+        version: number;
+    };
 }
 //# sourceMappingURL=CustodyKeyring.d.ts.map
\ No newline at end of file
diff --git a/dist/CustodyKeyring.d.ts.map b/dist/CustodyKeyring.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..7c04440e7c88329bd852714649e35a36b33f538e
--- /dev/null
+++ b/dist/CustodyKeyring.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"CustodyKeyring.d.ts","sourceRoot":"","sources":["../src/CustodyKeyring.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/CustodyKeyring.js b/dist/CustodyKeyring.js
index 109bb6ee740353e61de3c9d01302cafa029af6e7..c8c37d402d30e39e8b0f5d0c236d7a3d084e0ca2 100644
--- a/dist/CustodyKeyring.js
+++ b/dist/CustodyKeyring.js
@@ -23,7 +23,7 @@ class CustodyKeyring extends events_1.EventEmitter {
         this.mmiConfigurationController = opts.mmiConfigurationController;
     }
     getUniqueAccountDetails(account) {
-        return this.hashAuthDetails(account.authDetails, account.apiUrl);
+        return this.hashAuthDetails(account.authDetails, account.envName);
     }
     serialize() {
         console.log("Serializing custody keyring");
@@ -47,18 +47,35 @@ class CustodyKeyring extends events_1.EventEmitter {
             this.selectedAddresses = migratedOpts.selectedAddresses || [];
             this.accountsDetails = migratedOpts.accountsDetails || [];
             this.meta = migratedOpts.meta || {};
+            const custodians = this.getCustodians();
+            this.accountsDetails
+                .filter(account => !account.envName)
+                .forEach(account => {
+                var _a;
+                account.envName = (_a = custodians.find(c => c.apiUrl === account.apiUrl)) === null || _a === void 0 ? void 0 : _a.envName;
+            });
+            this.selectedAddresses
+                .filter(account => !account.envName)
+                .forEach(account => {
+                var _a;
+                account.envName = (_a = custodians.find(c => c.apiUrl === account.apiUrl)) === null || _a === void 0 ? void 0 : _a.envName;
+            });
             const uniqueAuthDetails = this.accountsDetails.reduce((result, details) => {
                 const hash = this.getUniqueAccountDetails(details);
                 if (!result.find(account => hash === account.hash)) {
                     result.push({
                         hash,
                         authDetails: details.authDetails,
-                        apiUrl: details.apiUrl,
+                        envName: details.envName,
                     });
                 }
                 return result;
             }, []);
-            uniqueAuthDetails.forEach(item => this.getSDK(item.authDetails, item.apiUrl));
+            uniqueAuthDetails.forEach(item => this.getSDK(item.authDetails, item.envName));
+            console.log("DESERIALIZED DETAILS", {
+                initial: opts,
+                migrated: migratedOpts,
+            });
             resolve();
         });
     }
@@ -84,7 +101,7 @@ class CustodyKeyring extends events_1.EventEmitter {
                     selectedAccountDetails.meta = { version: migrations_1.migrations.length };
                     this.accountsDetails.push(selectedAccountDetails);
                     this.accounts.push(address);
-                    this.getSDK(selectedAccountDetails.authDetails, selectedAccountDetails.apiUrl);
+                    this.getSDK(selectedAccountDetails.authDetails, selectedAccountDetails.envName);
                 }
             }
             resolve(this.accounts);
@@ -97,7 +114,8 @@ class CustodyKeyring extends events_1.EventEmitter {
         this.accounts = this.accounts.filter(a => a.toLowerCase() !== address.toLowerCase());
         this.accountsDetails = this.accountsDetails.filter(a => a.address.toLowerCase() !== address.toLowerCase());
     }
-    hashAuthDetails(authDetails, apiUrl) {
+    hashAuthDetails(authDetails, envName) {
+        const { apiUrl } = this.getCustodianFromEnvName(envName);
         let identifier;
         if (authDetails.jwt) {
             identifier = authDetails.jwt + apiUrl;
@@ -107,21 +125,23 @@ class CustodyKeyring extends events_1.EventEmitter {
         }
         return crypto_1.default.createHash("sha256").update(identifier).digest("hex");
     }
-    replaceRefreshTokenAuthDetails(address, newAuthDetails) {
-        const { authDetails, apiUrl } = this.getAccountDetails(address);
-        const sdk = this.getSDK(authDetails, apiUrl);
-        sdk.changeRefreshTokenAuthDetails(newAuthDetails);
+    replaceRefreshTokenAuthDetails(address, refreshToken) {
+        const { authDetails, envName } = this.getAccountDetails(address);
+        const sdk = this.getSDK(authDetails, envName);
+        sdk.changeRefreshTokenAuthDetails({
+            refreshToken,
+        });
     }
-    updateAccountsDetailsWithNewRefreshToken(oldRefreshToken, newRefreshToken, oldApiUrl) {
+    updateAccountsDetailsWithNewRefreshToken(oldRefreshToken, newRefreshToken, envName) {
         for (const account of this.accountsDetails) {
             const authDetails = account.authDetails;
-            if (authDetails.refreshToken === oldRefreshToken && account.apiUrl === oldApiUrl) {
+            if (authDetails.refreshToken === oldRefreshToken && account.envName === envName) {
                 authDetails.refreshToken = newRefreshToken;
             }
         }
     }
-    handleRefreshTokenChangeEvent(event, apiUrl) {
-        this.updateAccountsDetailsWithNewRefreshToken(event.oldRefreshToken, event.newRefreshToken, apiUrl);
+    handleRefreshTokenChangeEvent(event, envName) {
+        this.updateAccountsDetailsWithNewRefreshToken(event.oldRefreshToken, event.newRefreshToken, envName);
         const payload = {
             oldRefreshToken: event.oldRefreshToken,
             newRefreshToken: event.newRefreshToken,
@@ -145,14 +165,14 @@ class CustodyKeyring extends events_1.EventEmitter {
         }
         return authDetails;
     }
-    getSDK(authDetails, apiUrl) {
-        const hash = this.hashAuthDetails(authDetails, apiUrl);
+    getSDK(authDetails, envName) {
+        const hash = this.hashAuthDetails(authDetails, envName);
         const found = this.sdkList.find(item => item.hash === hash);
         if (found) {
             return found.sdk;
         }
-        const sdk = this.sdkFactory(authDetails, apiUrl);
-        sdk.on(constants_1.REFRESH_TOKEN_CHANGE_EVENT, (event) => this.handleRefreshTokenChangeEvent(event, apiUrl));
+        const sdk = this.sdkFactory(authDetails, envName);
+        sdk.on(constants_1.REFRESH_TOKEN_CHANGE_EVENT, (event) => this.handleRefreshTokenChangeEvent(event, envName));
         sdk.on(constants_1.INTERACTIVE_REPLACEMENT_TOKEN_CHANGE_EVENT, (event) => this.handleInteractiveRefreshTokenChangeEvent(event));
         this.sdkList.push({
             sdk,
@@ -160,9 +180,9 @@ class CustodyKeyring extends events_1.EventEmitter {
         });
         return sdk;
     }
-    async getCustodianAccounts(token, apiUrl, searchText, getNonImportedAccounts = true) {
+    async getCustodianAccounts(token, envName, searchText, getNonImportedAccounts = true) {
         const authDetails = this.createAuthDetails(token);
-        const sdk = this.getSDK(authDetails, apiUrl);
+        const sdk = this.getSDK(authDetails, envName);
         let accounts;
         if (searchText) {
             if (searchText.startsWith("0x")) {
@@ -208,8 +228,8 @@ class CustodyKeyring extends events_1.EventEmitter {
         else if (!(data === null || data === void 0 ? void 0 : data.startsWith("0x"))) {
             data = "0x" + data;
         }
-        const { authDetails, apiUrl } = this.getAccountDetails(fromAddress);
-        const sdk = this.getSDK(authDetails, apiUrl);
+        const { authDetails, envName } = this.getAccountDetails(fromAddress);
+        const sdk = this.getSDK(authDetails, envName);
         const noGasPayload = {
             from: (0, util_1.toChecksumAddress)(fromAddress),
             value: BigInt(txMeta.txParams.value).toString(),
@@ -263,8 +283,8 @@ class CustodyKeyring extends events_1.EventEmitter {
         if (from === undefined || txCustodyId === undefined) {
             return null;
         }
-        const { authDetails, apiUrl } = this.getAccountDetails(from);
-        const sdk = this.getSDK(authDetails, apiUrl);
+        const { authDetails, envName } = this.getAccountDetails(from);
+        const sdk = this.getSDK(authDetails, envName);
         const tx = await sdk.getTransaction((0, util_1.toChecksumAddress)(from), txCustodyId);
         return tx;
     }
@@ -278,14 +298,14 @@ class CustodyKeyring extends events_1.EventEmitter {
         if (signatureId === undefined) {
             return null;
         }
-        const { authDetails, apiUrl } = this.getAccountDetails(address);
-        const sdk = this.getSDK(authDetails, apiUrl);
+        const { authDetails, envName } = this.getAccountDetails(address);
+        const sdk = this.getSDK(authDetails, envName);
         const signature = await sdk.getSignature((0, util_1.toChecksumAddress)(address), signatureId);
         return signature;
     }
     async signPersonalMessage(address, message, opts) {
-        const { authDetails, apiUrl } = this.getAccountDetails(address);
-        const sdk = this.getSDK(authDetails, apiUrl);
+        const { authDetails, envName } = this.getAccountDetails(address);
+        const sdk = this.getSDK(authDetails, envName);
         const signedMessageMetadata = {
             chainId: null,
             originUrl: null,
@@ -308,16 +328,16 @@ class CustodyKeyring extends events_1.EventEmitter {
         return tokenContracts;
     }
     async getCustomerProof(address) {
-        const { authDetails, apiUrl } = this.getAccountDetails(address);
-        const sdk = this.getSDK(authDetails, apiUrl);
+        const { authDetails, envName } = this.getAccountDetails(address);
+        const sdk = this.getSDK(authDetails, envName);
         return sdk.getCustomerProof();
     }
     async signTypedData(address, data, opts) {
         if ((opts === null || opts === void 0 ? void 0 : opts.version) !== "V4" && (opts === null || opts === void 0 ? void 0 : opts.version) !== "V3") {
             this.emit("error", "Only signedTypedData_v4 and signedTypedData_v3 is supported");
         }
-        const { authDetails, apiUrl } = this.getAccountDetails(address);
-        const sdk = this.getSDK(authDetails, apiUrl);
+        const { authDetails, envName } = this.getAccountDetails(address);
+        const sdk = this.getSDK(authDetails, envName);
         const signedTypedMessageMetadata = {
             chainId: null,
             originUrl: null,
@@ -326,10 +346,21 @@ class CustodyKeyring extends events_1.EventEmitter {
         return sdk.signedTypedData_v4(address, data, opts.version, signedTypedMessageMetadata);
     }
     getSupportedChains(address) {
-        const { authDetails, apiUrl } = this.getAccountDetails(address);
-        const sdk = this.getSDK(authDetails, apiUrl);
+        const { authDetails, envName } = this.getAccountDetails(address);
+        const sdk = this.getSDK(authDetails, envName);
         return sdk.getSupportedChains(address);
     }
+    getCustodians() {
+        const { mmiConfiguration: { custodians }, } = this.mmiConfigurationController.store.getState();
+        return custodians;
+    }
+    getCustodianFromEnvName(envName) {
+        const custodian = this.getCustodians().find(c => c.envName === envName);
+        if (!custodian) {
+            throw new Error(`Could not find custodian with name: ${envName} - please contact support`);
+        }
+        return custodian;
+    }
 }
 exports.CustodyKeyring = CustodyKeyring;
 //# sourceMappingURL=CustodyKeyring.js.map
\ No newline at end of file
diff --git a/dist/CustodyKeyring.js.map b/dist/CustodyKeyring.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..f013bdc2ed09aee05ed1db5c3f7ac1b5f86686fe
--- /dev/null
+++ b/dist/CustodyKeyring.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"CustodyKeyring.js","sourceRoot":"","sources":["../src/CustodyKeyring.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/MmiConfiguration.d.ts.map b/dist/MmiConfiguration.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..ba8660862ffa4e63cf16d6cc3680afcfb12c44ff
--- /dev/null
+++ b/dist/MmiConfiguration.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"MmiConfiguration.d.ts","sourceRoot":"","sources":["../src/MmiConfiguration.ts"],"names":[],"mappings":"AAQA,OAAO,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;AAC7D,OAAO,EAAE,kCAAkC,EAAE,MAAM,iDAAiD,CAAC;AAOrG,qBAAa,0BAA0B;IAC9B,KAAK,MAAC;IACN,mBAAmB,MAAC;gBAOf,IAAI,GAAE,kCAAuC;IAiCnD,kBAAkB,IAAI,OAAO,CAAC,IAAI,CAAC;IAoFzC,gBAAgB,IAAI,OAAO,CAAC,cAAc,CAAC;IAI3C,kBAAkB,IAAI,MAAM;CAW7B"}
\ No newline at end of file
diff --git a/dist/MmiConfiguration.js.map b/dist/MmiConfiguration.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..3038b18711043ca2d746580a33f2dc6af0980433
--- /dev/null
+++ b/dist/MmiConfiguration.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"MmiConfiguration.js","sourceRoot":"","sources":["../src/MmiConfiguration.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/MmiConfiguration.test.d.ts b/dist/MmiConfiguration.test.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..5e46ca36b78e8893fa4ea8fa5981c1a64d9b3592
--- /dev/null
+++ b/dist/MmiConfiguration.test.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=MmiConfiguration.test.d.ts.map
\ No newline at end of file
diff --git a/dist/MmiConfiguration.test.d.ts.map b/dist/MmiConfiguration.test.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..48700b01fbd43edfe38486b6e77cf8261c52cd1c
--- /dev/null
+++ b/dist/MmiConfiguration.test.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"MmiConfiguration.test.d.ts","sourceRoot":"","sources":["../src/MmiConfiguration.test.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/MmiConfiguration.test.js b/dist/MmiConfiguration.test.js
new file mode 100644
index 0000000000000000000000000000000000000000..863cfb42dcba4f9152f6fc1782141b7f0971ec7c
--- /dev/null
+++ b/dist/MmiConfiguration.test.js
@@ -0,0 +1,165 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+const custodianTypes_1 = require("./custodianTypes");
+const MmiConfiguration_1 = require("./MmiConfiguration");
+const missingV1Custodian = {
+    apiBaseUrl: "",
+    displayName: "Legacy",
+    iconUrl: "images/test.svg",
+    name: "legacy",
+    production: true,
+    type: "Legacy",
+    enabled: true,
+    refreshTokenUrl: "https://test",
+    isNoteToTraderSupported: true,
+    environments: [],
+};
+const v1custodianWithNoteSupport = {
+    apiBaseUrl: "",
+    displayName: "Qredo",
+    iconUrl: "images/test.svg",
+    name: "qredo",
+    production: true,
+    type: "Qredo",
+    enabled: true,
+    refreshTokenUrl: "https://test",
+    isNoteToTraderSupported: true,
+    environments: [],
+};
+const v2custodian = {
+    type: "JSONRPC",
+    iconUrl: "https://saturn-custody-ui.dev.metamask-institutional.io/saturn.svg",
+    name: "Saturn Custody",
+    website: "https://saturn-custody-ui.dev.metamask-institutional.io/",
+    onboardingUrl: "https://saturn-custody-ui.dev.metamask-institutional.io/",
+    envName: "saturn-dev",
+    apiUrl: "https://saturn-custody.dev.metamask-institutional.io/eth",
+    displayName: "Saturn Custody",
+    production: true,
+    refreshTokenUrl: "https://saturn-custody.dev.metamask-institutional.io/oauth/token",
+    websocketApiUrl: "wss://websocket.dev.metamask-institutional.io/v1/ws",
+    isNoteToTraderSupported: true,
+    version: 2,
+    headquarters: "UK",
+    tokens: "All ERC-20 tokens",
+    chains: ["Ethereum"],
+    tags: null,
+    apiVersion: 2,
+    custodianPublishesTransaction: false,
+    environments: [
+        {
+            refreshTokenUrl: "https://saturn-custody.dev.metamask-institutional.io/oauth/token",
+            name: "saturn-dev",
+            displayName: "Saturn Custody",
+            enabled: true,
+            websocketApiUrl: "wss://websocket.dev.metamask-institutional.io/v1/ws",
+            apiBaseUrl: "https://saturn-custody.dev.metamask-institutional.io/eth",
+            iconUrl: "https://saturn-custody-ui.dev.metamask-institutional.io/saturn.svg",
+            apiVersion: 2,
+            custodianPublishesTransaction: false,
+            isNoteToTraderSupported: true,
+        },
+    ],
+};
+jest.mock("@metamask-institutional/configuration-client", () => {
+    return {
+        ConfigurationClient: jest.fn().mockImplementation(() => ({
+            getConfiguration: jest.fn().mockResolvedValue({
+                portfolio: {
+                    enabled: true,
+                    url: "http://test",
+                    cookieSetUrls: ["test"],
+                },
+                features: {
+                    websocketApi: false,
+                },
+                custodians: [missingV1Custodian, v1custodianWithNoteSupport, v2custodian],
+            }),
+        })),
+    };
+});
+describe("MmiConfigurationController", () => {
+    const initState = {
+        mmiConfiguration: {
+            portfolio: {
+                enabled: false,
+                url: "",
+                cookieSetUrls: [],
+            },
+            features: {
+                websocketApi: false,
+            },
+            custodians: [],
+        },
+    };
+    const options = { initState };
+    const createController = async (options) => {
+        return await new MmiConfiguration_1.MmiConfigurationController(options);
+    };
+    it("should create configurationClient", async function () {
+        const controller = await createController(options);
+        expect(controller.configurationClient).toBeTruthy();
+    });
+    it("should get the configuration from the client and store it. The custodian list should include the V1 custodians from the hardcoded list, and any v2 custodians from the configuration client", async () => {
+        const controller = await createController(options);
+        jest.spyOn(controller, "getConfiguration");
+        await controller.storeConfiguration();
+        expect(controller.getConfiguration).toHaveBeenCalled();
+        expect(controller.store.getState().mmiConfiguration).toEqual({
+            portfolio: {
+                enabled: true,
+                url: "http://test",
+                cookieSetUrls: ["test"],
+            },
+            features: {
+                websocketApi: false,
+            },
+            custodians: [
+                ...Object.values(custodianTypes_1.CUSTODIAN_TYPES)
+                    .filter(custodian => custodian.hidden === false)
+                    .map(custodian => ({
+                    type: custodian.name,
+                    name: custodian.name.toLowerCase(),
+                    apiUrl: custodian.apiUrl,
+                    iconUrl: custodian.imgSrc,
+                    website: custodian.website,
+                    onboardingUrl: custodian.onboardingUrl,
+                    envName: custodian.envName,
+                    displayName: custodian.displayName,
+                    apiVersion: custodian.apiVersion,
+                    custodianPublishesTransaction: custodian.custodianPublishesTransaction,
+                    production: custodian.production,
+                    refreshTokenUrl: null,
+                    websocketApiUrl: null,
+                    isNoteToTraderSupported: false,
+                    version: 1,
+                })),
+                {
+                    type: "JSONRPC",
+                    name: v2custodian.name,
+                    apiUrl: v2custodian.environments[0].apiBaseUrl,
+                    iconUrl: v2custodian.iconUrl,
+                    website: v2custodian.website,
+                    onboardingUrl: v2custodian.onboardingUrl,
+                    envName: v2custodian.envName,
+                    displayName: v2custodian.displayName,
+                    apiVersion: v2custodian.apiVersion,
+                    custodianPublishesTransaction: v2custodian.custodianPublishesTransaction,
+                    production: v2custodian.production,
+                    refreshTokenUrl: v2custodian.refreshTokenUrl,
+                    isNoteToTraderSupported: v2custodian.environments[0].isNoteToTraderSupported,
+                    websocketApiUrl: "wss://websocket.dev.metamask-institutional.io/v1/ws",
+                    version: 2,
+                },
+            ],
+        });
+    });
+    it("should give us the websocket API URL", async () => {
+        const controller = await createController(options);
+        jest.spyOn(controller, "getConfiguration");
+        await controller.storeConfiguration();
+        expect(controller.getConfiguration).toHaveBeenCalled();
+        expect(controller.getWebsocketApiUrl()).toEqual(v2custodian.websocketApiUrl);
+    });
+});
+//# sourceMappingURL=MmiConfiguration.test.js.map
\ No newline at end of file
diff --git a/dist/MmiConfiguration.test.js.map b/dist/MmiConfiguration.test.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..99a103a7e7517b0ef8456795e1c51728d9ff63f1
--- /dev/null
+++ b/dist/MmiConfiguration.test.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"MmiConfiguration.test.js","sourceRoot":"","sources":["../src/MmiConfiguration.test.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/constants/index.d.ts.map b/dist/constants/index.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..bd55986ff81be268fbd88b51dd4aa38c128ad34d
--- /dev/null
+++ b/dist/constants/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/constants/index.ts"],"names":[],"mappings":"AAAA,eAAO,MAAM,qBAAqB,KAAK,CAAC;AACxC,eAAO,MAAM,0BAA0B,yBAAyB,CAAC;AACjE,eAAO,MAAM,0CAA0C,yCAAyC,CAAC"}
\ No newline at end of file
diff --git a/dist/constants/index.js.map b/dist/constants/index.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..e33bf4b53b477a402d70198c976d07ed666c57a3
--- /dev/null
+++ b/dist/constants/index.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/constants/index.ts"],"names":[],"mappings":";;;AAAa,QAAA,qBAAqB,GAAG,EAAE,CAAC;AAC3B,QAAA,0BAA0B,GAAG,sBAAsB,CAAC;AACpD,QAAA,0CAA0C,GAAG,sCAAsC,CAAC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/bitgo/BitgoCustodyKeyring.d.ts b/dist/custodianTypes/bitgo/BitgoCustodyKeyring.d.ts
index ae12f77aa458d980983d98db20412790f2c68688..43052b1534deee4184754b06de81f7e533b8a90a 100644
--- a/dist/custodianTypes/bitgo/BitgoCustodyKeyring.d.ts
+++ b/dist/custodianTypes/bitgo/BitgoCustodyKeyring.d.ts
@@ -24,7 +24,7 @@ export declare class BitgoCustodyKeyring extends CustodyKeyring {
             mmiApiUrl: string;
         }[];
     };
-    sdkFactory: (authDetails: AuthDetails, apiUrl: string) => MMISDK;
+    sdkFactory: (authDetails: AuthDetails, envName: string) => MMISDK;
     txDeepLink: (_custodianDetails: any, _txId: any) => Promise<Partial<ICustodianTransactionLink>>;
     constructor(opts?: ICustodyKeyringOptions);
     getStatusMap(): ITransactionStatusMap;
diff --git a/dist/custodianTypes/bitgo/BitgoCustodyKeyring.d.ts.map b/dist/custodianTypes/bitgo/BitgoCustodyKeyring.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..95da830f88c94055e52c846b1e52e89ed49a6254
--- /dev/null
+++ b/dist/custodianTypes/bitgo/BitgoCustodyKeyring.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"BitgoCustodyKeyring.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/bitgo/BitgoCustodyKeyring.ts"],"names":[],"mappings":"AAAA,OAAO,EAAqB,MAAM,EAAiB,MAAM,6BAA6B,CAAC;AACvF,OAAO,EACL,WAAW,EACX,SAAS,EACT,yBAAyB,EACzB,qBAAqB,EACtB,MAAM,+BAA+B,CAAC;AAEvC,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AACtD,OAAO,EAAE,sBAAsB,EAAE,MAAM,yCAAyC,CAAC;AAGjF,qBAAa,mBAAoB,SAAQ,cAAc;IACrD,gBAAuB,IAAI,qBAAqB;IACzC,IAAI,SAAqB;IAEzB,QAAQ,YAAmB;IAElC,SAAgB,aAAa;;;;;;;;;;;;;;;;;MA2B3B;IAEF,UAAU,gBAAiB,WAAW,WAAW,MAAM,KAAG,MAAM,CAG9D;IAEF,UAAU,sFAOR;gBAEU,IAAI,GAAE,sBAA2B;IAI7C,YAAY,IAAI,qBAAqB;CAGtC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/bitgo/BitgoCustodyKeyring.js b/dist/custodianTypes/bitgo/BitgoCustodyKeyring.js
index 5ae99429f26c405a35bcd5e9eb2136017c396edd..dc24665031796badd399ac78262140aa2b605f51 100644
--- a/dist/custodianTypes/bitgo/BitgoCustodyKeyring.js
+++ b/dist/custodianTypes/bitgo/BitgoCustodyKeyring.js
@@ -38,7 +38,10 @@ class BitgoCustodyKeyring extends CustodyKeyring_1.CustodyKeyring {
                 },
             ],
         };
-        this.sdkFactory = (authDetails, apiUrl) => (0, sdk_1.mmiSDKFactory)(sdk_1.BitgoCustodianApi, authDetails, this.authType, apiUrl);
+        this.sdkFactory = (authDetails, envName) => {
+            const { apiUrl } = this.getCustodianFromEnvName(envName);
+            return (0, sdk_1.mmiSDKFactory)(sdk_1.BitgoCustodianApi, authDetails, this.authType, apiUrl);
+        };
         this.txDeepLink = async (_custodianDetails, _txId) => {
             const transactionLink = {
                 text: "Approve and sign the transaction in BitGo. Once all required approvals have been performed, the transaction will complete. Check your BitGo wallet for the latest status.",
diff --git a/dist/custodianTypes/bitgo/BitgoCustodyKeyring.js.map b/dist/custodianTypes/bitgo/BitgoCustodyKeyring.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..2db04992219f4e354efab64cea555eb6809ded4a
--- /dev/null
+++ b/dist/custodianTypes/bitgo/BitgoCustodyKeyring.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"BitgoCustodyKeyring.js","sourceRoot":"","sources":["../../../src/custodianTypes/bitgo/BitgoCustodyKeyring.ts"],"names":[],"mappings":";;;AAAA,qDAAuF;AACvF,yDAKuC;AAEvC,yDAAsD;AAEtD,qDAAkD;AAElD,MAAa,mBAAoB,SAAQ,+BAAc;IAiDrD,YAAY,OAA+B,EAAE;QAC3C,KAAK,CAAC,IAAI,CAAC,CAAC;QAhDP,SAAI,GAAG,iBAAiB,CAAC;QAEzB,aAAQ,GAAG,iBAAS,CAAC,KAAK,CAAC;QAElB,kBAAa,GAAG;YAC9B,IAAI,EAAE,OAAO;YACb,WAAW,EAAE,OAAO;YACpB,MAAM,EAAE,+BAA+B;YACvC,MAAM,EAAE,4EAA4E;YACpF,IAAI,EAAE,4EAA4E;YAClF,OAAO,EAAE,uBAAuB;YAChC,aAAa,EAAE,uBAAuB;YACtC,OAAO,EAAE,OAAO;YAChB,YAAY,EAAE,mBAAmB;YACjC,UAAU,EAAE,IAAI;YAChB,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,EAAE;YACX,kBAAkB,EAAE;gBAClB;oBACE,OAAO,EAAE,OAAO;oBAChB,SAAS,EAAE,+BAA+B;iBAC3C;gBACD;oBACE,OAAO,EAAE,gCAAgC;oBACzC,SAAS,EAAE,+BAA+B;iBAC3C;gBACD;oBACE,OAAO,EAAE,2BAA2B;oBACpC,SAAS,EAAE,wCAAwC;iBACpD;aACF;SACF,CAAC;QAEF,eAAU,GAAG,CAAC,WAAwB,EAAE,OAAe,EAAU,EAAE;YACjE,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;YACzD,OAAO,IAAA,mBAAa,EAAC,uBAAiB,EAAE,WAAW,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC9E,CAAC,CAAC;QAEF,eAAU,GAAG,KAAK,EAAE,iBAAiB,EAAE,KAAK,EAAE,EAAE;YAC9C,MAAM,eAAe,GAAuC;gBAC1D,IAAI,EAAE,2KAA2K;gBACjL,GAAG,EAAE,IAAI;aACV,CAAC;YAEF,OAAO,eAAe,CAAC;QACzB,CAAC,CAAC;IAIF,CAAC;IAED,YAAY;QACV,OAAO,+BAAc,CAAC;IACxB,CAAC;;AAtDsB,wBAAI,GAAG,iBAAiB,AAApB,CAAqB;AADrC,kDAAmB"}
\ No newline at end of file
diff --git a/dist/custodianTypes/bitgo/BitgoCustodyKeyring.test.d.ts b/dist/custodianTypes/bitgo/BitgoCustodyKeyring.test.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..a87f96137a0583a11aa3005525d73af87c43949d
--- /dev/null
+++ b/dist/custodianTypes/bitgo/BitgoCustodyKeyring.test.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=BitgoCustodyKeyring.test.d.ts.map
\ No newline at end of file
diff --git a/dist/custodianTypes/bitgo/BitgoCustodyKeyring.test.d.ts.map b/dist/custodianTypes/bitgo/BitgoCustodyKeyring.test.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..750f08eac536ce57b3bc1c268164e5eefdd685cc
--- /dev/null
+++ b/dist/custodianTypes/bitgo/BitgoCustodyKeyring.test.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"BitgoCustodyKeyring.test.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/bitgo/BitgoCustodyKeyring.test.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/custodianTypes/bitgo/BitgoCustodyKeyring.test.js b/dist/custodianTypes/bitgo/BitgoCustodyKeyring.test.js
new file mode 100644
index 0000000000000000000000000000000000000000..488ca7b07cae4abf7b6e732c4c9eac53b3c10b1e
--- /dev/null
+++ b/dist/custodianTypes/bitgo/BitgoCustodyKeyring.test.js
@@ -0,0 +1,129 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const sdk_1 = require("@metamask-institutional/sdk");
+const crypto_1 = __importDefault(require("crypto"));
+const utils_1 = require("ts-jest/utils");
+const BitgoCustodyKeyring_1 = require("./BitgoCustodyKeyring");
+const BitgoStatusMap_1 = require("./BitgoStatusMap");
+jest.mock("@metamask-institutional/sdk");
+const mockedMmiSdkFactory = (0, utils_1.mocked)(sdk_1.mmiSDKFactory, true);
+const mockMMISDK = {
+    getAccountHierarchy: jest.fn(),
+    getEthereumAccounts: jest.fn().mockResolvedValue([
+        {
+            name: "myCoolAccount",
+            address: "0x123456",
+            custodianDetails: {},
+            labels: [{ key: "my-label", value: "my-label" }],
+            jwt: "jwt",
+            apiUrl: "apiUrl",
+            envName: "bitgo",
+        },
+    ]),
+    getEthereumAccountsByAddress: jest.fn().mockResolvedValue([]),
+    getEthereumAccountsByLabelOrAddressName: jest.fn().mockResolvedValue([]),
+    createTransaction: jest.fn(),
+    getTransaction: jest.fn(),
+    getAllTransactions: jest.fn(),
+    getCustomerId: jest.fn(),
+    signedTypedData_v4: jest.fn(),
+    getErc20Tokens: jest.fn(),
+    subscribeToEvents: jest.fn(),
+    registerEventCallback: jest.fn(),
+    handlePing: jest.fn(),
+    checkPing: jest.fn(),
+    handleEvent: jest.fn(),
+    getTransactionLink: jest.fn().mockResolvedValue(null),
+    on: jest.fn(),
+    eventCallbacks: [],
+    jwt: "",
+    defaultCacheAgeSeconds: 0,
+    lastPing: 0,
+    pingCheckRunning: false,
+    cache: null,
+    custodianApi: null,
+};
+describe("BitgoCustodyKeyring", () => {
+    let custodyKeyring;
+    beforeEach(() => {
+        custodyKeyring = new BitgoCustodyKeyring_1.BitgoCustodyKeyring({
+            mmiConfigurationController: {
+                store: {
+                    getState: jest.fn().mockReturnValue({
+                        mmiConfiguration: {
+                            custodians: [
+                                {
+                                    apiUrl: "https://api",
+                                    envName: "bitgo",
+                                },
+                            ],
+                        },
+                    }),
+                },
+            },
+        });
+        jest.clearAllMocks();
+        mockedMmiSdkFactory.mockReturnValue(mockMMISDK);
+    });
+    describe("getTransactionDeepLink", () => {
+        it("should return null", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123456",
+                    custodianDetails: { wallet_id: "test" },
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "https://api",
+                    chainId: 4,
+                    custodyType: "Bitgo",
+                    envName: "bitgo",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const result = await custodyKeyring.getTransactionDeepLink("0x123456", "12345");
+            expect(result).toEqual({
+                text: "Approve and sign the transaction in BitGo. Once all required approvals have been performed, the transaction will complete. Check your BitGo wallet for the latest status.",
+                url: null,
+            });
+        });
+    });
+    describe("getStatusMap", () => {
+        it("should return the status map", () => {
+            expect(custodyKeyring.getStatusMap()).toEqual(BitgoStatusMap_1.BitgoStatusMap);
+        });
+    });
+    describe("hashAuthDetails", () => {
+        it("should hash the refreshtoken together with the custodian API URL", () => {
+            const authDetails = {
+                refreshToken: "miaow",
+            };
+            const url = "https://api";
+            const envName = "bitgo";
+            const hashMock = {
+                update: jest.fn().mockReturnThis(),
+                digest: jest.fn().mockReturnValueOnce("fake hash"),
+            };
+            const createHashMock = jest.spyOn(crypto_1.default, "createHash").mockImplementationOnce(() => hashMock);
+            const result = custodyKeyring.hashAuthDetails(authDetails, envName);
+            expect(createHashMock).toBeCalledWith("sha256");
+            expect(hashMock.update).toBeCalledWith(authDetails.refreshToken + url);
+            expect(hashMock.digest).toBeCalledWith("hex");
+            expect(result).toEqual("fake hash");
+        });
+    });
+    describe("createAuthDetails", () => {
+        it("should take a token and turn it into IRefreshTokenAuthDetails", () => {
+            const jwt = "token";
+            const result = custodyKeyring.createAuthDetails(jwt);
+            expect(result).toEqual({
+                jwt,
+            });
+        });
+    });
+});
+//# sourceMappingURL=BitgoCustodyKeyring.test.js.map
\ No newline at end of file
diff --git a/dist/custodianTypes/bitgo/BitgoCustodyKeyring.test.js.map b/dist/custodianTypes/bitgo/BitgoCustodyKeyring.test.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..a584900613b2a90283a64505c001eb11ffcf77ba
--- /dev/null
+++ b/dist/custodianTypes/bitgo/BitgoCustodyKeyring.test.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"BitgoCustodyKeyring.test.js","sourceRoot":"","sources":["../../../src/custodianTypes/bitgo/BitgoCustodyKeyring.test.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/custodianTypes/bitgo/BitgoStatusMap.d.ts.map b/dist/custodianTypes/bitgo/BitgoStatusMap.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..d37093b56806c8d7f111e3cc7046c9057e3df82c
--- /dev/null
+++ b/dist/custodianTypes/bitgo/BitgoStatusMap.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"BitgoStatusMap.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/bitgo/BitgoStatusMap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAA+B,MAAM,+BAA+B,CAAC;AAEnG,eAAO,MAAM,cAAc,EAAE,qBAkD5B,CAAC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/bitgo/BitgoStatusMap.js.map b/dist/custodianTypes/bitgo/BitgoStatusMap.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..333318e021b31a578e0ac6092ed77af6de5b9680
--- /dev/null
+++ b/dist/custodianTypes/bitgo/BitgoStatusMap.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"BitgoStatusMap.js","sourceRoot":"","sources":["../../../src/custodianTypes/bitgo/BitgoStatusMap.ts"],"names":[],"mappings":";;;AAAA,yDAAmG;AAEtF,QAAA,cAAc,GAA0B;IACnD,OAAO,EAAE;QACP,QAAQ,EAAE,mCAA2B,CAAC,QAAQ;QAC9C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,KAAK;KAChB;IACD,MAAM,EAAE;QACN,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,QAAQ;QACnB,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,KAAK;KAChB;IACD,SAAS,EAAE;QACT,QAAQ,EAAE,mCAA2B,CAAC,SAAS;QAC/C,SAAS,EAAE,WAAW;QACtB,QAAQ,EAAE,mBAAmB;QAC7B,QAAQ,EAAE,KAAK;KAChB;IACD,SAAS,EAAE;QACT,QAAQ,EAAE,mCAA2B,CAAC,SAAS;QAC/C,SAAS,EAAE,OAAO;QAClB,QAAQ,EAAE,OAAO;QACjB,QAAQ,EAAE,KAAK;KAChB;IACD,KAAK,EAAE;QAEL,QAAQ,EAAE,mCAA2B,CAAC,SAAS;QAC/C,SAAS,EAAE,OAAO;QAClB,QAAQ,EAAE,OAAO;QACjB,QAAQ,EAAE,KAAK;KAChB;IACD,OAAO,EAAE;QACP,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,IAAI;KACf;IACD,QAAQ,EAAE;QACR,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,IAAI;KACf;IACD,MAAM,EAAE;QACN,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,QAAQ;QACnB,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,IAAI;KACf;CACF,CAAC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/cactus/CactusCustodyKeyring.d.ts b/dist/custodianTypes/cactus/CactusCustodyKeyring.d.ts
index e7b7932c0332344ec2201b8ca2141aa34ad33b09..e92a4c818d9b8e02e92acdbc929a5133172b9ad8 100644
--- a/dist/custodianTypes/cactus/CactusCustodyKeyring.d.ts
+++ b/dist/custodianTypes/cactus/CactusCustodyKeyring.d.ts
@@ -25,7 +25,7 @@ export declare class CactusCustodyKeyring extends CustodyKeyring {
     };
     authType: AuthTypes;
     static addressType: AddressType.POLYCHAIN;
-    sdkFactory: (authDetails: IRefreshTokenAuthDetails, apiUrl: string) => MMISDK;
+    sdkFactory: (authDetails: IRefreshTokenAuthDetails, envName: string) => MMISDK;
     txDeepLink: (_custodianDetails: any, _txId: any) => Promise<Partial<ICustodianTransactionLink>>;
     constructor(opts?: ICustodyKeyringOptions);
     getStatusMap(): ITransactionStatusMap;
diff --git a/dist/custodianTypes/cactus/CactusCustodyKeyring.d.ts.map b/dist/custodianTypes/cactus/CactusCustodyKeyring.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..903f1750e5fe29ffc817ee29702033836dcc69e1
--- /dev/null
+++ b/dist/custodianTypes/cactus/CactusCustodyKeyring.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"CactusCustodyKeyring.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/cactus/CactusCustodyKeyring.ts"],"names":[],"mappings":"AAAA,OAAO,EAAsB,MAAM,EAAiB,MAAM,6BAA6B,CAAC;AACxF,OAAO,EACL,WAAW,EACX,SAAS,EACT,yBAAyB,EACzB,wBAAwB,EACxB,qBAAqB,EACtB,MAAM,+BAA+B,CAAC;AAEvC,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AACtD,OAAO,EAAE,sBAAsB,EAAE,MAAM,yCAAyC,CAAC;AAGjF,qBAAa,oBAAqB,SAAQ,cAAc;IACtD,gBAAuB,IAAI,sBAAsB;IAC1C,IAAI,SAAsB;IAEjC,SAAgB,aAAa;;;;;;;;;;;;;;;;;MAuB3B;IAEK,QAAQ,YAA2B;IAE1C,OAAc,WAAW,EAAE,WAAW,CAAC,SAAS,CAAC;IAEjD,UAAU,gBAAiB,wBAAwB,WAAW,MAAM,KAAG,MAAM,CAG3E;IAEF,UAAU,0CAAqC,QAAQ,QAAQ,yBAAyB,CAAC,CAAC,CAOxF;gBAEU,IAAI,GAAE,sBAA2B;IAI7C,YAAY,IAAI,qBAAqB;CAGtC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/cactus/CactusCustodyKeyring.js b/dist/custodianTypes/cactus/CactusCustodyKeyring.js
index e2b80d29d73db5776c579392b2c6a4ca9aeeb3de..ec37b5428fc1fcaef39490f29b2a7fdb092df884 100644
--- a/dist/custodianTypes/cactus/CactusCustodyKeyring.js
+++ b/dist/custodianTypes/cactus/CactusCustodyKeyring.js
@@ -34,7 +34,10 @@ class CactusCustodyKeyring extends CustodyKeyring_1.CustodyKeyring {
             ],
         };
         this.authType = types_1.AuthTypes.REFRESH_TOKEN;
-        this.sdkFactory = (authDetails, apiUrl) => (0, sdk_1.mmiSDKFactory)(sdk_1.CactusCustodianApi, authDetails, this.authType, apiUrl);
+        this.sdkFactory = (authDetails, envName) => {
+            const { apiUrl } = this.getCustodianFromEnvName(envName);
+            return (0, sdk_1.mmiSDKFactory)(sdk_1.CactusCustodianApi, authDetails, this.authType, apiUrl);
+        };
         this.txDeepLink = async (_custodianDetails, _txId) => {
             const transactionLink = {
                 text: null,
diff --git a/dist/custodianTypes/cactus/CactusCustodyKeyring.js.map b/dist/custodianTypes/cactus/CactusCustodyKeyring.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..8d2df69d614dd1d0b8a36070932e6411484cd11b
--- /dev/null
+++ b/dist/custodianTypes/cactus/CactusCustodyKeyring.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"CactusCustodyKeyring.js","sourceRoot":"","sources":["../../../src/custodianTypes/cactus/CactusCustodyKeyring.ts"],"names":[],"mappings":";;;AAAA,qDAAwF;AACxF,yDAMuC;AAEvC,yDAAsD;AAEtD,uDAAoD;AAEpD,MAAa,oBAAqB,SAAQ,+BAAc;IA+CtD,YAAY,OAA+B,EAAE;QAC3C,KAAK,CAAC,IAAI,CAAC,CAAC;QA9CP,SAAI,GAAG,kBAAkB,CAAC;QAEjB,kBAAa,GAAG;YAC9B,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,gBAAgB;YAC7B,MAAM,EAAE,6CAA6C;YACrD,MAAM,EAAE,6EAA6E;YACrF,IAAI,EAAE,6EAA6E;YACnF,OAAO,EAAE,0BAA0B;YACnC,aAAa,EAAE,0BAA0B;YACzC,OAAO,EAAE,QAAQ;YACjB,YAAY,EAAE,oBAAoB;YAClC,UAAU,EAAE,IAAI;YAChB,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,EAAE;YACX,kBAAkB,EAAE;gBAClB;oBACE,OAAO,EAAE,OAAO;oBAChB,SAAS,EAAE,+BAA+B;iBAC3C;gBACD;oBACE,OAAO,EAAE,8BAA8B;oBACvC,SAAS,EAAE,wCAAwC;iBACpD;aACF;SACF,CAAC;QAEK,aAAQ,GAAG,iBAAS,CAAC,aAAa,CAAC;QAI1C,eAAU,GAAG,CAAC,WAAqC,EAAE,OAAe,EAAU,EAAE;YAC9E,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;YACzD,OAAO,IAAA,mBAAa,EAAC,wBAAkB,EAAE,WAAW,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC/E,CAAC,CAAC;QAEF,eAAU,GAAG,KAAK,EAAE,iBAAiB,EAAE,KAAK,EAA+C,EAAE;YAC3F,MAAM,eAAe,GAAuC;gBAC1D,IAAI,EAAE,IAAI;gBACV,GAAG,EAAE,uCAAuC;aAC7C,CAAC;YAEF,OAAO,eAAe,CAAC;QACzB,CAAC,CAAC;IAIF,CAAC;IAED,YAAY;QACV,OAAO,iCAAe,CAAC;IACzB,CAAC;;AApDsB,yBAAI,GAAG,kBAAkB,AAArB,CAAsB;AADtC,oDAAoB"}
\ No newline at end of file
diff --git a/dist/custodianTypes/cactus/CactusCustodyKeyring.test.d.ts b/dist/custodianTypes/cactus/CactusCustodyKeyring.test.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..3e132a39fd887eb917cbd41b1374684165321595
--- /dev/null
+++ b/dist/custodianTypes/cactus/CactusCustodyKeyring.test.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=CactusCustodyKeyring.test.d.ts.map
\ No newline at end of file
diff --git a/dist/custodianTypes/cactus/CactusCustodyKeyring.test.d.ts.map b/dist/custodianTypes/cactus/CactusCustodyKeyring.test.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..ac65933f8fce0de769f3871f8b300566f9f70df2
--- /dev/null
+++ b/dist/custodianTypes/cactus/CactusCustodyKeyring.test.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"CactusCustodyKeyring.test.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/cactus/CactusCustodyKeyring.test.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/custodianTypes/cactus/CactusCustodyKeyring.test.js b/dist/custodianTypes/cactus/CactusCustodyKeyring.test.js
new file mode 100644
index 0000000000000000000000000000000000000000..dd654ff4d43a79e7be6c171974a8d1c5e12a703b
--- /dev/null
+++ b/dist/custodianTypes/cactus/CactusCustodyKeyring.test.js
@@ -0,0 +1,128 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const sdk_1 = require("@metamask-institutional/sdk");
+const crypto_1 = __importDefault(require("crypto"));
+const utils_1 = require("ts-jest/utils");
+const CactusCustodyKeyring_1 = require("./CactusCustodyKeyring");
+const CactusStatusMap_1 = require("./CactusStatusMap");
+jest.mock("@metamask-institutional/sdk");
+const mockedMmiSdkFactory = (0, utils_1.mocked)(sdk_1.mmiSDKFactory, true);
+const mockMMISDK = {
+    getAccountHierarchy: jest.fn(),
+    getEthereumAccounts: jest.fn().mockResolvedValue([
+        {
+            name: "myCoolAccount",
+            address: "0x123456",
+            custodianDetails: {},
+            labels: [{ key: "my-label", value: "my-label" }],
+            jwt: "jwt",
+            apiUrl: "apiUrl",
+        },
+    ]),
+    getEthereumAccountsByAddress: jest.fn().mockResolvedValue([]),
+    getEthereumAccountsByLabelOrAddressName: jest.fn().mockResolvedValue([]),
+    createTransaction: jest.fn(),
+    getTransaction: jest.fn(),
+    getAllTransactions: jest.fn(),
+    getCustomerId: jest.fn(),
+    signedTypedData_v4: jest.fn(),
+    getErc20Tokens: jest.fn(),
+    subscribeToEvents: jest.fn(),
+    registerEventCallback: jest.fn(),
+    handlePing: jest.fn(),
+    checkPing: jest.fn(),
+    handleEvent: jest.fn(),
+    getTransactionLink: jest.fn().mockResolvedValue(null),
+    on: jest.fn(),
+    eventCallbacks: [],
+    jwt: "",
+    defaultCacheAgeSeconds: 0,
+    lastPing: 0,
+    pingCheckRunning: false,
+    cache: null,
+    custodianApi: null,
+};
+describe("CactusCustodyKeyring", () => {
+    let custodyKeyring;
+    beforeEach(() => {
+        custodyKeyring = new CactusCustodyKeyring_1.CactusCustodyKeyring({
+            mmiConfigurationController: {
+                store: {
+                    getState: jest.fn().mockReturnValue({
+                        mmiConfiguration: {
+                            custodians: [
+                                {
+                                    apiUrl: "https://api",
+                                    envName: "cactus",
+                                },
+                            ],
+                        },
+                    }),
+                },
+            },
+        });
+        jest.clearAllMocks();
+        mockedMmiSdkFactory.mockReturnValue(mockMMISDK);
+    });
+    describe("getTransactionDeepLink", () => {
+        it("should return a link to the cactus website", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123456",
+                    custodianDetails: { wallet_id: "test" },
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "https://api",
+                    chainId: 4,
+                    custodyType: "Cactus",
+                    envName: "cactus",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const result = await custodyKeyring.getTransactionDeepLink("0x123456", "12345");
+            expect(result).toEqual({
+                text: null,
+                url: "https://www.mycactus.com/cactus/login",
+            });
+        });
+    });
+    describe("getStatusMap", () => {
+        it("should return the status map", () => {
+            expect(custodyKeyring.getStatusMap()).toEqual(CactusStatusMap_1.CactusStatusMap);
+        });
+    });
+    describe("hashAuthDetails", () => {
+        it("should hash the refreshtoken together with the custodian API URL", () => {
+            const authDetails = {
+                refreshToken: "miaow",
+            };
+            const url = "https://api";
+            const envName = "cactus";
+            const hashMock = {
+                update: jest.fn().mockReturnThis(),
+                digest: jest.fn().mockReturnValueOnce("fake hash"),
+            };
+            const createHashMock = jest.spyOn(crypto_1.default, "createHash").mockImplementationOnce(() => hashMock);
+            const result = custodyKeyring.hashAuthDetails(authDetails, envName);
+            expect(createHashMock).toBeCalledWith("sha256");
+            expect(hashMock.update).toBeCalledWith(authDetails.refreshToken + url);
+            expect(hashMock.digest).toBeCalledWith("hex");
+            expect(result).toEqual("fake hash");
+        });
+    });
+    describe("createAuthDetails", () => {
+        it("should take a token and turn it into IRefreshTokenAuthDetails", () => {
+            const refreshToken = "token";
+            const result = custodyKeyring.createAuthDetails(refreshToken);
+            expect(result).toEqual({
+                refreshToken,
+            });
+        });
+    });
+});
+//# sourceMappingURL=CactusCustodyKeyring.test.js.map
\ No newline at end of file
diff --git a/dist/custodianTypes/cactus/CactusCustodyKeyring.test.js.map b/dist/custodianTypes/cactus/CactusCustodyKeyring.test.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..6e386edba07a15202fda83521242a082f3a825f8
--- /dev/null
+++ b/dist/custodianTypes/cactus/CactusCustodyKeyring.test.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"CactusCustodyKeyring.test.js","sourceRoot":"","sources":["../../../src/custodianTypes/cactus/CactusCustodyKeyring.test.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/custodianTypes/cactus/CactusStatusMap.d.ts.map b/dist/custodianTypes/cactus/CactusStatusMap.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..a0ac41ec6945bb982c040e16523221d4c6634956
--- /dev/null
+++ b/dist/custodianTypes/cactus/CactusStatusMap.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"CactusStatusMap.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/cactus/CactusStatusMap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAA+B,MAAM,+BAA+B,CAAC;AAEnG,eAAO,MAAM,eAAe,EAAE,qBAuD7B,CAAC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/cactus/CactusStatusMap.js.map b/dist/custodianTypes/cactus/CactusStatusMap.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..bfc6b35cbacf122d17f2ad14ac4850446f235d80
--- /dev/null
+++ b/dist/custodianTypes/cactus/CactusStatusMap.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"CactusStatusMap.js","sourceRoot":"","sources":["../../../src/custodianTypes/cactus/CactusStatusMap.ts"],"names":[],"mappings":";;;AAAA,yDAAmG;AAEtF,QAAA,eAAe,GAA0B;IACpD,OAAO,EAAE;QACP,QAAQ,EAAE,mCAA2B,CAAC,QAAQ;QAC9C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,KAAK;KAChB;IACD,QAAQ,EAAE;QACR,QAAQ,EAAE,mCAA2B,CAAC,QAAQ;QAC9C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,KAAK;KAChB;IACD,SAAS,EAAE;QACT,QAAQ,EAAE,mCAA2B,CAAC,SAAS;QAC/C,SAAS,EAAE,WAAW;QACtB,QAAQ,EAAE,mBAAmB;QAC7B,QAAQ,EAAE,KAAK;KAChB;IACD,KAAK,EAAE;QACL,QAAQ,EAAE,mCAA2B,CAAC,SAAS;QAC/C,SAAS,EAAE,OAAO;QAClB,QAAQ,EAAE,OAAO;QACjB,QAAQ,EAAE,IAAI;KACf;IACD,SAAS,EAAE;QACT,QAAQ,EAAE,mCAA2B,CAAC,SAAS;QAC/C,SAAS,EAAE,WAAW;QACtB,QAAQ,EAAE,WAAW;QACrB,QAAQ,EAAE,IAAI;KACf;IACD,OAAO,EAAE;QACP,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,IAAI;KACf;IACD,QAAQ,EAAE;QACR,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,UAAU;QACrB,QAAQ,EAAE,UAAU;QACpB,QAAQ,EAAE,IAAI;KACf;IACD,MAAM,EAAE;QACN,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,QAAQ;QACnB,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,IAAI;KACf;IACD,SAAS,EAAE;QACT,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,WAAW;QACtB,QAAQ,EAAE,WAAW;QACrB,QAAQ,EAAE,IAAI;KACf;CACF,CAAC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/curv/CurvCustodyKeyring.d.ts b/dist/custodianTypes/curv/CurvCustodyKeyring.d.ts
index 41d33af64f710655d00cac2e6ddf74d4cb8143a6..41e585719c3c37f8c55f97f6573796b8443da8e9 100644
--- a/dist/custodianTypes/curv/CurvCustodyKeyring.d.ts
+++ b/dist/custodianTypes/curv/CurvCustodyKeyring.d.ts
@@ -16,6 +16,7 @@ interface ICustodianAccountProto {
     meta?: {
         version: number;
     };
+    envName: string;
 }
 export interface ICustodianAccount<T extends AuthDetails = AuthDetails> extends ICustodianAccountProto {
     authDetails: T;
@@ -48,7 +49,7 @@ export declare class CurvCustodyKeyring extends CustodyKeyring {
     apiUrlKey: string;
     selectedAddresses: ICustodianAccount<ITokenAuthDetails>[];
     accountsDetails: ICustodianAccount<ITokenAuthDetails>[];
-    sdkFactory: (authDetails: AuthDetails, apiUrl: string) => import("@metamask-institutional/sdk").MMISDK;
+    sdkFactory: (authDetails: AuthDetails, envName: string) => import("@metamask-institutional/sdk").MMISDK;
     handleLegacyAccountDetails(detailsArray: ICustodianAccount<ITokenAuthDetails>[] | ILegacyCustodianAccount[]): ICustodianAccount[];
     deserialize(opts?: {
         accounts?: string[];
diff --git a/dist/custodianTypes/curv/CurvCustodyKeyring.d.ts.map b/dist/custodianTypes/curv/CurvCustodyKeyring.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..77d904c566e6b2650ca15dfbb055307fb3a73e80
--- /dev/null
+++ b/dist/custodianTypes/curv/CurvCustodyKeyring.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"CurvCustodyKeyring.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/curv/CurvCustodyKeyring.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,iBAAiB,EAAE,qBAAqB,EAAE,MAAM,+BAA+B,CAAC;AAEjH,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AACtD,OAAO,EAAE,sBAAsB,EAAE,MAAM,yCAAyC,CAAC;AAEjF,UAAU,KAAK;IACb,GAAG,EAAE,MAAM,CAAC;IACZ,KAAK,EAAE,MAAM,CAAC;CACf;AAED,UAAU,sBAAsB;IAC9B,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,OAAO,EAAE,MAAM,CAAC;IAChB,gBAAgB,EAAE,GAAG,CAAC;IACtB,MAAM,EAAE,KAAK,EAAE,CAAC;IAChB,MAAM,EAAE,MAAM,CAAC;IACf,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,WAAW,EAAE,MAAM,CAAC;IACpB,IAAI,CAAC,EAAE;QAAE,OAAO,EAAE,MAAM,CAAA;KAAE,CAAC;IAC3B,OAAO,EAAE,MAAM,CAAC;CACjB;AAID,MAAM,WAAW,iBAAiB,CAAC,CAAC,SAAS,WAAW,GAAG,WAAW,CAAE,SAAQ,sBAAsB;IACpG,WAAW,EAAE,CAAC,CAAC;CAChB;AAID,MAAM,WAAW,0BAA2B,SAAQ,sBAAsB;IACxE,KAAK,EAAE,MAAM,CAAC;CACf;AAID,MAAM,WAAW,uBAAwB,SAAQ,sBAAsB;IACrE,GAAG,EAAE,MAAM,CAAC;CACb;AAED,qBAAa,kBAAmB,SAAQ,cAAc;IACpD,gBAAuB,IAAI,oBAAoB;IAC/C,SAAgB,aAAa;;;;;;;;;;;;;;MAc3B;IACK,QAAQ,YAAmB;IAE3B,IAAI,SAAoB;IAC/B,SAAS,SAAgB;IAElB,iBAAiB,EAAE,iBAAiB,CAAC,iBAAiB,CAAC,EAAE,CAAC;IAC1D,eAAe,EAAE,iBAAiB,CAAC,iBAAiB,CAAC,EAAE,CAAC;IAE/D,UAAU,gBAAiB,WAAW,WAAW,MAAM,kDAGrD;IAGF,0BAA0B,CACxB,YAAY,EAAE,iBAAiB,CAAC,iBAAiB,CAAC,EAAE,GAAG,uBAAuB,EAAE,GAC/E,iBAAiB,EAAE;IA0BtB,WAAW,CACT,IAAI,GAAE;QACJ,QAAQ,CAAC,EAAE,MAAM,EAAE,CAAC;QACpB,iBAAiB,CAAC,EAAE,iBAAiB,EAAE,GAAG,uBAAuB,EAAE,CAAC;QACpE,eAAe,CAAC,EAAE,iBAAiB,EAAE,GAAG,uBAAuB,EAAE,CAAC;QAClE,IAAI,CAAC,EAAE;YAAE,OAAO,CAAC,EAAE,MAAM,CAAA;SAAE,CAAC;KACxB,GACL,OAAO,CAAC,IAAI,CAAC;IAahB,UAAU,8CAER;gBAEU,IAAI,GAAE,sBAA2B;IAI7C,YAAY,IAAI,qBAAqB;CAGtC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/curv/CurvCustodyKeyring.js b/dist/custodianTypes/curv/CurvCustodyKeyring.js
index 835df1ce8f7aeeb87b1d311a0f8efa5c9177e78e..9d3bae4fa1346c05dbc07b02f7b760183a90e674 100644
--- a/dist/custodianTypes/curv/CurvCustodyKeyring.js
+++ b/dist/custodianTypes/curv/CurvCustodyKeyring.js
@@ -25,6 +25,7 @@ class CurvCustodyKeyring extends CustodyKeyring_1.CustodyKeyring {
                 chainId: details.chainId,
                 custodyType: details.custodyType,
                 authDetails,
+                envName: details.envName || this.custodianType.envName,
             };
         });
     }
@@ -60,7 +61,10 @@ class CurvCustodyKeyring extends CustodyKeyring_1.CustodyKeyring {
         this.authType = types_1.AuthTypes.TOKEN;
         this.type = "Custody - Curv";
         this.apiUrlKey = "curvApiUrl";
-        this.sdkFactory = (authDetails, apiUrl) => (0, sdk_1.mmiSDKFactory)(sdk_1.CurvCustodianApi, authDetails, this.authType, apiUrl);
+        this.sdkFactory = (authDetails, envName) => {
+            const { apiUrl } = this.getCustodianFromEnvName(envName);
+            return (0, sdk_1.mmiSDKFactory)(sdk_1.CurvCustodianApi, authDetails, this.authType, apiUrl);
+        };
         this.txDeepLink = (_custodianDetails, _txId) => {
             return null;
         };
diff --git a/dist/custodianTypes/curv/CurvCustodyKeyring.js.map b/dist/custodianTypes/curv/CurvCustodyKeyring.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..126c61579d706a84b605de0b57de3c23920e19c0
--- /dev/null
+++ b/dist/custodianTypes/curv/CurvCustodyKeyring.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"CurvCustodyKeyring.js","sourceRoot":"","sources":["../../../src/custodianTypes/curv/CurvCustodyKeyring.ts"],"names":[],"mappings":";;;AAAA,qDAA8E;AAC9E,yDAAiH;AAEjH,yDAAsD;AAsCtD,MAAa,kBAAmB,SAAQ,+BAAc;IA+BpD,0BAA0B,CACxB,YAAgF;QAEhF,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC,OAAuE,EAAE,EAAE;YAClG,IAAI,WAA8B,CAAC;YAEnC,IAAK,OAAmC,CAAC,GAAG,EAAE;gBAC5C,WAAW,GAAG;oBACZ,GAAG,EAAG,OAAmC,CAAC,GAAG;iBAC9C,CAAC;aACH;iBAAM;gBACL,WAAW,GAAI,OAAgD,CAAC,WAAW,CAAC;aAC7E;YAED,OAAO;gBACL,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;gBAC1C,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,WAAW;gBACX,OAAO,EAAE,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO;aACvD,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,WAAW,CACT,OAKI,EAAE;QAEN,OAAO,KAAK,CAAC,WAAW,CAAC;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,EAAE;YAC7B,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;gBACvC,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,iBAA8C,CAAC;gBACtF,CAAC,CAAC,EAAE;YACN,eAAe,EAAE,IAAI,CAAC,eAAe;gBACnC,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,eAA4C,CAAC;gBACpF,CAAC,CAAC,EAAE;YACN,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,EAAE;SACtB,CAAC,CAAC;IACL,CAAC;IAMD,YAAY,OAA+B,EAAE;QAC3C,KAAK,CAAC,IAAI,CAAC,CAAC;QAlFE,kBAAa,GAAG;YAC9B,IAAI,EAAE,MAAM;YACZ,WAAW,EAAE,MAAM;YACnB,MAAM,EAAE,qBAAqB;YAC7B,MAAM,EAAE,uCAAuC;YAC/C,IAAI,EAAE,sBAAsB;YAC5B,OAAO,EAAE,EAAE;YACX,aAAa,EAAE,EAAE;YACjB,OAAO,EAAE,EAAE;YACX,YAAY,EAAE,kBAAkB;YAChC,UAAU,EAAE,KAAK;YACjB,MAAM,EAAE,IAAI;YACZ,OAAO,EAAE,EAAE;YACX,kBAAkB,EAAE,EAAE;SACvB,CAAC;QACK,aAAQ,GAAG,iBAAS,CAAC,KAAK,CAAC;QAE3B,SAAI,GAAG,gBAAgB,CAAC;QAC/B,cAAS,GAAG,YAAY,CAAC;QAKzB,eAAU,GAAG,CAAC,WAAwB,EAAE,OAAe,EAAE,EAAE;YACzD,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;YACzD,OAAO,IAAA,mBAAa,EAAC,sBAAgB,EAAE,WAAW,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC7E,CAAC,CAAC;QAmDF,eAAU,GAAG,CAAC,iBAAiB,EAAE,KAAK,EAAE,EAAE;YACxC,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;IAIF,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC;IACd,CAAC;;AAxFsB,uBAAI,GAAG,gBAAgB,AAAnB,CAAoB;AADpC,gDAAkB"}
\ No newline at end of file
diff --git a/dist/custodianTypes/eca3/ECA3CustodyKeyring.d.ts b/dist/custodianTypes/eca3/ECA3CustodyKeyring.d.ts
index 81d906e66d915010c4da7ffe6d0140b5e7b352fc..61c3987165bfb18426c0f4a04ddaa3ec0c179722 100644
--- a/dist/custodianTypes/eca3/ECA3CustodyKeyring.d.ts
+++ b/dist/custodianTypes/eca3/ECA3CustodyKeyring.d.ts
@@ -22,7 +22,7 @@ export declare class ECA3CustodyKeyring extends CustodyKeyring {
         origins: any[];
         environmentMapping: any[];
     };
-    sdkFactory: (authDetails: IRefreshTokenAuthDetails, apiUrl: string) => MMISDK;
+    sdkFactory: (authDetails: IRefreshTokenAuthDetails, envName: string) => MMISDK;
     txDeepLink: (address: string, txId: string) => Promise<Partial<ICustodianTransactionLink>>;
     constructor(opts?: ICustodyKeyringOptions);
     getStatusMap(): ITransactionStatusMap;
diff --git a/dist/custodianTypes/eca3/ECA3CustodyKeyring.d.ts.map b/dist/custodianTypes/eca3/ECA3CustodyKeyring.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..b93ecb00335b305a96a40fc31e6872d6bdf2d219
--- /dev/null
+++ b/dist/custodianTypes/eca3/ECA3CustodyKeyring.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"ECA3CustodyKeyring.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/eca3/ECA3CustodyKeyring.ts"],"names":[],"mappings":"AAAA,OAAO,EAAoB,MAAM,EAAiB,MAAM,6BAA6B,CAAC;AACtF,OAAO,EACL,WAAW,EACX,SAAS,EACT,yBAAyB,EACzB,wBAAwB,EACxB,qBAAqB,EACtB,MAAM,+BAA+B,CAAC;AAEvC,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AACtD,OAAO,EAAE,sBAAsB,EAAE,MAAM,yCAAyC,CAAC;AAGjF,qBAAa,kBAAmB,SAAQ,cAAc;IACpD,gBAAuB,IAAI,oBAAoB;IACxC,IAAI,SAAoB;IAExB,QAAQ,YAA2B;IAE1C,OAAc,WAAW,EAAE,WAAW,CAAC,SAAS,CAAC;IAEjD,SAAgB,aAAa;;;;;;;;;;;;;;MAc3B;IAEF,UAAU,gBAAiB,wBAAwB,WAAW,MAAM,KAAG,MAAM,CAM3E;IAEF,UAAU,YAAmB,MAAM,QAAQ,MAAM,KAAG,QAAQ,QAAQ,yBAAyB,CAAC,CAAC,CAa7F;gBAEU,IAAI,GAAE,sBAA2B;IAI7C,YAAY,IAAI,qBAAqB;CAGtC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/eca3/ECA3CustodyKeyring.js b/dist/custodianTypes/eca3/ECA3CustodyKeyring.js
index c53c5d2d6e7f25fbc5171d5cc07ebbd3bf8433cb..2897ed6aba4c63a0d2e718f83254e72b86061775 100644
--- a/dist/custodianTypes/eca3/ECA3CustodyKeyring.js
+++ b/dist/custodianTypes/eca3/ECA3CustodyKeyring.js
@@ -25,19 +25,14 @@ class ECA3CustodyKeyring extends CustodyKeyring_1.CustodyKeyring {
             origins: [],
             environmentMapping: [],
         };
-        this.sdkFactory = (authDetails, apiUrl) => {
-            const store = this.mmiConfigurationController.store.getState();
-            const { custodians } = store.mmiConfiguration;
-            const custodian = custodians.find(c => c.apiUrl === apiUrl);
-            if (!custodian) {
-                throw new Error(`Could not find custodian with URL: ${apiUrl} - please contact support`);
-            }
-            authDetails.refreshTokenUrl = custodian.refreshTokenUrl;
+        this.sdkFactory = (authDetails, envName) => {
+            const { refreshTokenUrl, apiUrl } = this.getCustodianFromEnvName(envName);
+            authDetails.refreshTokenUrl = refreshTokenUrl;
             return (0, sdk_1.mmiSDKFactory)(sdk_1.ECA3CustodianApi, authDetails, this.authType, apiUrl);
         };
         this.txDeepLink = async (address, txId) => {
-            const { authDetails, apiUrl } = this.getAccountDetails(address);
-            const sdk = this.getSDK(authDetails, apiUrl);
+            const { authDetails, envName } = this.getAccountDetails(address);
+            const sdk = this.getSDK(authDetails, envName);
             try {
                 const transactionLink = await sdk.getTransactionLink(txId);
                 return transactionLink;
diff --git a/dist/custodianTypes/eca3/ECA3CustodyKeyring.js.map b/dist/custodianTypes/eca3/ECA3CustodyKeyring.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..40bec3e02d8f4978dbdef406619ca3b5793ee445
--- /dev/null
+++ b/dist/custodianTypes/eca3/ECA3CustodyKeyring.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"ECA3CustodyKeyring.js","sourceRoot":"","sources":["../../../src/custodianTypes/eca3/ECA3CustodyKeyring.ts"],"names":[],"mappings":";;;AAAA,qDAAsF;AACtF,yDAMuC;AAEvC,yDAAsD;AAEtD,mDAAgD;AAEhD,MAAa,kBAAmB,SAAQ,+BAAc;IA+CpD,YAAY,OAA+B,EAAE;QAC3C,KAAK,CAAC,IAAI,CAAC,CAAC;QA9CP,SAAI,GAAG,gBAAgB,CAAC;QAExB,aAAQ,GAAG,iBAAS,CAAC,aAAa,CAAC;QAI1B,kBAAa,GAAG;YAC9B,IAAI,EAAE,MAAM;YACZ,WAAW,EAAE,MAAM;YACnB,MAAM,EAAE,4CAA4C;YACpD,MAAM,EAAE,wGAAwG;YAChH,IAAI,EAAE,wGAAwG;YAC9G,OAAO,EAAE,uDAAuD;YAChE,aAAa,EAAE,uDAAuD;YACtE,OAAO,EAAE,iBAAiB;YAC1B,YAAY,EAAE,kBAAkB;YAChC,UAAU,EAAE,KAAK;YACjB,MAAM,EAAE,IAAI;YACZ,OAAO,EAAE,EAAE;YACX,kBAAkB,EAAE,EAAE;SACvB,CAAC;QAEF,eAAU,GAAG,CAAC,WAAqC,EAAE,OAAe,EAAU,EAAE;YAC9E,MAAM,EAAE,eAAe,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;YAE1E,WAAW,CAAC,eAAe,GAAG,eAAe,CAAC;YAE9C,OAAO,IAAA,mBAAa,EAAC,sBAAgB,EAAE,WAAW,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC7E,CAAC,CAAC;QAEF,eAAU,GAAG,KAAK,EAAE,OAAe,EAAE,IAAY,EAA+C,EAAE;YAChG,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAEjE,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAE9C,IAAI;gBACF,MAAM,eAAe,GAAG,MAAM,GAAG,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;gBAE3D,OAAO,eAAe,CAAC;aACxB;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,CAAC,GAAG,CAAC,qCAAqC,IAAI,EAAE,CAAC,CAAC;gBACzD,OAAO,IAAI,CAAC;aACb;QACH,CAAC,CAAC;IAIF,CAAC;IAED,YAAY;QACV,OAAO,6BAAa,CAAC;IACvB,CAAC;;AApDsB,uBAAI,GAAG,gBAAgB,AAAnB,CAAoB;AADpC,gDAAkB"}
\ No newline at end of file
diff --git a/dist/custodianTypes/eca3/ECA3StatusMap.d.ts.map b/dist/custodianTypes/eca3/ECA3StatusMap.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..b05e833a4af8bada18203fd730d21653b3c5c9bf
--- /dev/null
+++ b/dist/custodianTypes/eca3/ECA3StatusMap.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"ECA3StatusMap.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/eca3/ECA3StatusMap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAA+B,MAAM,+BAA+B,CAAC;AAEnG,eAAO,MAAM,aAAa,EAAE,qBAkD3B,CAAC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/eca3/ECA3StatusMap.js.map b/dist/custodianTypes/eca3/ECA3StatusMap.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..a38b4401ec38c36835f3970151f838d5f6ed6ae7
--- /dev/null
+++ b/dist/custodianTypes/eca3/ECA3StatusMap.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"ECA3StatusMap.js","sourceRoot":"","sources":["../../../src/custodianTypes/eca3/ECA3StatusMap.ts"],"names":[],"mappings":";;;AAAA,yDAAmG;AAEtF,QAAA,aAAa,GAA0B;IAClD,OAAO,EAAE;QACP,QAAQ,EAAE,mCAA2B,CAAC,QAAQ;QAC9C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,KAAK;KAChB;IACD,MAAM,EAAE;QACN,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,QAAQ;QACnB,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,KAAK;KAChB;IACD,SAAS,EAAE;QACT,QAAQ,EAAE,mCAA2B,CAAC,SAAS;QAC/C,SAAS,EAAE,WAAW;QACtB,QAAQ,EAAE,mBAAmB;QAC7B,QAAQ,EAAE,KAAK;KAChB;IACD,KAAK,EAAE;QACL,QAAQ,EAAE,mCAA2B,CAAC,SAAS;QAC/C,SAAS,EAAE,OAAO;QAClB,QAAQ,EAAE,OAAO;QACjB,QAAQ,EAAE,IAAI;KACf;IACD,OAAO,EAAE;QACP,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,IAAI;KACf;IACD,QAAQ,EAAE;QACR,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,IAAI;KACf;IACD,MAAM,EAAE;QACN,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,QAAQ;QACnB,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,IAAI;KACf;IACD,SAAS,EAAE;QAET,QAAQ,EAAE,mCAA2B,CAAC,SAAS;QAC/C,SAAS,EAAE,OAAO;QAClB,QAAQ,EAAE,OAAO;QACjB,QAAQ,EAAE,IAAI;KACf;CACF,CAAC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/index.d.ts.map b/dist/custodianTypes/index.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..7efffec0e78203d5785e2a7aec74f4d3aa6e3d6b
--- /dev/null
+++ b/dist/custodianTypes/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/custodianTypes/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AAU/D,eAAO,MAAM,eAAe,EAAE;IAAE,CAAC,GAAG,EAAE,MAAM,GAAG,cAAc,CAAA;CAwJ5D,CAAC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/index.js.map b/dist/custodianTypes/index.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..b501f2a04769d577ca7eb0fb702285e7eb607d03
--- /dev/null
+++ b/dist/custodianTypes/index.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/custodianTypes/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.d.ts b/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.d.ts
index c1035add3ea6d560c76785cc9fe2f538037591ee..1427091b796b845c50f0d86f8422f3d51e5c9953 100644
--- a/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.d.ts
+++ b/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.d.ts
@@ -22,7 +22,7 @@ export declare class JsonRpcCustodyKeyring extends CustodyKeyring {
         origins: any[];
         environmentMapping: any[];
     };
-    sdkFactory: (authDetails: IRefreshTokenAuthDetails, apiUrl: string) => MMISDK;
+    sdkFactory: (authDetails: IRefreshTokenAuthDetails, envName: string) => MMISDK;
     txDeepLink: (address: string, txId: string) => Promise<Partial<ICustodianTransactionLink>>;
     constructor(opts?: ICustodyKeyringOptions);
     getStatusMap(): ITransactionStatusMap;
diff --git a/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.d.ts.map b/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..16aa37752a846d6ae4429704532c24905b338a9d
--- /dev/null
+++ b/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"JsonRpcCustodyKeyring.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/json-rpc/JsonRpcCustodyKeyring.ts"],"names":[],"mappings":"AAAA,OAAO,EAAuB,MAAM,EAAiB,MAAM,6BAA6B,CAAC;AACzF,OAAO,EACL,WAAW,EACX,SAAS,EACT,yBAAyB,EACzB,wBAAwB,EACxB,qBAAqB,EACtB,MAAM,+BAA+B,CAAC;AAEvC,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AACtD,OAAO,EAAE,sBAAsB,EAAE,MAAM,yCAAyC,CAAC;AAGjF,qBAAa,qBAAsB,SAAQ,cAAc;IACvD,gBAAuB,IAAI,uBAAuB;IAC3C,IAAI,SAAuB;IAE3B,QAAQ,YAA2B;IAE1C,OAAc,WAAW,EAAE,WAAW,CAAC,SAAS,CAAC;IAEjD,SAAgB,aAAa;;;;;;;;;;;;;;MAc3B;IAEF,UAAU,gBAAiB,wBAAwB,WAAW,MAAM,KAAG,MAAM,CAM3E;IAEF,UAAU,YAAmB,MAAM,QAAQ,MAAM,KAAG,QAAQ,QAAQ,yBAAyB,CAAC,CAAC,CAa7F;gBAEU,IAAI,GAAE,sBAA2B;IAI7C,YAAY,IAAI,qBAAqB;CAGtC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.js b/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.js
index b7175260aa6dd0e9df6015f835f395a17aba16de..58265ce2bc618e4dc86e366a7bd984bc2bae89f7 100644
--- a/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.js
+++ b/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.js
@@ -25,19 +25,14 @@ class JsonRpcCustodyKeyring extends CustodyKeyring_1.CustodyKeyring {
             origins: [],
             environmentMapping: [],
         };
-        this.sdkFactory = (authDetails, apiUrl) => {
-            const store = this.mmiConfigurationController.store.getState();
-            const { custodians } = store.mmiConfiguration;
-            const custodian = custodians.find(c => c.apiUrl === apiUrl);
-            if (!custodian) {
-                throw new Error(`Could not find custodian with URL: ${apiUrl} - please contact support`);
-            }
-            authDetails.refreshTokenUrl = custodian.refreshTokenUrl;
+        this.sdkFactory = (authDetails, envName) => {
+            const { refreshTokenUrl, apiUrl } = this.getCustodianFromEnvName(envName);
+            authDetails.refreshTokenUrl = refreshTokenUrl;
             return (0, sdk_1.mmiSDKFactory)(sdk_1.JsonRpcCustodianApi, authDetails, this.authType, apiUrl);
         };
         this.txDeepLink = async (address, txId) => {
-            const { authDetails, apiUrl } = this.getAccountDetails(address);
-            const sdk = this.getSDK(authDetails, apiUrl);
+            const { authDetails, envName } = this.getAccountDetails(address);
+            const sdk = this.getSDK(authDetails, envName);
             try {
                 const transactionLink = await sdk.getTransactionLink(txId);
                 return transactionLink;
diff --git a/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.js.map b/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..eff6d46e77bff2706f4b15297c5bd565d8919045
--- /dev/null
+++ b/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"JsonRpcCustodyKeyring.js","sourceRoot":"","sources":["../../../src/custodianTypes/json-rpc/JsonRpcCustodyKeyring.ts"],"names":[],"mappings":";;;AAAA,qDAAyF;AACzF,yDAMuC;AAEvC,yDAAsD;AAEtD,yDAAsD;AAEtD,MAAa,qBAAsB,SAAQ,+BAAc;IA+CvD,YAAY,OAA+B,EAAE;QAC3C,KAAK,CAAC,IAAI,CAAC,CAAC;QA9CP,SAAI,GAAG,mBAAmB,CAAC;QAE3B,aAAQ,GAAG,iBAAS,CAAC,aAAa,CAAC;QAI1B,kBAAa,GAAG;YAC9B,IAAI,EAAE,SAAS;YACf,WAAW,EAAE,UAAU;YACvB,MAAM,EAAE,2CAA2C;YACnD,MAAM,EAAE,gEAAgE;YACxE,IAAI,EAAE,gEAAgE;YACtE,OAAO,EAAE,sDAAsD;YAC/D,aAAa,EAAE,sDAAsD;YACrE,OAAO,EAAE,aAAa;YACtB,YAAY,EAAE,qBAAqB;YACnC,UAAU,EAAE,KAAK;YACjB,MAAM,EAAE,IAAI;YACZ,OAAO,EAAE,EAAE;YACX,kBAAkB,EAAE,EAAE;SACvB,CAAC;QAEF,eAAU,GAAG,CAAC,WAAqC,EAAE,OAAe,EAAU,EAAE;YAC9E,MAAM,EAAE,eAAe,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;YAE1E,WAAW,CAAC,eAAe,GAAG,eAAe,CAAC;YAE9C,OAAO,IAAA,mBAAa,EAAC,yBAAmB,EAAE,WAAW,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAChF,CAAC,CAAC;QAEF,eAAU,GAAG,KAAK,EAAE,OAAe,EAAE,IAAY,EAA+C,EAAE;YAChG,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAEjE,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAE9C,IAAI;gBACF,MAAM,eAAe,GAAG,MAAM,GAAG,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;gBAE3D,OAAO,eAAe,CAAC;aACxB;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,CAAC,GAAG,CAAC,qCAAqC,IAAI,EAAE,CAAC,CAAC;gBACzD,OAAO,IAAI,CAAC;aACb;QACH,CAAC,CAAC;IAIF,CAAC;IAED,YAAY;QACV,OAAO,mCAAgB,CAAC;IAC1B,CAAC;;AApDsB,0BAAI,GAAG,mBAAmB,AAAtB,CAAuB;AADvC,sDAAqB"}
\ No newline at end of file
diff --git a/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.test.d.ts b/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.test.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..572429011716cb8c59eae7a04752aafb366f8c20
--- /dev/null
+++ b/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.test.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=JsonRpcCustodyKeyring.test.d.ts.map
\ No newline at end of file
diff --git a/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.test.d.ts.map b/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.test.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..01ae09af259847b653da090b836397b3a79a62a1
--- /dev/null
+++ b/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.test.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"JsonRpcCustodyKeyring.test.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/json-rpc/JsonRpcCustodyKeyring.test.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.test.js b/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.test.js
new file mode 100644
index 0000000000000000000000000000000000000000..b7d3b41c5fc428bbf7d264f831aa94bbb600dde9
--- /dev/null
+++ b/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.test.js
@@ -0,0 +1,242 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const sdk_1 = require("@metamask-institutional/sdk");
+const crypto_1 = __importDefault(require("crypto"));
+const utils_1 = require("ts-jest/utils");
+const JsonRpcCustodyKeyring_1 = require("./JsonRpcCustodyKeyring");
+const JsonRpcStatusMap_1 = require("./JsonRpcStatusMap");
+jest.mock("@metamask-institutional/sdk");
+const mockedMmiSdkFactory = (0, utils_1.mocked)(sdk_1.mmiSDKFactory, true);
+const mockMMISDK = {
+    getAccountHierarchy: jest.fn(),
+    getEthereumAccounts: jest.fn().mockResolvedValue([
+        {
+            name: "myCoolAccount",
+            address: "0x123456",
+            custodianDetails: {},
+            labels: [{ key: "my-label", value: "my-label" }],
+            jwt: "jwt",
+            apiUrl: "apiUrl",
+            envName: "saturn",
+        },
+    ]),
+    getSignature: jest.fn(),
+    getEthereumAccountsByAddress: jest.fn().mockResolvedValue([]),
+    getEthereumAccountsByLabelOrAddressName: jest.fn().mockResolvedValue([]),
+    createTransaction: jest.fn(),
+    getTransaction: jest.fn(),
+    getAllTransactions: jest.fn(),
+    getCustomerId: jest.fn(),
+    signedTypedData_v4: jest.fn(),
+    getErc20Tokens: jest.fn(),
+    subscribeToEvents: jest.fn(),
+    registerEventCallback: jest.fn(),
+    handlePing: jest.fn(),
+    checkPing: jest.fn(),
+    handleEvent: jest.fn(),
+    getTransactionLink: jest.fn().mockResolvedValue({}),
+    changeRefreshTokenAuthDetails: jest.fn(),
+    getCustomerProof: jest.fn(),
+    eventCallbacks: [],
+    jwt: "",
+    defaultCacheAgeSeconds: 0,
+    lastPing: 0,
+    pingCheckRunning: false,
+    cache: null,
+    custodianApi: null,
+    on: jest.fn(),
+};
+const mockMmiConfigurationController = {
+    store: {
+        getState: jest.fn().mockReturnValue({
+            mmiConfiguration: {
+                custodians: [
+                    {
+                        apiUrl: "https://api",
+                        envName: "saturn",
+                    },
+                ],
+            },
+        }),
+    },
+    configurationClient: {},
+    storeConfiguration: jest.fn(),
+    getConfiguration: jest.fn(),
+    getWebsocketApiUrl: jest.fn(),
+};
+describe("JsonRpcCustodyKeyring", () => {
+    let custodyKeyring;
+    beforeEach(() => {
+        custodyKeyring = new JsonRpcCustodyKeyring_1.JsonRpcCustodyKeyring({
+            mmiConfigurationController: mockMmiConfigurationController,
+        });
+        jest.clearAllMocks();
+        mockedMmiSdkFactory.mockReturnValue(mockMMISDK);
+    });
+    describe("getTransactionDeepLink", () => {
+        it("should call the getTransactionDeepLink method on the sdk", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123456",
+                    custodianDetails: { wallet_id: "test" },
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "https://api",
+                    chainId: 4,
+                    custodyType: "Saturn",
+                    envName: "saturn",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const result = await custodyKeyring.getTransactionDeepLink("0x123456", "12345");
+            expect(mockMMISDK.getTransactionLink).toHaveBeenCalledWith("12345");
+            expect(result).toEqual({});
+        });
+        it("should return null if the call fails", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123456",
+                    custodianDetails: { wallet_id: "test" },
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "https://api",
+                    chainId: 4,
+                    custodyType: "Saturn",
+                    envName: "saturn",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            mockMMISDK.getTransactionLink = jest.fn().mockRejectedValueOnce("error");
+            const result = await custodyKeyring.getTransactionDeepLink("0x123456", "12345");
+            expect(result).toEqual(null);
+        });
+    });
+    describe("getStatusMap", () => {
+        it("should return the status map", () => {
+            expect(custodyKeyring.getStatusMap()).toEqual(JsonRpcStatusMap_1.JsonRpcStatusMap);
+        });
+    });
+    describe("hashAuthDetails", () => {
+        it("should hash the refreshtoken together with the custodian API URL", () => {
+            const authDetails = {
+                refreshToken: "miaow",
+            };
+            const url = "https://api";
+            const envName = "saturn";
+            const hashMock = {
+                update: jest.fn().mockReturnThis(),
+                digest: jest.fn().mockReturnValueOnce("fake hash"),
+            };
+            const createHashMock = jest.spyOn(crypto_1.default, "createHash").mockImplementationOnce(() => hashMock);
+            const result = custodyKeyring.hashAuthDetails(authDetails, envName);
+            expect(createHashMock).toBeCalledWith("sha256");
+            expect(hashMock.update).toBeCalledWith(authDetails.refreshToken + url);
+            expect(hashMock.digest).toBeCalledWith("hex");
+            expect(result).toEqual("fake hash");
+        });
+    });
+    describe("createAuthDetails", () => {
+        it("should take a token and turn it into IRefreshTokenAuthDetails", () => {
+            const jwt = "token";
+            const result = custodyKeyring.createAuthDetails(jwt);
+            expect(result).toEqual({
+                refreshToken: jwt,
+            });
+        });
+    });
+    describe("getCustomerProof", () => {
+        it("should get the sdk and call the getCustomerProof method", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123456",
+                    custodianDetails: { wallet_id: "test" },
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "https://api",
+                    chainId: 4,
+                    custodyType: "Saturn",
+                    envName: "saturn",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            await custodyKeyring.getCustomerProof("0x123456");
+            expect(mockMMISDK.getCustomerProof).toHaveBeenCalled();
+        });
+    });
+    describe("replaceRefreshTokenAuthDetails", () => {
+        it("given an address and new auth Details, it calls the sdk with the new auth details", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123456",
+                    custodianDetails: { wallet_id: "test" },
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "https://api",
+                    chainId: 4,
+                    custodyType: "Saturn",
+                    envName: "saturn",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const refreshToken = "newToken";
+            await custodyKeyring.replaceRefreshTokenAuthDetails("0x123456", refreshToken);
+            expect(mockMMISDK.changeRefreshTokenAuthDetails).toHaveBeenCalledWith({
+                refreshToken,
+            });
+        });
+    });
+    describe("updateAccountsDetailsWithNewRefreshToken", () => {
+        it("replace the refresh in accountsDetails", () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123456",
+                    custodianDetails: { wallet_id: "test" },
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "https://api",
+                    chainId: 4,
+                    custodyType: "Saturn",
+                    envName: "saturn",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            custodyKeyring.updateAccountsDetailsWithNewRefreshToken("jwt", "newToken", "https://api");
+            expect(custodyKeyring.accountsDetails[0].authDetails.refreshToken).toEqual("newToken");
+        });
+    });
+    describe("getSignature", () => {
+        it("should call the sdk with the correct params", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123456",
+                    custodianDetails: { wallet_id: "test" },
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "https://api",
+                    chainId: 4,
+                    custodyType: "Saturn",
+                    envName: "saturn",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            await custodyKeyring.getSignature("0x123456", "signed-message-id");
+            expect(mockMMISDK.getSignature).toHaveBeenCalledWith("0x123456", "signed-message-id");
+        });
+    });
+});
+//# sourceMappingURL=JsonRpcCustodyKeyring.test.js.map
\ No newline at end of file
diff --git a/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.test.js.map b/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.test.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..497f46e044af052472859f81f2c4957de48f262c
--- /dev/null
+++ b/dist/custodianTypes/json-rpc/JsonRpcCustodyKeyring.test.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"JsonRpcCustodyKeyring.test.js","sourceRoot":"","sources":["../../../src/custodianTypes/json-rpc/JsonRpcCustodyKeyring.test.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/custodianTypes/json-rpc/JsonRpcStatusMap.d.ts.map b/dist/custodianTypes/json-rpc/JsonRpcStatusMap.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..b6f26c501cdf13eb1a24efbce7042b9f8e1a2dbf
--- /dev/null
+++ b/dist/custodianTypes/json-rpc/JsonRpcStatusMap.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"JsonRpcStatusMap.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/json-rpc/JsonRpcStatusMap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAA+B,MAAM,+BAA+B,CAAC;AAMnG,eAAO,MAAM,gBAAgB,EAAE,qBAkD9B,CAAC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/json-rpc/JsonRpcStatusMap.js.map b/dist/custodianTypes/json-rpc/JsonRpcStatusMap.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..9c54fa06f4fda3ecc2da47d69279e0eca774b004
--- /dev/null
+++ b/dist/custodianTypes/json-rpc/JsonRpcStatusMap.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"JsonRpcStatusMap.js","sourceRoot":"","sources":["../../../src/custodianTypes/json-rpc/JsonRpcStatusMap.ts"],"names":[],"mappings":";;;AAAA,yDAAmG;AAMtF,QAAA,gBAAgB,GAA0B;IACrD,OAAO,EAAE;QACP,QAAQ,EAAE,mCAA2B,CAAC,QAAQ;QAC9C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,KAAK;KAChB;IACD,MAAM,EAAE;QACN,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,QAAQ;QACnB,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,KAAK;KAChB;IACD,SAAS,EAAE;QACT,QAAQ,EAAE,mCAA2B,CAAC,SAAS;QAC/C,SAAS,EAAE,WAAW;QACtB,QAAQ,EAAE,mBAAmB;QAC7B,QAAQ,EAAE,KAAK;KAChB;IACD,KAAK,EAAE;QACL,QAAQ,EAAE,mCAA2B,CAAC,SAAS;QAC/C,SAAS,EAAE,OAAO;QAClB,QAAQ,EAAE,OAAO;QACjB,QAAQ,EAAE,IAAI;KACf;IACD,OAAO,EAAE;QACP,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,IAAI;KACf;IACD,QAAQ,EAAE;QACR,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,IAAI;KACf;IACD,MAAM,EAAE;QACN,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,QAAQ;QACnB,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,IAAI;KACf;IACD,SAAS,EAAE;QAET,QAAQ,EAAE,mCAA2B,CAAC,SAAS;QAC/C,SAAS,EAAE,OAAO;QAClB,QAAQ,EAAE,OAAO;QACjB,QAAQ,EAAE,IAAI;KACf;CACF,CAAC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/jupiter/JupiterCustodyKeyring.d.ts b/dist/custodianTypes/jupiter/JupiterCustodyKeyring.d.ts
index 7ca53e36b3f2e0613c1d903cdf5f94ff3f2118e4..1914bacc113f0d1a29f28e461893e1a50399cb8f 100644
--- a/dist/custodianTypes/jupiter/JupiterCustodyKeyring.d.ts
+++ b/dist/custodianTypes/jupiter/JupiterCustodyKeyring.d.ts
@@ -25,7 +25,7 @@ export declare class JupiterCustodyKeyring extends CustodyKeyring {
             mmiApiUrl: string;
         }[];
     };
-    sdkFactory: (authDetails: AuthDetails, apiUrl: string) => MMISDK;
+    sdkFactory: (authDetails: AuthDetails, envName: string) => MMISDK;
     txDeepLink: (address: string, txId: any) => Promise<Partial<ICustodianTransactionLink>>;
     constructor(opts?: ICustodyKeyringOptions);
     getStatusMap(): ITransactionStatusMap;
diff --git a/dist/custodianTypes/jupiter/JupiterCustodyKeyring.d.ts.map b/dist/custodianTypes/jupiter/JupiterCustodyKeyring.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..b77a4a58e84a1c042b066a88661117e62803bfc3
--- /dev/null
+++ b/dist/custodianTypes/jupiter/JupiterCustodyKeyring.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"JupiterCustodyKeyring.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/jupiter/JupiterCustodyKeyring.ts"],"names":[],"mappings":"AAAA,OAAO,EAAuB,MAAM,EAAiB,MAAM,6BAA6B,CAAC;AACzF,OAAO,EACL,WAAW,EACX,WAAW,EACX,SAAS,EACT,yBAAyB,EACzB,qBAAqB,EACtB,MAAM,+BAA+B,CAAC;AAEvC,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AACtD,OAAO,EAAE,sBAAsB,EAAE,MAAM,yCAAyC,CAAC;AAGjF,qBAAa,qBAAsB,SAAQ,cAAc;IACvD,gBAAuB,IAAI,uBAAuB;IAC3C,IAAI,SAAuB;IAE3B,QAAQ,YAAmB;IAElC,OAAc,WAAW,EAAE,WAAW,CAAC,SAAS,CAAC;IAEjD,SAAgB,aAAa;;;;;;;;;;;;;;;;;MAuB3B;IAEF,UAAU,gBAAiB,WAAW,WAAW,MAAM,KAAG,MAAM,CAG9D;IAEF,UAAU,YAAmB,MAAM,4DAiBjC;gBAEU,IAAI,GAAE,sBAA2B;IAI7C,YAAY,IAAI,qBAAqB;CAGtC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/jupiter/JupiterCustodyKeyring.js b/dist/custodianTypes/jupiter/JupiterCustodyKeyring.js
index b90816e04750bf0c1627b2c8dd56a318f5e43b44..beacdfd2035bf7070d993f78f0067418d585d5c8 100644
--- a/dist/custodianTypes/jupiter/JupiterCustodyKeyring.js
+++ b/dist/custodianTypes/jupiter/JupiterCustodyKeyring.js
@@ -34,9 +34,13 @@ class JupiterCustodyKeyring extends CustodyKeyring_1.CustodyKeyring {
                 },
             ],
         };
-        this.sdkFactory = (authDetails, apiUrl) => (0, sdk_1.mmiSDKFactory)(sdk_1.JupiterCustodianApi, authDetails, this.authType, apiUrl);
+        this.sdkFactory = (authDetails, envName) => {
+            const { apiUrl } = this.getCustodianFromEnvName(envName);
+            return (0, sdk_1.mmiSDKFactory)(sdk_1.JupiterCustodianApi, authDetails, this.authType, apiUrl);
+        };
         this.txDeepLink = async (address, txId) => {
-            const { apiUrl } = this.getAccountDetails(address);
+            const { envName } = this.getAccountDetails(address);
+            const { apiUrl } = this.getCustodianFromEnvName(envName);
             const transactionLink = {
                 text: "Approve the transaction in the Jupiter Custody app. Once all required custody approvals have been performed the transaction will complete. Check your Jupiter Custody app for status.",
                 url: null,
diff --git a/dist/custodianTypes/jupiter/JupiterCustodyKeyring.js.map b/dist/custodianTypes/jupiter/JupiterCustodyKeyring.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..4886300f136ff0cbbcce2ccb90cf71af1a72afa0
--- /dev/null
+++ b/dist/custodianTypes/jupiter/JupiterCustodyKeyring.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"JupiterCustodyKeyring.js","sourceRoot":"","sources":["../../../src/custodianTypes/jupiter/JupiterCustodyKeyring.ts"],"names":[],"mappings":";;;AAAA,qDAAyF;AACzF,yDAMuC;AAEvC,yDAAsD;AAEtD,yDAAsD;AAEtD,MAAa,qBAAsB,SAAQ,+BAAc;IAyDvD,YAAY,OAA+B,EAAE;QAC3C,KAAK,CAAC,IAAI,CAAC,CAAC;QAxDP,SAAI,GAAG,mBAAmB,CAAC;QAE3B,aAAQ,GAAG,iBAAS,CAAC,KAAK,CAAC;QAIlB,kBAAa,GAAG;YAC9B,IAAI,EAAE,SAAS;YACf,WAAW,EAAE,iBAAiB;YAC9B,MAAM,EAAE,wCAAwC;YAChD,MAAM,EAAE,oBAAoB;YAC5B,IAAI,EAAE,oBAAoB;YAC1B,OAAO,EAAE,EAAE;YACX,aAAa,EAAE,EAAE;YACjB,OAAO,EAAE,EAAE;YACX,YAAY,EAAE,qBAAqB;YACnC,UAAU,EAAE,IAAI;YAChB,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,CAAC,gDAAgD,CAAC;YAC3D,kBAAkB,EAAE;gBAClB;oBACE,OAAO,EAAE,wBAAwB;oBACjC,SAAS,EAAE,iBAAiB;iBAC7B;gBACD;oBACE,OAAO,EAAE,wBAAwB;oBACjC,SAAS,EAAE,0BAA0B;iBACtC;aACF;SACF,CAAC;QAEF,eAAU,GAAG,CAAC,WAAwB,EAAE,OAAe,EAAU,EAAE;YACjE,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;YACzD,OAAO,IAAA,mBAAa,EAAC,yBAAmB,EAAE,WAAW,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAChF,CAAC,CAAC;QAEF,eAAU,GAAG,KAAK,EAAE,OAAe,EAAE,IAAI,EAAE,EAAE;YAI3C,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YACpD,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;YAEzD,MAAM,eAAe,GAAuC;gBAC1D,IAAI,EAAE,uLAAuL;gBAC7L,GAAG,EAAE,IAAI;aACV,CAAC;YAEF,IAAI,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;gBACtC,eAAe,CAAC,GAAG,GAAG,kDAAkD,IAAI,EAAE,CAAC;aAChF;YAED,OAAO,eAAe,CAAC;QACzB,CAAC,CAAC;IAIF,CAAC;IAED,YAAY;QACV,OAAO,mCAAgB,CAAC;IAC1B,CAAC;;AA9DsB,0BAAI,GAAG,mBAAmB,AAAtB,CAAuB;AADvC,sDAAqB"}
\ No newline at end of file
diff --git a/dist/custodianTypes/jupiter/JupiterCustodyKeyring.test.d.ts b/dist/custodianTypes/jupiter/JupiterCustodyKeyring.test.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..4a42fbef0db5ec6db99e2abd483e0e6e6716636b
--- /dev/null
+++ b/dist/custodianTypes/jupiter/JupiterCustodyKeyring.test.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=JupiterCustodyKeyring.test.d.ts.map
\ No newline at end of file
diff --git a/dist/custodianTypes/jupiter/JupiterCustodyKeyring.test.d.ts.map b/dist/custodianTypes/jupiter/JupiterCustodyKeyring.test.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..d9b62df56b9ea700b46ad698cc0a8cc634430fea
--- /dev/null
+++ b/dist/custodianTypes/jupiter/JupiterCustodyKeyring.test.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"JupiterCustodyKeyring.test.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/jupiter/JupiterCustodyKeyring.test.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/custodianTypes/jupiter/JupiterCustodyKeyring.test.js b/dist/custodianTypes/jupiter/JupiterCustodyKeyring.test.js
new file mode 100644
index 0000000000000000000000000000000000000000..35ad2f75d5ab7afff9315faa8121cb1995b67e8f
--- /dev/null
+++ b/dist/custodianTypes/jupiter/JupiterCustodyKeyring.test.js
@@ -0,0 +1,912 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+const sdk_1 = require("@metamask-institutional/sdk");
+const utils_1 = require("ts-jest/utils");
+const constants_1 = require("../../constants");
+const JupiterCustodyKeyring_1 = require("./JupiterCustodyKeyring");
+const JupiterStatusMap_1 = require("./JupiterStatusMap");
+jest.mock("@metamask-institutional/sdk");
+const mockedMmiSdkFactory = (0, utils_1.mocked)(sdk_1.mmiSDKFactory, true);
+const mockAccounts = [
+    {
+        name: "myCoolAccount",
+        address: "0x123456",
+        custodianDetails: {},
+        labels: [{ key: "my-label", value: "my-label" }],
+        token: "jwt",
+        apiUrl: "apiUrl",
+        envName: "jupiter",
+    },
+];
+const mockMMISDK = {
+    getAccountHierarchy: jest.fn(),
+    getEthereumAccounts: jest.fn().mockResolvedValue(mockAccounts),
+    getEthereumAccountsByAddress: jest.fn().mockResolvedValue(mockAccounts),
+    getEthereumAccountsByLabelOrAddressName: jest.fn().mockResolvedValue([]),
+    createTransaction: jest.fn(),
+    getTransaction: jest.fn(),
+    getAllTransactions: jest.fn(),
+    getCustomerId: jest.fn(),
+    signedTypedData_v4: jest.fn(),
+    signPersonalMessage: jest.fn(),
+    getErc20Tokens: jest.fn(),
+    subscribeToEvents: jest.fn(),
+    registerEventCallback: jest.fn(),
+    handlePing: jest.fn(),
+    checkPing: jest.fn(),
+    handleEvent: jest.fn(),
+    setBuildMetaData: jest.fn(),
+    getTransactionLink: jest.fn().mockResolvedValue(null),
+    changeRefreshTokenAuthDetails: jest.fn(),
+    eventCallbacks: [],
+    jwt: "",
+    defaultCacheAgeSeconds: 0,
+    lastPing: 0,
+    pingCheckRunning: false,
+    cache: null,
+    custodianApi: null,
+    getSupportedChains: jest.fn().mockReturnValue(["4"]),
+    on: jest.fn(),
+};
+describe("CustodyKeyring", () => {
+    let custodyKeyring;
+    beforeEach(() => {
+        custodyKeyring = new JupiterCustodyKeyring_1.JupiterCustodyKeyring({
+            mmiConfigurationController: {
+                store: {
+                    getState: jest.fn().mockReturnValue({
+                        mmiConfiguration: {
+                            custodians: [
+                                {
+                                    apiUrl: "apiUrl",
+                                    envName: "jupiter",
+                                },
+                                {
+                                    apiUrl: "apiUrl2",
+                                    envName: "jupiter2",
+                                },
+                                {
+                                    apiUrl: "https://jupiter-custody-demo.codefi.network",
+                                    envName: "jupiter-demo",
+                                },
+                            ],
+                        },
+                    }),
+                },
+            },
+        });
+        jest.clearAllMocks();
+        mockedMmiSdkFactory.mockReturnValue(mockMMISDK);
+    });
+    describe("serialize", () => {
+        it("should return the accounts, selectedAddresses, accountDetails and meta as plain objects", async () => {
+            const result = await custodyKeyring.serialize();
+            expect(result).toEqual({
+                accounts: [],
+                selectedAddresses: [],
+                accountsDetails: [],
+                meta: {},
+            });
+        });
+    });
+    describe("deserialize", () => {
+        it("should accept the accounts, selectedAddresses and accountDetails and self assign them, including creating SDKs for them", async () => {
+            const mockAccounts = ["0x123456"];
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount",
+                    address: "0x123456",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    authDetails: { jwt: "jwt" },
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            const mockAccountsDetails = [
+                {
+                    address: "0x123456",
+                    authDetails: { jwt: "jwt" },
+                    apiUrl: "apiUrl",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            await custodyKeyring.deserialize({
+                accounts: mockAccounts,
+                selectedAddresses: mockSelectedAddresses,
+                accountsDetails: mockAccountsDetails,
+            });
+            expect(custodyKeyring.accounts).toEqual(mockAccounts);
+            expect(custodyKeyring.selectedAddresses).toEqual(mockSelectedAddresses);
+            expect(custodyKeyring.accountsDetails).toEqual(mockAccountsDetails);
+            expect(sdk_1.mmiSDKFactory).toHaveBeenCalled();
+        });
+    });
+    describe("setSelectedAddresses", () => {
+        it("accepts an array of custodian accounts and self assigns them", () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount",
+                    address: "0x123456",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            expect(custodyKeyring.selectedAddresses).toEqual([]);
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            expect(custodyKeyring.selectedAddresses).toEqual(mockSelectedAddresses.map(custodyKeyring.convertExtensionCustodianAccountToSDKCustodianAccount.bind(custodyKeyring)));
+        });
+    });
+    describe("addAccounts", () => {
+        it("takes a number, and adds this many accounts from selectedAddresses to the accounts list and stores their metadata in accountsDetails", () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123456",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+                {
+                    name: "myCoolAccount2",
+                    address: "0x123457",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl2",
+                    custodyType: "jupiter",
+                    envName: "jupiter2",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            expect(custodyKeyring.accounts.length).toEqual(1);
+            custodyKeyring.addAccounts(2);
+            expect(custodyKeyring.accounts.length).toEqual(2);
+        });
+    });
+    describe("getAccounts", () => {
+        it("returns the accounts property", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123456",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const result = await custodyKeyring.getAccounts();
+            expect(result).toEqual(custodyKeyring.accounts);
+        });
+    });
+    describe("removeAccounts", () => {
+        it("removes an account from the accounts list based on the address", () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123456",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+                {
+                    name: "myCoolAccount2",
+                    address: "0x123457",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl2",
+                    custodyType: "jupiter",
+                    envName: "jupiter2",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(2);
+            expect(custodyKeyring.accounts.length).toEqual(2);
+            expect(custodyKeyring.accountsDetails.length).toEqual(2);
+            custodyKeyring.removeAccount(mockSelectedAddresses[1].address);
+            expect(custodyKeyring.accounts.length).toEqual(1);
+            expect(custodyKeyring.accountsDetails.length).toEqual(1);
+            custodyKeyring.removeAccount(mockSelectedAddresses[0].address);
+            expect(custodyKeyring.accounts.length).toEqual(0);
+            expect(custodyKeyring.accountsDetails.length).toEqual(0);
+        });
+    });
+    describe("getSDK", () => {
+        it("returns a copy of the SDK from the sdkList if it exists, or creates one if it is not there", () => {
+            const result = custodyKeyring.getSDK({ jwt: "jwt" }, "jupiter");
+            expect(result).toEqual(mockMMISDK);
+            expect(mockedMmiSdkFactory).toHaveBeenCalledWith(sdk_1.JupiterCustodianApi, { jwt: "jwt" }, 0, "apiUrl");
+        });
+        it("does not create one of it is there already", () => {
+            custodyKeyring.getSDK({ jwt: "jwt" }, "jupiter");
+            custodyKeyring.getSDK({ jwt: "jwt" }, "jupiter");
+            expect(sdk_1.mmiSDKFactory).toHaveBeenCalledTimes(1);
+        });
+        it("will draw from the existing sdkList and return only ones that differ by hash of the auth details", () => {
+            custodyKeyring.getSDK({ jwt: "jwt" }, "jupiter");
+            custodyKeyring.getSDK({ jwt: "jwt" }, "jupiter");
+            custodyKeyring.getSDK({ jwt: "jwt2" }, "jupiter2");
+            expect(sdk_1.mmiSDKFactory).toHaveBeenCalledTimes(2);
+        });
+    });
+    describe("getCustodianAccounts", () => {
+        it("will get addresses, if the arguments specify an ethereum address", () => {
+            const address = "0x4D8519890C77217A352d3cC978B0b74165154401";
+            custodyKeyring.getCustodianAccounts("jwt", "jupiter", address);
+            expect(mockMMISDK.getEthereumAccountsByAddress).toHaveBeenCalledWith(address, constants_1.DEFAULT_MAX_CACHE_AGE);
+        });
+        it("will not return already existing addresses", async () => {
+            const address = "0x4D8519890C77217A352d3cC978B0b74165154401";
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address,
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const result = await custodyKeyring.getCustodianAccounts("jwt", "jupiter", address);
+            expect(result).toEqual(mockAccounts);
+            expect(sdk_1.mmiSDKFactory).toHaveBeenCalledTimes(1);
+        });
+        it("will search by labels if there is a non-address search text", () => {
+            custodyKeyring.getCustodianAccounts("jwt", "jupiter", "search");
+            expect(mockMMISDK.getEthereumAccountsByLabelOrAddressName).toHaveBeenCalledWith("search", constants_1.DEFAULT_MAX_CACHE_AGE);
+        });
+        it("will get all accounts (for a chainID) if called with no search text", () => {
+            custodyKeyring.getCustodianAccounts("jwt", "jupiter", null);
+            expect(mockMMISDK.getEthereumAccounts).toHaveBeenCalledWith(60);
+        });
+    });
+    describe("getTransactionNote", () => {
+        it("will get a readable category for transaction based on the transaction category", () => {
+            const txMeta = {
+                type: "transfer",
+                origin: "http://",
+            };
+            expect(custodyKeyring.getTransactionNote(txMeta)).toEqual("ETH Transfer - initiated on http://");
+        });
+        it("will return the raw category if there is no mapping", () => {
+            const txMeta = {
+                type: "blah",
+                origin: "http://",
+            };
+            expect(custodyKeyring.getTransactionNote(txMeta)).toEqual("blah - initiated on http://");
+        });
+    });
+    describe("signTransaction", () => {
+        it("will get account information and then call signTransaction on the SDK with formatted transaction metadata", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123458",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const fromAddress = mockSelectedAddresses[0].address;
+            const ethTx = {
+                data: "0x",
+            };
+            const txMeta = {
+                type: "contractInteraction",
+                origin: "http://",
+                chainId: "4",
+                txParams: {
+                    to: "0x5678",
+                    gasPrice: "1",
+                    gas: "2",
+                    value: "3",
+                },
+            };
+            await custodyKeyring.signTransaction(fromAddress, ethTx, txMeta);
+            expect(mockMMISDK.createTransaction).toHaveBeenCalledWith({
+                data: ethTx.data,
+                from: fromAddress,
+                gasLimit: txMeta.txParams.gas,
+                gasPrice: txMeta.txParams.gasPrice,
+                to: txMeta.txParams.to,
+                value: txMeta.txParams.value,
+                type: "0",
+            }, {
+                chainId: txMeta.chainId,
+                note: "Contract Interaction - initiated on http://",
+                origin: "http://",
+                transactionCategory: "contractInteraction",
+            });
+        });
+        it("will throw if there's a specified chainId and it doesnt match the account", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123458",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const fromAddress = mockSelectedAddresses[0].address;
+            const ethTx = {
+                data: "0x",
+            };
+            const txMeta = {
+                type: "contractInteraction",
+                origin: "http://",
+                chainId: "777",
+                txParams: {
+                    to: "0x5678",
+                    gasPrice: "1",
+                    gas: "2",
+                    value: "3",
+                },
+            };
+            await expect(custodyKeyring.signTransaction(fromAddress, ethTx, txMeta)).rejects.toThrowError("This network 777 is not configured or supported with your custody provider.");
+        });
+        it("will call with type 2 for london transactions", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123458",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const fromAddress = mockSelectedAddresses[0].address;
+            const ethTx = {
+                data: "0x",
+            };
+            const txMeta = {
+                type: "contractInteraction",
+                origin: "http://",
+                chainId: "4",
+                txParams: {
+                    to: "0x5678",
+                    gas: "2",
+                    maxFeePerGas: "4000000013",
+                    maxPriorityFeePerGas: "4000000000",
+                    value: "3",
+                },
+            };
+            await custodyKeyring.signTransaction(fromAddress, ethTx, txMeta);
+            expect(mockMMISDK.createTransaction).toHaveBeenCalledWith({
+                data: ethTx.data,
+                from: fromAddress,
+                gasLimit: txMeta.txParams.gas,
+                maxFeePerGas: txMeta.txParams.maxFeePerGas,
+                maxPriorityFeePerGas: txMeta.txParams.maxPriorityFeePerGas,
+                to: txMeta.txParams.to,
+                value: txMeta.txParams.value,
+                type: "2",
+            }, {
+                chainId: txMeta.chainId,
+                note: "Contract Interaction - initiated on http://",
+                origin: "http://",
+                transactionCategory: "contractInteraction",
+            });
+        });
+        it("handles large amounts", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123458",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const fromAddress = mockSelectedAddresses[0].address;
+            const ethTx = {
+                data: "0x",
+            };
+            const txMeta = {
+                type: "contractInteraction",
+                origin: "http://",
+                chainId: "4",
+                txParams: {
+                    to: "0x5678",
+                    gasPrice: "1",
+                    gas: "2",
+                    value: "0xD3C21BCECCEDA1000000",
+                },
+            };
+            await custodyKeyring.signTransaction(fromAddress, ethTx, txMeta);
+            expect(mockMMISDK.createTransaction).toHaveBeenCalledWith({
+                data: ethTx.data,
+                from: fromAddress,
+                gasLimit: txMeta.txParams.gas,
+                gasPrice: txMeta.txParams.gasPrice,
+                to: txMeta.txParams.to,
+                value: "1000000000000000000000000",
+                type: "0",
+            }, {
+                chainId: txMeta.chainId,
+                note: "Contract Interaction - initiated on http://",
+                origin: "http://",
+                transactionCategory: "contractInteraction",
+            });
+        });
+        it("should convert tx data from a Uint8Array to 0x-ified string", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123458",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const fromAddress = mockSelectedAddresses[0].address;
+            const ethTx = {
+                data: Uint8Array.from([1]),
+            };
+            const txMeta = {
+                type: "contractInteraction",
+                origin: "http://",
+                chainId: "4",
+                txParams: {
+                    to: "0x5678",
+                    gasPrice: "1",
+                    gas: "2",
+                    value: "3",
+                    type: "0",
+                },
+            };
+            await custodyKeyring.signTransaction(fromAddress, ethTx, txMeta);
+            expect(mockMMISDK.createTransaction).toHaveBeenCalledWith({
+                data: "0x1",
+                from: fromAddress,
+                gasLimit: txMeta.txParams.gas,
+                gasPrice: txMeta.txParams.gasPrice,
+                to: txMeta.txParams.to,
+                value: txMeta.txParams.value,
+                type: txMeta.txParams.type,
+            }, {
+                chainId: txMeta.chainId,
+                note: "Contract Interaction - initiated on http://",
+                origin: "http://",
+                transactionCategory: "contractInteraction",
+            });
+        });
+        it("should convert empty data into undefined", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123458",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const fromAddress = mockSelectedAddresses[0].address;
+            const ethTx = {
+                data: "",
+            };
+            const txMeta = {
+                type: "contractInteraction",
+                origin: "http://",
+                chainId: "4",
+                txParams: {
+                    to: "0x5678",
+                    gasPrice: "1",
+                    gas: "2",
+                    value: "3",
+                },
+            };
+            await custodyKeyring.signTransaction(fromAddress, ethTx, txMeta);
+            expect(mockMMISDK.createTransaction).toHaveBeenCalledWith({
+                data: undefined,
+                from: fromAddress,
+                gasLimit: txMeta.txParams.gas,
+                gasPrice: txMeta.txParams.gasPrice,
+                to: txMeta.txParams.to,
+                value: txMeta.txParams.value,
+                type: "0",
+            }, {
+                chainId: txMeta.chainId,
+                note: "Contract Interaction - initiated on http://",
+                origin: "http://",
+                transactionCategory: "contractInteraction",
+            });
+        });
+        it("should convert tx data from a Uint8Array to 0x-ified string", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123458",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const fromAddress = mockSelectedAddresses[0].address;
+            const ethTx = {
+                data: Uint8Array.from([1]),
+            };
+            const txMeta = {
+                type: "contractInteraction",
+                origin: "http://",
+                chainId: "4",
+                txParams: {
+                    to: "0x5678",
+                    gasPrice: "1",
+                    gas: "2",
+                    value: "3",
+                },
+            };
+            await custodyKeyring.signTransaction(fromAddress, ethTx, txMeta);
+            expect(mockMMISDK.createTransaction).toHaveBeenCalledWith({
+                data: "0x1",
+                from: fromAddress,
+                gasLimit: txMeta.txParams.gas,
+                gasPrice: txMeta.txParams.gasPrice,
+                to: txMeta.txParams.to,
+                value: txMeta.txParams.value,
+                type: "0",
+            }, {
+                chainId: txMeta.chainId,
+                note: "Contract Interaction - initiated on http://",
+                origin: "http://",
+                transactionCategory: "contractInteraction",
+            });
+        });
+        it("should 0x-prefix data", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123458",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const fromAddress = mockSelectedAddresses[0].address;
+            const ethTx = {
+                data: "12",
+            };
+            const txMeta = {
+                type: "contractInteraction",
+                origin: "http://",
+                chainId: "4",
+                txParams: {
+                    to: "0x5678",
+                    gasPrice: "1",
+                    gas: "2",
+                    value: "3",
+                    type: "0",
+                },
+            };
+            await custodyKeyring.signTransaction(fromAddress, ethTx, txMeta);
+            expect(mockMMISDK.createTransaction).toHaveBeenCalledWith({
+                data: "0x12",
+                from: fromAddress,
+                gasLimit: txMeta.txParams.gas,
+                gasPrice: txMeta.txParams.gasPrice,
+                to: txMeta.txParams.to,
+                value: txMeta.txParams.value,
+                type: txMeta.txParams.type,
+            }, {
+                chainId: txMeta.chainId,
+                note: "Contract Interaction - initiated on http://",
+                origin: "http://",
+                transactionCategory: "contractInteraction",
+            });
+        });
+    });
+    describe("getTransaction", () => {
+        it("should call getTransaction on the SDK", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123456",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            await custodyKeyring.getTransaction("0x123456", "12345");
+            expect(mockMMISDK.getTransaction).toHaveBeenCalledWith("0x123456", "12345");
+        });
+        it("does nothing if called with bad arguments", async () => {
+            const result = await custodyKeyring.getTransaction(undefined, undefined);
+            expect(result).toEqual(null);
+        });
+    });
+    describe("getTransactionDeepLink", () => {
+        it("should return the URL of the Jupiter Custody UI", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123456",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const result = await custodyKeyring.getTransactionDeepLink("0x123456", "12345");
+            expect(result).toEqual({
+                text: "Approve the transaction in the Jupiter Custody app. Once all required custody approvals have been performed the transaction will complete. Check your Jupiter Custody app for status.",
+                url: null,
+            });
+        });
+        it("should return a link to the Jupiter custody UI", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x1234567",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const result = await custodyKeyring.getTransactionDeepLink("0x1234567", "12345");
+            expect(result).toEqual({
+                text: "Approve the transaction in the Jupiter Custody app. Once all required custody approvals have been performed the transaction will complete. Check your Jupiter Custody app for status.",
+                url: null,
+            });
+        });
+        it("has a special rule for the demo environment", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123456",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "https://jupiter-custody-demo.codefi.network",
+                    custodyType: "jupiter",
+                    envName: "jupiter-demo",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const result = await custodyKeyring.getTransactionDeepLink("0x123456", "12345");
+            expect(result).toEqual({
+                text: "Approve the transaction in the Jupiter Custody app. Once all required custody approvals have been performed the transaction will complete. Check your Jupiter Custody app for status.",
+                url: "https://jupiter-custody-ui-demo.codefi.network/12345",
+            });
+        });
+    });
+    describe("signMessage", () => {
+        it("should throw an exception", () => {
+            expect(() => custodyKeyring.signMessage()).toThrowError("Not supported on this custodian");
+        });
+    });
+    describe("exportAccount", () => {
+        it("should throw an exception", () => {
+            expect(() => custodyKeyring.exportAccount()).toThrowError("Not supported on this custodian");
+        });
+    });
+    describe("getErc20Tokens", () => {
+        it("should call getErc20Tokens for every jwt/URL pair", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123458",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123459",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt2",
+                    apiUrl: "apiUrl2",
+                    custodyType: "jupiter",
+                    envName: "jupiter2",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(2);
+            await custodyKeyring.getErc20Tokens();
+            expect(mockMMISDK.getErc20Tokens).toHaveBeenCalledTimes(2);
+        });
+    });
+    describe("getStatusMap", () => {
+        it("should return the status map", () => {
+            expect(custodyKeyring.getStatusMap()).toEqual(JupiterStatusMap_1.JupiterStatusMap);
+        });
+    });
+    describe("signTypedData", () => {
+        it("should call signTypedData on the SDK", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123458",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const fromAddress = mockSelectedAddresses[0].address;
+            await custodyKeyring.signTypedData(fromAddress, "data", {
+                version: "V4",
+            });
+            expect(mockMMISDK.signedTypedData_v4).toHaveBeenCalledWith(fromAddress, "data", "V4", {
+                chainId: null,
+                note: null,
+                originUrl: null,
+            });
+        });
+        it("throws an exception if an invalid version is specified", () => {
+            expect(custodyKeyring.signTypedData("0x1236", "data", { version: "V9000" })).rejects.toThrowError("Only signedTypedData_v4 and signedTypedData_v3 is supported");
+        });
+    });
+    describe("signPersonalMessage", () => {
+        it("should call signPersonalMessage on the SDK", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123458",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const fromAddress = mockSelectedAddresses[0].address;
+            await custodyKeyring.signPersonalMessage(fromAddress, "data", null);
+            expect(mockMMISDK.signPersonalMessage).toHaveBeenCalledWith(fromAddress, "data", {
+                chainId: null,
+                note: null,
+                originUrl: null,
+            });
+        });
+    });
+    describe("getSupportedChains", () => {
+        it("should return the supported chains", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123458",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const fromAddress = mockSelectedAddresses[0].address;
+            const result = await custodyKeyring.getSupportedChains(fromAddress);
+            expect(mockMMISDK.getSupportedChains).toHaveBeenCalled();
+            expect(result).toEqual(["4"]);
+        });
+    });
+    describe("getAllAccountsWithToken", () => {
+        it("should get all the accounts with a specific token", () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123458",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "apiUrl",
+                    custodyType: "jupiter",
+                    envName: "jupiter",
+                },
+                {
+                    name: "myCoolAccount2",
+                    address: "0x123458",
+                    custodianDetails: {},
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt2",
+                    apiUrl: "apiUrl2",
+                    custodyType: "jupiter",
+                    envName: "jupiter2",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const { token: _token, ...accountWithoutToken } = mockSelectedAddresses[0];
+            expect(custodyKeyring.getAllAccountsWithToken("jwt")).toEqual([
+                {
+                    ...accountWithoutToken,
+                    authDetails: { jwt: "jwt" },
+                    meta: { version: 1 },
+                },
+            ]);
+        });
+    });
+});
+//# sourceMappingURL=JupiterCustodyKeyring.test.js.map
\ No newline at end of file
diff --git a/dist/custodianTypes/jupiter/JupiterCustodyKeyring.test.js.map b/dist/custodianTypes/jupiter/JupiterCustodyKeyring.test.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..9f657bb46a4633de64e382dd103d3e4a4be0c37d
--- /dev/null
+++ b/dist/custodianTypes/jupiter/JupiterCustodyKeyring.test.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"JupiterCustodyKeyring.test.js","sourceRoot":"","sources":["../../../src/custodianTypes/jupiter/JupiterCustodyKeyring.test.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/custodianTypes/jupiter/JupiterStatusMap.d.ts.map b/dist/custodianTypes/jupiter/JupiterStatusMap.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..de6bf2c6cbd715c51436cc2124005382046188d2
--- /dev/null
+++ b/dist/custodianTypes/jupiter/JupiterStatusMap.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"JupiterStatusMap.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/jupiter/JupiterStatusMap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAA+B,MAAM,+BAA+B,CAAC;AAEnG,eAAO,MAAM,gBAAgB,EAAE,qBA2C9B,CAAC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/jupiter/JupiterStatusMap.js.map b/dist/custodianTypes/jupiter/JupiterStatusMap.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..82bc0e2f4c161ba0aa6b52b927ee6cf62885a91b
--- /dev/null
+++ b/dist/custodianTypes/jupiter/JupiterStatusMap.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"JupiterStatusMap.js","sourceRoot":"","sources":["../../../src/custodianTypes/jupiter/JupiterStatusMap.ts"],"names":[],"mappings":";;;AAAA,yDAAmG;AAEtF,QAAA,gBAAgB,GAA0B;IACrD,OAAO,EAAE;QACP,QAAQ,EAAE,mCAA2B,CAAC,QAAQ;QAC9C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,KAAK;KAChB;IACD,MAAM,EAAE;QACN,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,QAAQ;QACnB,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,KAAK;KAChB;IACD,SAAS,EAAE;QACT,QAAQ,EAAE,mCAA2B,CAAC,SAAS;QAC/C,SAAS,EAAE,WAAW;QACtB,QAAQ,EAAE,mBAAmB;QAC7B,QAAQ,EAAE,KAAK;KAChB;IACD,KAAK,EAAE;QACL,QAAQ,EAAE,mCAA2B,CAAC,SAAS;QAC/C,SAAS,EAAE,OAAO;QAClB,QAAQ,EAAE,OAAO;QACjB,QAAQ,EAAE,KAAK;KAChB;IACD,OAAO,EAAE;QACP,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,IAAI;KACf;IACD,QAAQ,EAAE;QACR,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,IAAI;KACf;IACD,MAAM,EAAE;QACN,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,QAAQ;QACnB,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,IAAI;KACf;CACF,CAAC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/qredo/QredoCustodyKeyring.d.ts b/dist/custodianTypes/qredo/QredoCustodyKeyring.d.ts
index 0e871d662679f3dcb6a60bdba81a77f00f36a013..131be03c86ef8e64f5fde2971a6bf4722098acaf 100644
--- a/dist/custodianTypes/qredo/QredoCustodyKeyring.d.ts
+++ b/dist/custodianTypes/qredo/QredoCustodyKeyring.d.ts
@@ -25,7 +25,7 @@ export declare class QredoCustodyKeyring extends CustodyKeyring {
     };
     authType: AuthTypes;
     static addressType: AddressType.POLYCHAIN;
-    sdkFactory: (authDetails: IRefreshTokenAuthDetails, apiUrl: string) => MMISDK;
+    sdkFactory: (authDetails: IRefreshTokenAuthDetails, envName: string) => MMISDK;
     txDeepLink: (_address: string, _txId: string) => Promise<Partial<ICustodianTransactionLink>>;
     constructor(opts?: ICustodyKeyringOptions);
     getStatusMap(): ITransactionStatusMap;
diff --git a/dist/custodianTypes/qredo/QredoCustodyKeyring.d.ts.map b/dist/custodianTypes/qredo/QredoCustodyKeyring.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..69ff133f9d6cc6fa8927953d59c6b78b3f5b30a7
--- /dev/null
+++ b/dist/custodianTypes/qredo/QredoCustodyKeyring.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"QredoCustodyKeyring.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/qredo/QredoCustodyKeyring.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAoC,MAAM,6BAA6B,CAAC;AACvF,OAAO,EACL,WAAW,EACX,SAAS,EACT,yBAAyB,EACzB,wBAAwB,EACxB,qBAAqB,EACtB,MAAM,+BAA+B,CAAC;AAEvC,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AACtD,OAAO,EAAE,sBAAsB,EAAE,MAAM,yCAAyC,CAAC;AAGjF,qBAAa,mBAAoB,SAAQ,cAAc;IACrD,gBAAuB,IAAI,qBAAqB;IACzC,IAAI,SAAqB;IAEhC,SAAgB,aAAa;;;;;;;;;;;;;;;;;MAuB3B;IAEK,QAAQ,YAA2B;IAE1C,OAAc,WAAW,EAAE,WAAW,CAAC,SAAS,CAAC;IAEjD,UAAU,gBAAiB,wBAAwB,WAAW,MAAM,KAAG,MAAM,CAG3E;IAEF,UAAU,aAAoB,MAAM,SAAS,MAAM,KAAG,QAAQ,QAAQ,yBAAyB,CAAC,CAAC,CAE/F;gBAEU,IAAI,GAAE,sBAA2B;IAI7C,YAAY,IAAI,qBAAqB;CAGtC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/qredo/QredoCustodyKeyring.js b/dist/custodianTypes/qredo/QredoCustodyKeyring.js
index 0768edc87ba8bccc403478e77b436677a4580215..048946892d5153e59ab1cccf415db354c95aa856 100644
--- a/dist/custodianTypes/qredo/QredoCustodyKeyring.js
+++ b/dist/custodianTypes/qredo/QredoCustodyKeyring.js
@@ -34,7 +34,10 @@ class QredoCustodyKeyring extends CustodyKeyring_1.CustodyKeyring {
             ],
         };
         this.authType = types_1.AuthTypes.REFRESH_TOKEN;
-        this.sdkFactory = (authDetails, apiUrl) => (0, sdk_1.mmiSDKFactory)(sdk_1.QredoCustodianApi, authDetails, this.authType, apiUrl);
+        this.sdkFactory = (authDetails, envName) => {
+            const { apiUrl } = this.getCustodianFromEnvName(envName);
+            return (0, sdk_1.mmiSDKFactory)(sdk_1.QredoCustodianApi, authDetails, this.authType, apiUrl);
+        };
         this.txDeepLink = async (_address, _txId) => {
             return null;
         };
diff --git a/dist/custodianTypes/qredo/QredoCustodyKeyring.js.map b/dist/custodianTypes/qredo/QredoCustodyKeyring.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..cdf2c458df6672d9b416fa2ce64dc625d6a03ae9
--- /dev/null
+++ b/dist/custodianTypes/qredo/QredoCustodyKeyring.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"QredoCustodyKeyring.js","sourceRoot":"","sources":["../../../src/custodianTypes/qredo/QredoCustodyKeyring.ts"],"names":[],"mappings":";;;AAAA,qDAAuF;AACvF,yDAMuC;AAEvC,yDAAsD;AAEtD,qDAAkD;AAElD,MAAa,mBAAoB,SAAQ,+BAAc;IA0CrD,YAAY,OAA+B,EAAE;QAC3C,KAAK,CAAC,IAAI,CAAC,CAAC;QAzCP,SAAI,GAAG,iBAAiB,CAAC;QAEhB,kBAAa,GAAG;YAC9B,IAAI,EAAE,OAAO;YACb,WAAW,EAAE,OAAO;YACpB,MAAM,EAAE,2BAA2B;YACnC,MAAM,EAAE,4EAA4E;YACpF,IAAI,EAAE,4EAA4E;YAClF,OAAO,EAAE,uBAAuB;YAChC,aAAa,EAAE,uBAAuB;YACtC,OAAO,EAAE,OAAO;YAChB,YAAY,EAAE,mBAAmB;YACjC,UAAU,EAAE,IAAI;YAChB,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,EAAE;YACX,kBAAkB,EAAE;gBAClB;oBACE,OAAO,EAAE,OAAO;oBAChB,SAAS,EAAE,+BAA+B;iBAC3C;gBACD;oBACE,OAAO,EAAE,+BAA+B;oBACxC,SAAS,EAAE,wCAAwC;iBACpD;aACF;SACF,CAAC;QAEK,aAAQ,GAAG,iBAAS,CAAC,aAAa,CAAC;QAI1C,eAAU,GAAG,CAAC,WAAqC,EAAE,OAAe,EAAU,EAAE;YAC9E,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;YACzD,OAAO,IAAA,mBAAa,EAAC,uBAAiB,EAAE,WAAW,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC9E,CAAC,CAAC;QAEF,eAAU,GAAG,KAAK,EAAE,QAAgB,EAAE,KAAa,EAA+C,EAAE;YAClG,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;IAIF,CAAC;IAED,YAAY;QACV,OAAO,+BAAc,CAAC;IACxB,CAAC;;AA/CsB,wBAAI,GAAG,iBAAiB,AAApB,CAAqB;AADrC,kDAAmB"}
\ No newline at end of file
diff --git a/dist/custodianTypes/qredo/QredoCustodyKeyring.test.d.ts b/dist/custodianTypes/qredo/QredoCustodyKeyring.test.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..401895dec64176ba44c64e7db15552b986a4a503
--- /dev/null
+++ b/dist/custodianTypes/qredo/QredoCustodyKeyring.test.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=QredoCustodyKeyring.test.d.ts.map
\ No newline at end of file
diff --git a/dist/custodianTypes/qredo/QredoCustodyKeyring.test.d.ts.map b/dist/custodianTypes/qredo/QredoCustodyKeyring.test.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..177eceb758720061a0ce1e6f22100fd3159ce898
--- /dev/null
+++ b/dist/custodianTypes/qredo/QredoCustodyKeyring.test.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"QredoCustodyKeyring.test.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/qredo/QredoCustodyKeyring.test.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/custodianTypes/qredo/QredoCustodyKeyring.test.js b/dist/custodianTypes/qredo/QredoCustodyKeyring.test.js
new file mode 100644
index 0000000000000000000000000000000000000000..6d92c5560f7d86dba297b798aa190c88428037b3
--- /dev/null
+++ b/dist/custodianTypes/qredo/QredoCustodyKeyring.test.js
@@ -0,0 +1,126 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const sdk_1 = require("@metamask-institutional/sdk");
+const crypto_1 = __importDefault(require("crypto"));
+const utils_1 = require("ts-jest/utils");
+const QredoCustodyKeyring_1 = require("./QredoCustodyKeyring");
+const QredoStatusMap_1 = require("./QredoStatusMap");
+jest.mock("@metamask-institutional/sdk");
+const mockedMmiSdkFactory = (0, utils_1.mocked)(sdk_1.mmiSDKFactory, true);
+const mockMMISDK = {
+    getAccountHierarchy: jest.fn(),
+    getEthereumAccounts: jest.fn().mockResolvedValue([
+        {
+            name: "myCoolAccount",
+            address: "0x123456",
+            custodianDetails: {},
+            labels: [{ key: "my-label", value: "my-label" }],
+            jwt: "jwt",
+            apiUrl: "https://qredo-api.com",
+            envName: "qredo",
+        },
+    ]),
+    getEthereumAccountsByAddress: jest.fn().mockResolvedValue([]),
+    getEthereumAccountsByLabelOrAddressName: jest.fn().mockResolvedValue([]),
+    createTransaction: jest.fn(),
+    getTransaction: jest.fn(),
+    getAllTransactions: jest.fn(),
+    getCustomerId: jest.fn(),
+    signedTypedData_v4: jest.fn(),
+    getErc20Tokens: jest.fn(),
+    subscribeToEvents: jest.fn(),
+    registerEventCallback: jest.fn(),
+    handlePing: jest.fn(),
+    checkPing: jest.fn(),
+    handleEvent: jest.fn(),
+    getTransactionLink: jest.fn().mockResolvedValue(null),
+    on: jest.fn(),
+    eventCallbacks: [],
+    jwt: "",
+    defaultCacheAgeSeconds: 0,
+    lastPing: 0,
+    pingCheckRunning: false,
+    cache: null,
+    custodianApi: null,
+};
+describe("QredoCustodyKeyring", () => {
+    let custodyKeyring;
+    beforeEach(() => {
+        custodyKeyring = new QredoCustodyKeyring_1.QredoCustodyKeyring({
+            mmiConfigurationController: {
+                store: {
+                    getState: jest.fn().mockReturnValue({
+                        mmiConfiguration: {
+                            custodians: [
+                                {
+                                    apiUrl: "https://qredo-api.com",
+                                    envName: "qredo",
+                                },
+                            ],
+                        },
+                    }),
+                },
+            },
+        });
+        jest.clearAllMocks();
+        mockedMmiSdkFactory.mockReturnValue(mockMMISDK);
+    });
+    describe("getTransactionDeepLink", () => {
+        it("should resolve to null", async () => {
+            const mockSelectedAddresses = [
+                {
+                    name: "myCoolAccount1",
+                    address: "0x123456",
+                    custodianDetails: { wallet_id: "test" },
+                    labels: [{ key: "my-label", value: "my-label" }],
+                    token: "jwt",
+                    apiUrl: "https://qredo-api.com",
+                    chainId: 4,
+                    custodyType: "Qredo",
+                    envName: "qredo",
+                },
+            ];
+            custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+            custodyKeyring.addAccounts(1);
+            const result = await custodyKeyring.getTransactionDeepLink("0x123456", "12345");
+            expect(result).toEqual(null);
+        });
+    });
+    describe("getStatusMap", () => {
+        it("should return the status map", () => {
+            expect(custodyKeyring.getStatusMap()).toEqual(QredoStatusMap_1.QredoStatusMap);
+        });
+    });
+    describe("hashAuthDetails", () => {
+        it("should hash the refreshtoken together with the custodian API URL", () => {
+            const authDetails = {
+                refreshToken: "miaow",
+            };
+            const url = "https://qredo-api.com";
+            const envName = "qredo";
+            const hashMock = {
+                update: jest.fn().mockReturnThis(),
+                digest: jest.fn().mockReturnValueOnce("fake hash"),
+            };
+            const createHashMock = jest.spyOn(crypto_1.default, "createHash").mockImplementationOnce(() => hashMock);
+            const result = custodyKeyring.hashAuthDetails(authDetails, envName);
+            expect(createHashMock).toBeCalledWith("sha256");
+            expect(hashMock.update).toBeCalledWith(authDetails.refreshToken + url);
+            expect(hashMock.digest).toBeCalledWith("hex");
+            expect(result).toEqual("fake hash");
+        });
+    });
+    describe("createAuthDetails", () => {
+        it("should take a token and turn it into IRefreshTokenAuthDetails", () => {
+            const refreshToken = "token";
+            const result = custodyKeyring.createAuthDetails(refreshToken);
+            expect(result).toEqual({
+                refreshToken,
+            });
+        });
+    });
+});
+//# sourceMappingURL=QredoCustodyKeyring.test.js.map
\ No newline at end of file
diff --git a/dist/custodianTypes/qredo/QredoCustodyKeyring.test.js.map b/dist/custodianTypes/qredo/QredoCustodyKeyring.test.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..31c3338ded2aa56afbb7b60084ac72e069aa5238
--- /dev/null
+++ b/dist/custodianTypes/qredo/QredoCustodyKeyring.test.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"QredoCustodyKeyring.test.js","sourceRoot":"","sources":["../../../src/custodianTypes/qredo/QredoCustodyKeyring.test.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/custodianTypes/qredo/QredoStatusMap.d.ts.map b/dist/custodianTypes/qredo/QredoStatusMap.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..9c754106fce9f31ee59e7e1aa0e8f2911bce3701
--- /dev/null
+++ b/dist/custodianTypes/qredo/QredoStatusMap.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"QredoStatusMap.d.ts","sourceRoot":"","sources":["../../../src/custodianTypes/qredo/QredoStatusMap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAA+B,MAAM,+BAA+B,CAAC;AAInG,eAAO,MAAM,cAAc,EAAE,qBAqF5B,CAAC"}
\ No newline at end of file
diff --git a/dist/custodianTypes/qredo/QredoStatusMap.js.map b/dist/custodianTypes/qredo/QredoStatusMap.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..e505272dc6c997cb6805f8587f29219fe9bc13d5
--- /dev/null
+++ b/dist/custodianTypes/qredo/QredoStatusMap.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"QredoStatusMap.js","sourceRoot":"","sources":["../../../src/custodianTypes/qredo/QredoStatusMap.ts"],"names":[],"mappings":";;;AAAA,yDAAmG;AAItF,QAAA,cAAc,GAA0B;IACnD,OAAO,EAAE;QACP,QAAQ,EAAE,mCAA2B,CAAC,QAAQ;QAC9C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,KAAK;KAChB;IACD,OAAO,EAAE;QACP,QAAQ,EAAE,mCAA2B,CAAC,QAAQ;QAC9C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,KAAK;KAChB;IACD,QAAQ,EAAE;QACR,QAAQ,EAAE,mCAA2B,CAAC,QAAQ;QAC9C,SAAS,EAAE,YAAY;QACvB,QAAQ,EAAE,YAAY;QACtB,QAAQ,EAAE,KAAK;KAChB;IACD,UAAU,EAAE;QACV,QAAQ,EAAE,mCAA2B,CAAC,QAAQ;QAC9C,SAAS,EAAE,YAAY;QACvB,QAAQ,EAAE,YAAY;QACtB,QAAQ,EAAE,KAAK;KAChB;IACD,MAAM,EAAE;QACN,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,QAAQ;QACnB,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,KAAK;KAChB;IACD,SAAS,EAAE;QACT,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,WAAW;QACtB,QAAQ,EAAE,mBAAmB;QAC7B,QAAQ,EAAE,KAAK;KAChB;IACD,MAAM,EAAE;QACN,QAAQ,EAAE,mCAA2B,CAAC,SAAS;QAC/C,SAAS,EAAE,WAAW;QACtB,QAAQ,EAAE,mBAAmB;QAC7B,QAAQ,EAAE,KAAK;KAChB;IACD,KAAK,EAAE;QACL,QAAQ,EAAE,mCAA2B,CAAC,SAAS;QAC/C,SAAS,EAAE,OAAO;QAClB,QAAQ,EAAE,OAAO;QACjB,QAAQ,EAAE,IAAI;KACf;IACD,SAAS,EAAE;QACT,QAAQ,EAAE,mCAA2B,CAAC,SAAS;QAC/C,SAAS,EAAE,OAAO;QAClB,QAAQ,EAAE,OAAO;QACjB,QAAQ,EAAE,IAAI;KACf;IACD,SAAS,EAAE;QACT,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,IAAI;KACf;IACD,OAAO,EAAE;QACP,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,IAAI;KACf;IACD,QAAQ,EAAE;QACR,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,IAAI;KACf;IACD,MAAM,EAAE;QACN,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,QAAQ;QACnB,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,IAAI;KACf;IACD,OAAO,EAAE;QACP,QAAQ,EAAE,mCAA2B,CAAC,MAAM;QAC5C,SAAS,EAAE,QAAQ;QACnB,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,IAAI;KACf;CACF,CAAC"}
\ No newline at end of file
diff --git a/dist/index.d.ts.map b/dist/index.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..318c9e04dabd3185c32fc52d609fd8db2db0033f
--- /dev/null
+++ b/dist/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,kBAAkB,CAAC;AACnD,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AAC5D,OAAO,EAAE,iBAAiB,EAAE,MAAM,gCAAgC,CAAC;AACnE,OAAO,EAAE,0BAA0B,EAAE,MAAM,oBAAoB,CAAC;AAEhE,OAAO,EAAE,kCAAkC,EAAE,MAAM,iDAAiD,CAAC;AACrG,OAAO,EAAE,qBAAqB,EAAE,MAAM,gDAAgD,CAAC;AAGvF,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC"}
\ No newline at end of file
diff --git a/dist/index.js.map b/dist/index.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..278d358025f59d5993f80884b6b2b56e2a541447
--- /dev/null
+++ b/dist/index.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAAA,mDAAmD;AAA1C,iHAAA,eAAe,OAAA;AACxB,mDAAkD;AAAzC,gHAAA,cAAc,OAAA;AAGvB,uDAAgE;AAAvD,8HAAA,0BAA0B,OAAA;AAEnC,sGAAqG;AAA5F,wJAAA,kCAAkC,OAAA;AAC3C,wFAAuF;AAA9E,8HAAA,qBAAqB,OAAA;AAG9B,kDAAiD;AAAxC,oGAAA,QAAQ,OAAA;AACjB,2CAA0C;AAAjC,wGAAA,UAAU,OAAA"}
\ No newline at end of file
diff --git a/dist/interfaces/IConfiguration.d.ts.map b/dist/interfaces/IConfiguration.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..b7db0cd4782fbb9244e92625f6925de68868410b
--- /dev/null
+++ b/dist/interfaces/IConfiguration.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"IConfiguration.d.ts","sourceRoot":"","sources":["../../src/interfaces/IConfiguration.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD,MAAM,WAAW,cAAc;IAC7B,SAAS,EAAE;QACT,OAAO,EAAE,OAAO,CAAC;QACjB,GAAG,EAAE,MAAM,CAAC;QACZ,aAAa,EAAE,MAAM,EAAE,CAAC;KACzB,CAAC;IACF,QAAQ,EAAE;QACR,YAAY,EAAE,OAAO,CAAC;KACvB,CAAC;IACF,UAAU,EAAE,iBAAiB,EAAE,CAAC;CACjC"}
\ No newline at end of file
diff --git a/dist/interfaces/IConfiguration.js.map b/dist/interfaces/IConfiguration.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..4b534e00d8ab86422c0c7ab8f190e86a2c404828
--- /dev/null
+++ b/dist/interfaces/IConfiguration.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"IConfiguration.js","sourceRoot":"","sources":["../../src/interfaces/IConfiguration.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/interfaces/ICustodyKeyringOptions.d.ts.map b/dist/interfaces/ICustodyKeyringOptions.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..1dfa7747d6c9fe7c19de5489a786f9c177db2394
--- /dev/null
+++ b/dist/interfaces/ICustodyKeyringOptions.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"ICustodyKeyringOptions.d.ts","sourceRoot":"","sources":["../../src/interfaces/ICustodyKeyringOptions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAC;AAElE,OAAO,EAAE,0BAA0B,EAAE,MAAM,qBAAqB,CAAC;AAEjE,MAAM,WAAW,sBAAsB;IACrC,QAAQ,CAAC,EAAE,MAAM,EAAE,CAAC;IACpB,iBAAiB,CAAC,EAAE,iBAAiB,EAAE,CAAC;IACxC,eAAe,CAAC,EAAE,iBAAiB,EAAE,CAAC;IACtC,0BAA0B,CAAC,EAAE,0BAA0B,CAAC;CACzD"}
\ No newline at end of file
diff --git a/dist/interfaces/ICustodyKeyringOptions.js.map b/dist/interfaces/ICustodyKeyringOptions.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..6eae24f836f85941d0882d0987ce7362c6243504
--- /dev/null
+++ b/dist/interfaces/ICustodyKeyringOptions.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"ICustodyKeyringOptions.js","sourceRoot":"","sources":["../../src/interfaces/ICustodyKeyringOptions.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/interfaces/IJsonRpcCustodian.d.ts.map b/dist/interfaces/IJsonRpcCustodian.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..b0ce91870b483d3d11a11835d001e75ff5a9f671
--- /dev/null
+++ b/dist/interfaces/IJsonRpcCustodian.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"IJsonRpcCustodian.d.ts","sourceRoot":"","sources":["../../src/interfaces/IJsonRpcCustodian.ts"],"names":[],"mappings":"AAAA,UAAU,YAAY;IACpB,eAAe,EAAE,MAAM,CAAC;IACxB,IAAI,EAAE,MAAM,CAAC;IACb,WAAW,EAAE,MAAM,CAAC;IACpB,OAAO,EAAE,OAAO,CAAC;IACjB,eAAe,EAAE,MAAM,CAAC;IACxB,UAAU,EAAE,MAAM,CAAC;IACnB,UAAU,EAAE,MAAM,CAAC;IACnB,OAAO,EAAE,MAAM,CAAC;IAChB,uBAAuB,EAAE,OAAO,CAAC;IACjC,6BAA6B,EAAE,OAAO,CAAC;CACxC;AAED,MAAM,WAAW,iBAAiB;IAChC,EAAE,EAAE,MAAM,CAAC;IACX,QAAQ,EAAE,MAAM,CAAC;IACjB,IAAI,EAAE,MAAM,CAAC;IACb,WAAW,EAAE,MAAM,CAAC;IACpB,OAAO,EAAE,MAAM,CAAC;IAChB,OAAO,EAAE,MAAM,CAAC;IAChB,aAAa,EAAE,MAAM,CAAC;IACtB,OAAO,EAAE,OAAO,CAAC;IACjB,UAAU,EAAE,MAAM,CAAC;IACnB,WAAW,EAAE,MAAM,CAAC;IACpB,OAAO,EAAE,MAAM,CAAC;IAChB,eAAe,EAAE,MAAM,CAAC;IACxB,eAAe,EAAE,MAAM,CAAC;IACxB,YAAY,EAAE,YAAY,EAAE,CAAC;CAC9B"}
\ No newline at end of file
diff --git a/dist/interfaces/IJsonRpcCustodian.js.map b/dist/interfaces/IJsonRpcCustodian.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..43118093ddd19956b97e8d6cd92c3ee52baa484a
--- /dev/null
+++ b/dist/interfaces/IJsonRpcCustodian.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"IJsonRpcCustodian.js","sourceRoot":"","sources":["../../src/interfaces/IJsonRpcCustodian.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/interfaces/IMigration.d.ts.map b/dist/interfaces/IMigration.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..301bfac9a4dc60984a6fc7af2728c9d66fd81ebc
--- /dev/null
+++ b/dist/interfaces/IMigration.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"IMigration.d.ts","sourceRoot":"","sources":["../../src/interfaces/IMigration.ts"],"names":[],"mappings":"AAAA,MAAM,WAAW,UAAU;IACzB,OAAO,EAAE,MAAM,CAAC;IAChB,oBAAoB,EAAE,MAAM,EAAE,CAAC;IAC/B,OAAO,CAAC,aAAa,EAAE,GAAG,GAAG,GAAG,CAAC;CAClC"}
\ No newline at end of file
diff --git a/dist/interfaces/IMigration.js.map b/dist/interfaces/IMigration.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..e15f86a2f071460478addc655b0429105d851860
--- /dev/null
+++ b/dist/interfaces/IMigration.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"IMigration.js","sourceRoot":"","sources":["../../src/interfaces/IMigration.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/interfaces/IMigratorOptions.d.ts.map b/dist/interfaces/IMigratorOptions.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..dceeacf98f72ecec4f36250219a8dd05914d16ff
--- /dev/null
+++ b/dist/interfaces/IMigratorOptions.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"IMigratorOptions.d.ts","sourceRoot":"","sources":["../../src/interfaces/IMigratorOptions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAE1C,MAAM,WAAW,gBAAgB;IAC/B,UAAU,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;IAC9B,cAAc,CAAC,EAAE,MAAM,CAAC;CACzB"}
\ No newline at end of file
diff --git a/dist/interfaces/IMigratorOptions.js.map b/dist/interfaces/IMigratorOptions.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..6116ee40cafb4d14ff201abe8be5c2032fdf6614
--- /dev/null
+++ b/dist/interfaces/IMigratorOptions.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"IMigratorOptions.js","sourceRoot":"","sources":["../../src/interfaces/IMigratorOptions.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/interfaces/IMmiConfigurationControllerOptions.d.ts.map b/dist/interfaces/IMmiConfigurationControllerOptions.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..1ff8fcc1c17907961e6c6901397567402ab22ede
--- /dev/null
+++ b/dist/interfaces/IMmiConfigurationControllerOptions.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"IMmiConfigurationControllerOptions.d.ts","sourceRoot":"","sources":["../../src/interfaces/IMmiConfigurationControllerOptions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD,qBAAa,kCAAkC;IAC7C,0BAA0B,CAAC,EAAE,MAAM,CAAC;IACpC,SAAS,CAAC,EAAE;QACV,gBAAgB,EAAE;YAChB,SAAS,EAAE;gBACT,OAAO,EAAE,OAAO,CAAC;gBACjB,GAAG,EAAE,MAAM,CAAC;aACb,CAAC;YACF,QAAQ,EAAE;gBACR,YAAY,EAAE,OAAO,CAAC;aACvB,CAAC;YACF,UAAU,EAAE,iBAAiB,EAAE,CAAC;SACjC,CAAC;KACH,CAAC;CACH"}
\ No newline at end of file
diff --git a/dist/interfaces/IMmiConfigurationControllerOptions.js.map b/dist/interfaces/IMmiConfigurationControllerOptions.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..12d59f30b459c11c32b3e4d90353966a9797d76d
--- /dev/null
+++ b/dist/interfaces/IMmiConfigurationControllerOptions.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"IMmiConfigurationControllerOptions.js","sourceRoot":"","sources":["../../src/interfaces/IMmiConfigurationControllerOptions.ts"],"names":[],"mappings":";;;AAEA,MAAa,kCAAkC;CAc9C;AAdD,gFAcC"}
\ No newline at end of file
diff --git a/dist/interfaces/ISerializedKeyring.d.ts.map b/dist/interfaces/ISerializedKeyring.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..122ac6895d6e9f62e1d561913d8e81a1973e4ccf
--- /dev/null
+++ b/dist/interfaces/ISerializedKeyring.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"ISerializedKeyring.d.ts","sourceRoot":"","sources":["../../src/interfaces/ISerializedKeyring.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAC;AAElE,MAAM,WAAW,kBAAkB;IACjC,QAAQ,EAAE,MAAM,EAAE,CAAC;IACnB,iBAAiB,EAAE,iBAAiB,EAAE,CAAC;IACvC,eAAe,EAAE,iBAAiB,EAAE,CAAC;IACrC,IAAI,EAAE;QAAE,OAAO,CAAC,EAAE,MAAM,CAAA;KAAE,CAAC;CAC5B"}
\ No newline at end of file
diff --git a/dist/interfaces/ISerializedKeyring.js.map b/dist/interfaces/ISerializedKeyring.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..cdf184f5b0a0aaf7ec52e779349e1fb04ddb36ff
--- /dev/null
+++ b/dist/interfaces/ISerializedKeyring.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"ISerializedKeyring.js","sourceRoot":"","sources":["../../src/interfaces/ISerializedKeyring.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/migrations/001.d.ts.map b/dist/migrations/001.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..258156854cd8a1090371c17da1f83529ec3e841a
--- /dev/null
+++ b/dist/migrations/001.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"001.d.ts","sourceRoot":"","sources":["../../src/migrations/001.ts"],"names":[],"mappings":";;;;;AAQA,wBAiBE"}
\ No newline at end of file
diff --git a/dist/migrations/001.js.map b/dist/migrations/001.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..4bdbfb817a04fe89e151980e45335e31d1181a17
--- /dev/null
+++ b/dist/migrations/001.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"001.js","sourceRoot":"","sources":["../../src/migrations/001.ts"],"names":[],"mappings":";;;;;AAAA,yDAA0D;AAC1D,wEAAyC;AAIzC,MAAM,OAAO,GAAG,CAAC,CAAC;AAClB,MAAM,oBAAoB,GAAG,EAAE,CAAC;AAEhC,kBAAe;IACb,OAAO;IACP,oBAAoB;IACpB,OAAO,CAAC,OAAO;;QACb,IAAI,gBAAgB,GAAQ,EAAE,CAAC;QAC/B,IAAI,oBAAoB,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC/C,gBAAgB,GAAG,IAAA,0BAAS,EAAC,OAAO,CAAC,CAAC;YACtC,IAAI,CAAA,MAAA,gBAAgB,CAAC,IAAI,0CAAE,OAAO,MAAK,OAAO,EAAE;gBAC9C,gBAAgB,CAAC,IAAI,GAAG;oBACtB,OAAO;iBACR,CAAC;gBACF,MAAM,UAAU,GAAG,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;gBACtD,gBAAgB,GAAG,UAAU,CAAC;aAC/B;SACF;QACD,OAAO,gBAAgB,IAAI,OAAO,CAAC;IACrC,CAAC;CACF,CAAC;AAEF,SAAS,gBAAgB,CAAC,OAAY;IACpC,OAAO,OAAO,CAAC,GAAG,CAAC;IACnB,OAAO,OAAO,CAAC,KAAK,CAAC;IAErB,MAAM,aAAa,GAAI,OAA0B,CAAC,aAAa,CAAC,MAAM,CAAC;IAEvE,OAAO,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;;QAAC,OAAA,CAAC;YAChE,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;YAC1C,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,aAAa;YACvC,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,WAAW,EACT,OAAO,CAAC,QAAQ,KAAK,iBAAS,CAAC,aAAa;gBAC1C,CAAC,CAAC;oBACE,YAAY,EAAE,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,KAAK,KAAI,MAAA,OAAO,CAAC,WAAW,0CAAE,YAAY,CAAA;iBAChF;gBACH,CAAC,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,KAAK,KAAI,MAAA,OAAO,CAAC,WAAW,0CAAE,GAAG,CAAA,EAAE;SACxE,CAAC,CAAA;KAAA,CAAC,CAAC;IACJ,OAAO,OAAO,CAAC;AACjB,CAAC"}
\ No newline at end of file
diff --git a/dist/migrations/001.test.d.ts b/dist/migrations/001.test.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..c601bcf725ed3a5c0d6c7d0be16dc58e2ed401ae
--- /dev/null
+++ b/dist/migrations/001.test.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=001.test.d.ts.map
\ No newline at end of file
diff --git a/dist/migrations/001.test.d.ts.map b/dist/migrations/001.test.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..564cec85c721513aafd3b821aaef9ae1660a5a24
--- /dev/null
+++ b/dist/migrations/001.test.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"001.test.d.ts","sourceRoot":"","sources":["../../src/migrations/001.test.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/migrations/001.test.js b/dist/migrations/001.test.js
new file mode 100644
index 0000000000000000000000000000000000000000..6b81a5120ac96dddd9426bd25e411bfaf0f2fdd2
--- /dev/null
+++ b/dist/migrations/001.test.js
@@ -0,0 +1,37 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const types_1 = require("@metamask-institutional/types");
+const __1 = require("..");
+const _001_1 = __importDefault(require("./001"));
+describe("migration #1", function () {
+    it("should add authDetails to keyrings accountDetails", function (done) {
+        const data = {
+            custodianType: __1.CUSTODIAN_TYPES.JUPITER,
+            type: "Custody - Curv",
+            authType: types_1.AuthTypes.TOKEN,
+            meta: { version: 0 },
+            jwt: "jwt1",
+            accountsDetails: [{ jwt: "jwt1" }],
+        };
+        const migratedData = _001_1.default.migrate(data);
+        expect(migratedData.accountsDetails[0].authDetails.jwt).toBe("jwt1");
+        done();
+    });
+    it("should add the default API URL", function (done) {
+        const data = {
+            custodianType: __1.CUSTODIAN_TYPES.JUPITER,
+            type: "Custody - Curv",
+            authType: types_1.AuthTypes.TOKEN,
+            meta: { version: 0 },
+            jwt: "jwt1",
+            accountsDetails: [{ jwt: "jwt1" }],
+        };
+        const migratedData = _001_1.default.migrate(data);
+        expect(migratedData.accountsDetails[0].apiUrl).toBe(data.custodianType.apiUrl);
+        done();
+    });
+});
+//# sourceMappingURL=001.test.js.map
\ No newline at end of file
diff --git a/dist/migrations/001.test.js.map b/dist/migrations/001.test.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..291d3987c340e3dc19175363e1a06ebca2a4e53a
--- /dev/null
+++ b/dist/migrations/001.test.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"001.test.js","sourceRoot":"","sources":["../../src/migrations/001.test.ts"],"names":[],"mappings":";;;;;AAAA,yDAA0D;AAE1D,0BAAqC;AACrC,iDAA+B;AAE/B,QAAQ,CAAC,cAAc,EAAE;IACvB,EAAE,CAAC,mDAAmD,EAAE,UAAU,IAAI;QACpE,MAAM,IAAI,GAAG;YACX,aAAa,EAAE,mBAAe,CAAC,OAAO;YACtC,IAAI,EAAE,gBAAgB;YACtB,QAAQ,EAAE,iBAAS,CAAC,KAAK;YACzB,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE;YACpB,GAAG,EAAE,MAAM;YACX,eAAe,EAAE,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;SACnC,CAAC;QACF,MAAM,YAAY,GAAG,cAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrE,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,UAAU,IAAI;QACjD,MAAM,IAAI,GAAG;YACX,aAAa,EAAE,mBAAe,CAAC,OAAO;YACtC,IAAI,EAAE,gBAAgB;YACtB,QAAQ,EAAE,iBAAS,CAAC,KAAK;YACzB,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE;YACpB,GAAG,EAAE,MAAM;YACX,eAAe,EAAE,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;SACnC,CAAC;QACF,MAAM,YAAY,GAAG,cAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC/E,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC"}
\ No newline at end of file
diff --git a/dist/migrations/index.d.ts.map b/dist/migrations/index.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..af14cccaf3a0582eb5a16fa1620e78ea5efdf231
--- /dev/null
+++ b/dist/migrations/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/migrations/index.ts"],"names":[],"mappings":"AAKA,eAAO,MAAM,UAAU;;;;GAAS,CAAC"}
\ No newline at end of file
diff --git a/dist/migrations/index.js.map b/dist/migrations/index.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..ff891fc810765600b5550a8178247272379bb95c
--- /dev/null
+++ b/dist/migrations/index.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/migrations/index.ts"],"names":[],"mappings":";;;;;;AAGA,iDAAyB;AAEZ,QAAA,UAAU,GAAG,CAAC,cAAI,CAAC,CAAC"}
\ No newline at end of file
diff --git a/dist/migrations/migrator.d.ts.map b/dist/migrations/migrator.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..807f278cbb1470352d1648d2b28c36c0cdb150a3
--- /dev/null
+++ b/dist/migrations/migrator.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"migrator.d.ts","sourceRoot":"","sources":["../../src/migrations/migrator.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AAEtC,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AACtD,OAAO,EAAE,gBAAgB,EAAE,MAAM,gCAAgC,CAAC;AAElE,qBAAa,QAAS,SAAQ,YAAY;IACjC,UAAU,EAAE,UAAU,EAAE,CAAC;IACzB,cAAc,EAAE,MAAM,CAAC;gBAElB,IAAI,EAAE,gBAAgB;IAYlC,WAAW,CAAC,gBAAgB,MAA8B;IAyC1D,oBAAoB,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG;CAQtC"}
\ No newline at end of file
diff --git a/dist/migrations/migrator.js.map b/dist/migrations/migrator.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..b42e918ec06b097ed29b4584e10bb3351bb9b062
--- /dev/null
+++ b/dist/migrations/migrator.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"migrator.js","sourceRoot":"","sources":["../../src/migrations/migrator.ts"],"names":[],"mappings":";;;AAAA,mCAAsC;AAKtC,MAAa,QAAS,SAAQ,qBAAY;IAIxC,YAAY,IAAsB;QAChC,KAAK,EAAE,CAAC;QACR,MAAM,UAAU,GAAG,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,UAAU,KAAI,EAAE,CAAC;QAE1C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;QAEnE,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEnD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,IAAI,CAAC,aAAa,IAAI,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC7F,CAAC;IAGD,WAAW,CAAC,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,EAAE;QACxD,MAAM,kBAAkB,GAAG,SAAS,CAAC,EAAE,CACrC,SAAS,CAAC,oBAAoB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC;YAC9D,CAAC,CAAC,gBAAgB,CAAC,IAAI,IAAI,gBAAgB,CAAC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;QAEhF,MAAM,iBAAiB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;QAGrE,KAAK,MAAM,SAAS,IAAI,iBAAiB,EAAE;YACzC,IAAI;gBAEF,MAAM,eAAe,GAAG,SAAS,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;gBAC5D,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE;oBACzB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;iBACjE;gBACD,IAAI,eAAe,CAAC,IAAI,CAAC,OAAO,KAAK,SAAS,CAAC,OAAO,EAAE;oBACtD,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;iBACrF;gBAGD,gBAAgB,GAAG,eAAe,CAAC;aACpC;YAAC,OAAO,GAAG,EAAE;gBAEZ,MAAM,oBAAoB,GAAG,GAAG,CAAC,OAAO,CAAC;gBACzC,GAAG,CAAC,OAAO,GAAG,2CAA2C,SAAS,CAAC,OAAO,KAAK,oBAAoB,EAAE,CAAC;gBAEtG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;gBAExB,OAAO,gBAAgB,CAAC;aACzB;SACF;QAED,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAQD,oBAAoB,CAAC,IAAU;QAC7B,OAAO;YACL,IAAI,EAAE;gBACJ,OAAO,EAAE,IAAI,CAAC,cAAc;aAC7B;YACD,IAAI;SACL,CAAC;IACJ,CAAC;CACF;AAjED,4BAiEC"}
\ No newline at end of file
diff --git a/dist/migrations/migrator.test.d.ts b/dist/migrations/migrator.test.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..f3033fa0a3ea487e396ae95a615305045b5f121b
--- /dev/null
+++ b/dist/migrations/migrator.test.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=migrator.test.d.ts.map
\ No newline at end of file
diff --git a/dist/migrations/migrator.test.d.ts.map b/dist/migrations/migrator.test.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..fb1aaac855826d901a180cf5809a64a919b9cb8d
--- /dev/null
+++ b/dist/migrations/migrator.test.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"migrator.test.d.ts","sourceRoot":"","sources":["../../src/migrations/migrator.test.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/migrations/migrator.test.js b/dist/migrations/migrator.test.js
new file mode 100644
index 0000000000000000000000000000000000000000..ecd007700ef359a25924a7379eab7183f67b1697
--- /dev/null
+++ b/dist/migrations/migrator.test.js
@@ -0,0 +1,118 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const types_1 = require("@metamask-institutional/types");
+const assert_1 = require("assert");
+const fs_1 = __importDefault(require("fs"));
+const lodash_clonedeep_1 = __importDefault(require("lodash.clonedeep"));
+const _1 = require(".");
+const __1 = require("..");
+const migrator_1 = require("./migrator");
+const stubMigrations = [
+    {
+        version: 1,
+        keyringTypesToChange: ["Custody - Test", "Custody - Jupiter"],
+        migrate: state => {
+            const clonedData = (0, lodash_clonedeep_1.default)(state);
+            clonedData.meta = {
+                version: 1,
+            };
+            return clonedData;
+        },
+    },
+    {
+        version: 2,
+        keyringTypesToChange: ["Custody - Test", "Custody - Jupiter"],
+        migrate: state => {
+            const clonedData = (0, lodash_clonedeep_1.default)(state);
+            clonedData.meta = {
+                version: 2,
+            };
+            return clonedData;
+        },
+    },
+    {
+        version: 3,
+        keyringTypesToChange: ["Custody - Test", "Custody - Jupiter"],
+        migrate: state => {
+            const clonedData = (0, lodash_clonedeep_1.default)(state);
+            clonedData.meta = {
+                version: 3,
+            };
+            return clonedData;
+        },
+    },
+];
+const versionedData = {
+    type: "Custody - Test",
+    authType: types_1.AuthTypes.TOKEN,
+    meta: { version: 0 },
+    jwt: "jwt0",
+    accountsDetails: [{ jwt: "jwt0" }],
+};
+describe("migrations", function () {
+    describe("liveMigrations require list", function () {
+        let migrationNumbers;
+        beforeAll(function () {
+            const fileNames = fs_1.default.readdirSync("./src/migrations/");
+            migrationNumbers = fileNames
+                .reduce((acc = [], filename) => {
+                const name = filename.split(".")[0];
+                if (/^\d+$/u.test(name)) {
+                    acc.push(name);
+                }
+                return acc;
+            }, [])
+                .map(num => parseInt(num, 10));
+        });
+        it("should include all migrations", function () {
+            migrationNumbers.forEach(num => {
+                const migration = _1.migrations.find(m => m.version === num);
+                (0, assert_1.strict)(migration, `migration not included in 'migrations/index.js': ${num}`);
+            });
+        });
+        it("should have tests for all migrations", function () {
+            const fileNames = fs_1.default.readdirSync("./src/migrations/");
+            const testNumbers = fileNames
+                .reduce((acc = [], filename) => {
+                const name = filename.split(".test.")[0];
+                if (/^\d+$/u.test(name)) {
+                    acc.push(name);
+                }
+                return acc;
+            }, [])
+                .map(num => parseInt(num, 10));
+            migrationNumbers.forEach(num => {
+                if (num >= 33) {
+                    assert_1.strict.ok(testNumbers.includes(num), `no test found for migration: ${num}`);
+                }
+            });
+        });
+    });
+    describe("Migrator", function () {
+        it("migratedData version should be version 3", async function () {
+            const migrator = new migrator_1.Migrator({ migrations: stubMigrations });
+            const migratedData = await migrator.migrateData(versionedData);
+            assert_1.strict.equal(migratedData.meta.version, stubMigrations[2].version);
+        });
+        it("should match the last version in live migrations", async function () {
+            const migrator = new migrator_1.Migrator({ migrations: _1.migrations });
+            const keyring = {
+                type: "Custody - Jupiter",
+                custodianType: __1.CUSTODIAN_TYPES.JUPITER,
+                authType: types_1.AuthTypes.TOKEN,
+                accountsDetails: [
+                    {
+                        jwt: "jwt1",
+                    },
+                ],
+            };
+            const migratedKeyring = migrator.migrateData(keyring);
+            const last = _1.migrations.length - 1;
+            assert_1.strict.equal(migratedKeyring.meta.version, _1.migrations[last].version);
+        });
+    });
+});
+//# sourceMappingURL=migrator.test.js.map
\ No newline at end of file
diff --git a/dist/migrations/migrator.test.js.map b/dist/migrations/migrator.test.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..decf3feadfaaf1abdf5b0b2a41fca237a0078044
--- /dev/null
+++ b/dist/migrations/migrator.test.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"migrator.test.js","sourceRoot":"","sources":["../../src/migrations/migrator.test.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/package.json b/dist/package.json
index b03226039a6140eeeddd00f78ff48a2f7571a2c7..1e43a9c058f42fa90ddcb2f2db77ded663bd2296 100644
--- a/dist/package.json
+++ b/dist/package.json
@@ -27,7 +27,7 @@
   "bugs": {
     "url": "https://github.com/consensys-vertical-apps/metamask-institutional/issues"
   },
-  "gitHead": "31af65fe04a1e975545502d4795e6d5b383fe964",
+  "gitHead": "62ed7639b9145658a4fa1273e35e99d300acdc99",
   "dependencies": {
     "@ethereumjs/tx": "^4.1.1",
     "@ethereumjs/util": "^8.0.5",
diff --git a/dist/types/MMIConfiguration.d.ts.map b/dist/types/MMIConfiguration.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..c264cc8f96c5ddfbae7d122db8c5ddeb6c5d89a6
--- /dev/null
+++ b/dist/types/MMIConfiguration.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"MMIConfiguration.d.ts","sourceRoot":"","sources":["../../src/types/MMIConfiguration.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,iCAAiC,CAAC;AAEpE,MAAM,MAAM,gBAAgB,GAAG;IAC7B,gBAAgB,EAAE;QAChB,SAAS,EAAE;YACT,OAAO,EAAE,OAAO,CAAC;YACjB,GAAG,EAAE,MAAM,CAAC;SACb,CAAC;QACF,QAAQ,EAAE;YACR,YAAY,EAAE,OAAO,CAAC;SACvB,CAAC;QACF,UAAU,EAAE,iBAAiB,EAAE,CAAC;KACjC,CAAC;CACH,CAAC"}
\ No newline at end of file
diff --git a/dist/types/MMIConfiguration.js.map b/dist/types/MMIConfiguration.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..1f865002cb535251e1fff8a4abce1233fa5a36dd
--- /dev/null
+++ b/dist/types/MMIConfiguration.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"MMIConfiguration.js","sourceRoot":"","sources":["../../src/types/MMIConfiguration.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/src/CustodyKeyring.ts b/src/CustodyKeyring.ts
index 097bde18cd429bd12774f0132d6220ac5e2b1ada..49c08757add56b88de561afae8467dff8faa1759 100644
--- a/src/CustodyKeyring.ts
+++ b/src/CustodyKeyring.ts
@@ -38,7 +38,7 @@ import { MmiConfigurationController } from "./MmiConfiguration";
 export type UniqueAccountDetails = {
   hash: string;
   authDetails: AuthDetails;
-  apiUrl: string;
+  envName: string;
 };
 
 export abstract class CustodyKeyring extends EventEmitter {
@@ -61,7 +61,7 @@ export abstract class CustodyKeyring extends EventEmitter {
   // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
   abstract txDeepLink(custodianDetails: any, txId: string): Promise<Partial<ICustodianTransactionLink> | null>;
 
-  abstract sdkFactory(authDetails: AuthDetails, apiUrl: string): MMISDK;
+  abstract sdkFactory(authDetails: AuthDetails, envName: string): MMISDK;
 
   protected sdkList: { sdk: MMISDK; hash: string }[];
 
@@ -76,7 +76,7 @@ export abstract class CustodyKeyring extends EventEmitter {
   }
 
   getUniqueAccountDetails(account: ICustodianAccount<AuthDetails>): string {
-    return this.hashAuthDetails(account.authDetails, account.apiUrl);
+    return this.hashAuthDetails(account.authDetails, account.envName);
   }
 
   serialize(): Promise<ISerializedKeyring> {
@@ -109,6 +109,21 @@ export abstract class CustodyKeyring extends EventEmitter {
       this.selectedAddresses = migratedOpts.selectedAddresses || [];
       this.accountsDetails = migratedOpts.accountsDetails || [];
       this.meta = migratedOpts.meta || {};
+
+      // TODO - This might be moved to a migration
+      const custodians = this.getCustodians();
+      this.accountsDetails
+        .filter(account => !account.envName)
+        .forEach(account => {
+          account.envName = custodians.find(c => c.apiUrl === account.apiUrl)?.envName;
+        });
+
+      this.selectedAddresses
+        .filter(account => !account.envName)
+        .forEach(account => {
+          account.envName = custodians.find(c => c.apiUrl === account.apiUrl)?.envName;
+        });
+
       const uniqueAuthDetails: UniqueAccountDetails[] = this.accountsDetails.reduce(
         (result: UniqueAccountDetails[], details) => {
           const hash = this.getUniqueAccountDetails(details);
@@ -116,14 +131,19 @@ export abstract class CustodyKeyring extends EventEmitter {
             result.push({
               hash,
               authDetails: details.authDetails,
-              apiUrl: details.apiUrl,
+              envName: details.envName,
             });
           }
           return result;
         },
         [],
       );
-      uniqueAuthDetails.forEach(item => this.getSDK(item.authDetails, item.apiUrl));
+      uniqueAuthDetails.forEach(item => this.getSDK(item.authDetails, item.envName));
+
+      console.log("DESERIALIZED DETAILS", {
+        initial: opts,
+        migrated: migratedOpts,
+      });
 
       resolve();
     });
@@ -161,7 +181,7 @@ export abstract class CustodyKeyring extends EventEmitter {
           this.accounts.push(address);
 
           // Ensure the SDK is available as soon as the account is added
-          this.getSDK(selectedAccountDetails.authDetails, selectedAccountDetails.apiUrl);
+          this.getSDK(selectedAccountDetails.authDetails, selectedAccountDetails.envName);
         }
       }
       resolve(this.accounts);
@@ -177,7 +197,8 @@ export abstract class CustodyKeyring extends EventEmitter {
     this.accountsDetails = this.accountsDetails.filter(a => a.address.toLowerCase() !== address.toLowerCase());
   }
 
-  hashAuthDetails(authDetails: AuthDetails, apiUrl: string): string {
+  hashAuthDetails(authDetails: AuthDetails, envName: string): string {
+    const { apiUrl } = this.getCustodianFromEnvName(envName);
     let identifier: string;
 
     if ((authDetails as ITokenAuthDetails).jwt) {
@@ -191,24 +212,26 @@ export abstract class CustodyKeyring extends EventEmitter {
 
   // This is for "top-down" token refreshes (from the extension)
   // This allows the API URL to be changed
-  replaceRefreshTokenAuthDetails(address: string, newAuthDetails: IRefreshTokenAuthDetails): void {
-    const { authDetails, apiUrl } = this.getAccountDetails(address);
-    const sdk = this.getSDK(authDetails, apiUrl);
+  replaceRefreshTokenAuthDetails(address: string, refreshToken: string): void {
+    const { authDetails, envName } = this.getAccountDetails(address);
+    const sdk = this.getSDK(authDetails, envName);
 
-    sdk.changeRefreshTokenAuthDetails(newAuthDetails);
+    sdk.changeRefreshTokenAuthDetails({
+      refreshToken,
+    });
   }
 
-  updateAccountsDetailsWithNewRefreshToken(oldRefreshToken: string, newRefreshToken: string, oldApiUrl: string) {
+  updateAccountsDetailsWithNewRefreshToken(oldRefreshToken: string, newRefreshToken: string, envName: string) {
     for (const account of this.accountsDetails) {
       const authDetails = account.authDetails as IRefreshTokenAuthDetails;
-      if ((authDetails as IRefreshTokenAuthDetails).refreshToken === oldRefreshToken && account.apiUrl === oldApiUrl) {
+      if ((authDetails as IRefreshTokenAuthDetails).refreshToken === oldRefreshToken && account.envName === envName) {
         authDetails.refreshToken = newRefreshToken;
       }
     }
   }
 
-  handleRefreshTokenChangeEvent(event: IRefreshTokenChangeEvent, apiUrl: string): void {
-    this.updateAccountsDetailsWithNewRefreshToken(event.oldRefreshToken, event.newRefreshToken, apiUrl);
+  handleRefreshTokenChangeEvent(event: IRefreshTokenChangeEvent, envName: string): void {
+    this.updateAccountsDetailsWithNewRefreshToken(event.oldRefreshToken, event.newRefreshToken, envName);
 
     const payload: IRefreshTokenChangeEvent = {
       oldRefreshToken: event.oldRefreshToken,
@@ -238,8 +261,8 @@ export abstract class CustodyKeyring extends EventEmitter {
     return authDetails;
   }
 
-  getSDK(authDetails: AuthDetails, apiUrl?: string): MMISDK {
-    const hash = this.hashAuthDetails(authDetails, apiUrl);
+  getSDK(authDetails: AuthDetails, envName: string): MMISDK {
+    const hash = this.hashAuthDetails(authDetails, envName);
 
     // Interesting thing - this will create a new SDK if the auth details are changed
     // What are the possible effects of this?
@@ -250,10 +273,10 @@ export abstract class CustodyKeyring extends EventEmitter {
       return found.sdk;
     }
 
-    const sdk = this.sdkFactory(authDetails, apiUrl);
+    const sdk = this.sdkFactory(authDetails, envName);
 
     sdk.on(REFRESH_TOKEN_CHANGE_EVENT, (event: IRefreshTokenChangeEvent) =>
-      this.handleRefreshTokenChangeEvent(event, apiUrl),
+      this.handleRefreshTokenChangeEvent(event, envName),
     );
 
     sdk.on(INTERACTIVE_REPLACEMENT_TOKEN_CHANGE_EVENT, (event: IInteractiveRefreshTokenChangeEvent) =>
@@ -268,14 +291,15 @@ export abstract class CustodyKeyring extends EventEmitter {
     return sdk;
   }
 
+  // TODO (Bernardo) - Ensure extension sends envName and no apiUrl
   async getCustodianAccounts(
     token: string,
-    apiUrl: string,
+    envName: string,
     searchText?: string,
     getNonImportedAccounts = true,
   ): Promise<ICustodianAccount<AuthDetails>[]> {
     const authDetails = this.createAuthDetails(token);
-    const sdk = this.getSDK(authDetails, apiUrl);
+    const sdk = this.getSDK(authDetails, envName);
 
     let accounts;
     if (searchText) {
@@ -334,8 +358,8 @@ export abstract class CustodyKeyring extends EventEmitter {
       data = "0x" + data;
     }
 
-    const { authDetails, apiUrl } = this.getAccountDetails(fromAddress);
-    const sdk = this.getSDK(authDetails, apiUrl);
+    const { authDetails, envName } = this.getAccountDetails(fromAddress);
+    const sdk = this.getSDK(authDetails, envName);
 
     const noGasPayload: any = {
       from: toChecksumAddress(fromAddress),
@@ -404,8 +428,8 @@ export abstract class CustodyKeyring extends EventEmitter {
       return null;
     }
 
-    const { authDetails, apiUrl } = this.getAccountDetails(from);
-    const sdk = this.getSDK(authDetails, apiUrl);
+    const { authDetails, envName } = this.getAccountDetails(from);
+    const sdk = this.getSDK(authDetails, envName);
     const tx = await sdk.getTransaction(toChecksumAddress(from), txCustodyId);
     return tx;
   }
@@ -425,8 +449,8 @@ export abstract class CustodyKeyring extends EventEmitter {
       return null;
     }
 
-    const { authDetails, apiUrl } = this.getAccountDetails(address);
-    const sdk = this.getSDK(authDetails, apiUrl);
+    const { authDetails, envName } = this.getAccountDetails(address);
+    const sdk = this.getSDK(authDetails, envName);
 
     const signature = await sdk.getSignature(toChecksumAddress(address), signatureId);
 
@@ -434,8 +458,8 @@ export abstract class CustodyKeyring extends EventEmitter {
   }
 
   async signPersonalMessage(address: string, message: string, opts: any): Promise<ITransactionDetails> {
-    const { authDetails, apiUrl } = this.getAccountDetails(address);
-    const sdk = this.getSDK(authDetails, apiUrl);
+    const { authDetails, envName } = this.getAccountDetails(address);
+    const sdk = this.getSDK(authDetails, envName);
 
     const signedMessageMetadata = {
       chainId: null,
@@ -468,8 +492,8 @@ export abstract class CustodyKeyring extends EventEmitter {
   abstract getStatusMap(): ITransactionStatusMap;
 
   async getCustomerProof(address: string): Promise<string> {
-    const { authDetails, apiUrl } = this.getAccountDetails(address);
-    const sdk = this.getSDK(authDetails, apiUrl);
+    const { authDetails, envName } = this.getAccountDetails(address);
+    const sdk = this.getSDK(authDetails, envName);
 
     return sdk.getCustomerProof();
   }
@@ -481,8 +505,8 @@ export abstract class CustodyKeyring extends EventEmitter {
       this.emit("error", "Only signedTypedData_v4 and signedTypedData_v3 is supported");
     }
 
-    const { authDetails, apiUrl } = this.getAccountDetails(address);
-    const sdk = this.getSDK(authDetails, apiUrl);
+    const { authDetails, envName } = this.getAccountDetails(address);
+    const sdk = this.getSDK(authDetails, envName);
 
     const signedTypedMessageMetadata = {
       chainId: null,
@@ -494,8 +518,42 @@ export abstract class CustodyKeyring extends EventEmitter {
   }
 
   getSupportedChains(address: string): Promise<string[]> {
-    const { authDetails, apiUrl } = this.getAccountDetails(address);
-    const sdk = this.getSDK(authDetails, apiUrl);
+    const { authDetails, envName } = this.getAccountDetails(address);
+    const sdk = this.getSDK(authDetails, envName);
     return sdk.getSupportedChains(address);
   }
+
+  protected getCustodians(): {
+    type: string;
+    name: string;
+    onboardingUrl: string;
+    website: string;
+    envName: string;
+    apiUrl: string;
+    apiVersion: string;
+    iconUrl: string;
+    displayName: string;
+    websocketApiUrl: any;
+    production: boolean;
+    refreshTokenUrl: any;
+    isNoteToTraderSupported: boolean;
+    custodianPublishesTransaction: boolean;
+    version: number;
+  }[] {
+    const {
+      mmiConfiguration: { custodians },
+    } = this.mmiConfigurationController.store.getState();
+
+    return custodians;
+  }
+
+  protected getCustodianFromEnvName(envName: string) {
+    const custodian = this.getCustodians().find(c => c.envName === envName);
+
+    if (!custodian) {
+      throw new Error(`Could not find custodian with name: ${envName} - please contact support`);
+    }
+
+    return custodian;
+  }
 }
diff --git a/src/MmiConfiguration.test.ts b/src/MmiConfiguration.test.ts
new file mode 100644
index 0000000000000000000000000000000000000000..8675017172cb08a9ed3dc43dc6f35746d4c0789f
--- /dev/null
+++ b/src/MmiConfiguration.test.ts
@@ -0,0 +1,177 @@
+import { CUSTODIAN_TYPES } from "./custodianTypes";
+import { IMmiConfigurationControllerOptions } from "./interfaces/IMmiConfigurationControllerOptions";
+import { MmiConfigurationController } from "./MmiConfiguration";
+
+const missingV1Custodian = {
+  apiBaseUrl: "",
+  displayName: "Legacy",
+  iconUrl: "images/test.svg",
+  name: "legacy",
+  production: true,
+  type: "Legacy",
+  enabled: true,
+  refreshTokenUrl: "https://test",
+  isNoteToTraderSupported: true,
+  environments: [],
+};
+
+const v1custodianWithNoteSupport = {
+  apiBaseUrl: "",
+  displayName: "Qredo",
+  iconUrl: "images/test.svg",
+  name: "qredo",
+  production: true,
+  type: "Qredo",
+  enabled: true,
+  refreshTokenUrl: "https://test",
+  isNoteToTraderSupported: true,
+  environments: [],
+};
+
+const v2custodian = {
+  type: "JSONRPC",
+  iconUrl: "https://saturn-custody-ui.dev.metamask-institutional.io/saturn.svg",
+  name: "Saturn Custody",
+  website: "https://saturn-custody-ui.dev.metamask-institutional.io/",
+  onboardingUrl: "https://saturn-custody-ui.dev.metamask-institutional.io/",
+  envName: "saturn-dev",
+  apiUrl: "https://saturn-custody.dev.metamask-institutional.io/eth",
+  displayName: "Saturn Custody",
+  production: true,
+  refreshTokenUrl: "https://saturn-custody.dev.metamask-institutional.io/oauth/token",
+  websocketApiUrl: "wss://websocket.dev.metamask-institutional.io/v1/ws",
+  isNoteToTraderSupported: true,
+  version: 2,
+  headquarters: "UK",
+  tokens: "All ERC-20 tokens",
+  chains: ["Ethereum"],
+  tags: null,
+  apiVersion: 2,
+  custodianPublishesTransaction: false,
+  environments: [
+    {
+      refreshTokenUrl: "https://saturn-custody.dev.metamask-institutional.io/oauth/token",
+      name: "saturn-dev",
+      displayName: "Saturn Custody",
+      enabled: true,
+      websocketApiUrl: "wss://websocket.dev.metamask-institutional.io/v1/ws",
+      apiBaseUrl: "https://saturn-custody.dev.metamask-institutional.io/eth",
+      iconUrl: "https://saturn-custody-ui.dev.metamask-institutional.io/saturn.svg",
+      apiVersion: 2,
+      custodianPublishesTransaction: false,
+      isNoteToTraderSupported: true,
+    },
+  ],
+};
+
+jest.mock("@metamask-institutional/configuration-client", () => {
+  return {
+    ConfigurationClient: jest.fn().mockImplementation(() => ({
+      getConfiguration: jest.fn().mockResolvedValue({
+        portfolio: {
+          enabled: true,
+          url: "http://test",
+          cookieSetUrls: ["test"],
+        },
+        features: {
+          websocketApi: false,
+        },
+        custodians: [missingV1Custodian, v1custodianWithNoteSupport, v2custodian],
+      }),
+    })),
+  };
+});
+
+describe("MmiConfigurationController", () => {
+  const initState = {
+    mmiConfiguration: {
+      portfolio: {
+        enabled: false,
+        url: "",
+        cookieSetUrls: [],
+      },
+      features: {
+        websocketApi: false,
+      },
+      custodians: [],
+    },
+  };
+
+  const options: IMmiConfigurationControllerOptions = { initState };
+
+  const createController = async options => {
+    return await new MmiConfigurationController(options);
+  };
+
+  it("should create configurationClient", async function () {
+    const controller = await createController(options);
+    expect(controller.configurationClient).toBeTruthy();
+  });
+
+  it("should get the configuration from the client and store it. The custodian list should include the V1 custodians from the hardcoded list, and any v2 custodians from the configuration client", async () => {
+    const controller = await createController(options);
+    jest.spyOn(controller, "getConfiguration");
+    await controller.storeConfiguration();
+
+    expect(controller.getConfiguration).toHaveBeenCalled();
+
+    expect(controller.store.getState().mmiConfiguration).toEqual({
+      portfolio: {
+        enabled: true,
+        url: "http://test",
+        cookieSetUrls: ["test"],
+      },
+      features: {
+        websocketApi: false,
+      },
+      custodians: [
+        ...Object.values(CUSTODIAN_TYPES)
+          .filter(custodian => custodian.hidden === false)
+          .map(custodian => ({
+            type: custodian.name,
+            name: custodian.name.toLowerCase(),
+            apiUrl: custodian.apiUrl,
+            iconUrl: custodian.imgSrc,
+            website: custodian.website,
+            onboardingUrl: custodian.onboardingUrl,
+            envName: custodian.envName,
+            displayName: custodian.displayName,
+            apiVersion: custodian.apiVersion,
+            custodianPublishesTransaction: custodian.custodianPublishesTransaction,
+            production: custodian.production,
+            refreshTokenUrl: null,
+            websocketApiUrl: null,
+            isNoteToTraderSupported: false,
+            version: 1,
+          })),
+        {
+          type: "JSONRPC",
+          name: v2custodian.name,
+          apiUrl: v2custodian.environments[0].apiBaseUrl,
+          iconUrl: v2custodian.iconUrl,
+          website: v2custodian.website,
+          onboardingUrl: v2custodian.onboardingUrl,
+          envName: v2custodian.envName,
+          displayName: v2custodian.displayName,
+          apiVersion: v2custodian.apiVersion,
+          custodianPublishesTransaction: v2custodian.custodianPublishesTransaction,
+          production: v2custodian.production,
+          refreshTokenUrl: v2custodian.refreshTokenUrl,
+          isNoteToTraderSupported: v2custodian.environments[0].isNoteToTraderSupported,
+          websocketApiUrl: "wss://websocket.dev.metamask-institutional.io/v1/ws",
+          version: 2,
+        },
+      ],
+    });
+  });
+
+  it("should give us the websocket API URL", async () => {
+    const controller = await createController(options);
+    jest.spyOn(controller, "getConfiguration");
+    await controller.storeConfiguration();
+
+    expect(controller.getConfiguration).toHaveBeenCalled();
+
+    expect(controller.getWebsocketApiUrl()).toEqual(v2custodian.websocketApiUrl);
+  });
+});
diff --git a/src/custodianTypes/bitgo/BitgoCustodyKeyring.test.ts b/src/custodianTypes/bitgo/BitgoCustodyKeyring.test.ts
new file mode 100644
index 0000000000000000000000000000000000000000..ed4a2b68a0295f25e43c185cfed64e8b2cbd920f
--- /dev/null
+++ b/src/custodianTypes/bitgo/BitgoCustodyKeyring.test.ts
@@ -0,0 +1,149 @@
+import { MMISDK, mmiSDKFactory } from "@metamask-institutional/sdk";
+import { IExtensionCustodianAccount, IRefreshTokenAuthDetails } from "@metamask-institutional/types";
+import crypto, { Hash } from "crypto";
+import { MmiConfigurationController } from "src/MmiConfiguration";
+import { mocked } from "ts-jest/utils";
+
+import { BitgoCustodyKeyring } from "./BitgoCustodyKeyring";
+import { BitgoStatusMap } from "./BitgoStatusMap";
+
+jest.mock("@metamask-institutional/sdk");
+
+const mockedMmiSdkFactory = mocked(mmiSDKFactory, true);
+
+const mockMMISDK = {
+  getAccountHierarchy: jest.fn(),
+  getEthereumAccounts: jest.fn().mockResolvedValue([
+    {
+      name: "myCoolAccount",
+      address: "0x123456",
+      custodianDetails: {},
+      labels: [{ key: "my-label", value: "my-label" }],
+      jwt: "jwt",
+      apiUrl: "apiUrl",
+      envName: "bitgo",
+    },
+  ]),
+  getEthereumAccountsByAddress: jest.fn().mockResolvedValue([]),
+  getEthereumAccountsByLabelOrAddressName: jest.fn().mockResolvedValue([]),
+  createTransaction: jest.fn(),
+  getTransaction: jest.fn(),
+  getAllTransactions: jest.fn(),
+  getCustomerId: jest.fn(),
+  signedTypedData_v4: jest.fn(),
+  getErc20Tokens: jest.fn(),
+  subscribeToEvents: jest.fn(),
+  registerEventCallback: jest.fn(),
+  handlePing: jest.fn(),
+  checkPing: jest.fn(),
+  handleEvent: jest.fn(),
+  getTransactionLink: jest.fn().mockResolvedValue(null),
+  on: jest.fn(),
+  eventCallbacks: [],
+  jwt: "",
+  defaultCacheAgeSeconds: 0,
+  lastPing: 0,
+  pingCheckRunning: false,
+  cache: null,
+  custodianApi: null,
+};
+
+describe("BitgoCustodyKeyring", () => {
+  let custodyKeyring: BitgoCustodyKeyring;
+
+  beforeEach(() => {
+    custodyKeyring = new BitgoCustodyKeyring({
+      mmiConfigurationController: {
+        store: {
+          getState: jest.fn().mockReturnValue({
+            mmiConfiguration: {
+              custodians: [
+                {
+                  apiUrl: "https://api",
+                  envName: "bitgo",
+                },
+              ],
+            },
+          }),
+        },
+      } as unknown as MmiConfigurationController,
+    });
+
+    jest.clearAllMocks();
+    mockedMmiSdkFactory.mockReturnValue(mockMMISDK as unknown as MMISDK);
+  });
+
+  describe("getTransactionDeepLink", () => {
+    it("should return null", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123456",
+          custodianDetails: { wallet_id: "test" },
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "https://api",
+          chainId: 4,
+          custodyType: "Bitgo",
+          envName: "bitgo",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+      custodyKeyring.addAccounts(1);
+
+      const result = await custodyKeyring.getTransactionDeepLink("0x123456", "12345");
+
+      expect(result).toEqual({
+        text: "Approve and sign the transaction in BitGo. Once all required approvals have been performed, the transaction will complete. Check your BitGo wallet for the latest status.",
+        url: null,
+      });
+    });
+  });
+
+  describe("getStatusMap", () => {
+    it("should return the status map", () => {
+      expect(custodyKeyring.getStatusMap()).toEqual(BitgoStatusMap);
+    });
+  });
+
+  // This method is tested in the Jupiter Keyring test, but that has a different AuthType
+  describe("hashAuthDetails", () => {
+    it("should hash the refreshtoken together with the custodian API URL", () => {
+      const authDetails: IRefreshTokenAuthDetails = {
+        refreshToken: "miaow",
+      };
+
+      const url = "https://api";
+      const envName = "bitgo";
+
+      const hashMock = {
+        update: jest.fn().mockReturnThis(),
+        digest: jest.fn().mockReturnValueOnce("fake hash"),
+      } as unknown as Hash;
+
+      // Mocking the crypto module
+      const createHashMock = jest.spyOn(crypto, "createHash").mockImplementationOnce(() => hashMock);
+
+      const result = custodyKeyring.hashAuthDetails(authDetails, envName);
+
+      expect(createHashMock).toBeCalledWith("sha256");
+      expect(hashMock.update).toBeCalledWith(authDetails.refreshToken + url);
+      expect(hashMock.digest).toBeCalledWith("hex");
+
+      expect(result).toEqual("fake hash");
+    });
+  });
+
+  describe("createAuthDetails", () => {
+    it("should take a token and turn it into IRefreshTokenAuthDetails", () => {
+      const jwt = "token";
+
+      const result = custodyKeyring.createAuthDetails(jwt);
+
+      expect(result).toEqual({
+        jwt,
+      });
+    });
+  });
+});
diff --git a/src/custodianTypes/bitgo/BitgoCustodyKeyring.ts b/src/custodianTypes/bitgo/BitgoCustodyKeyring.ts
index 9c46d940c495223abcad2de08031524b6d1474a7..3a83d411c4707ec8e786b1b4a17077cf8a2df1ba 100644
--- a/src/custodianTypes/bitgo/BitgoCustodyKeyring.ts
+++ b/src/custodianTypes/bitgo/BitgoCustodyKeyring.ts
@@ -45,8 +45,10 @@ export class BitgoCustodyKeyring extends CustodyKeyring {
     ],
   };
 
-  sdkFactory = (authDetails: AuthDetails, apiUrl: string): MMISDK =>
-    mmiSDKFactory(BitgoCustodianApi, authDetails, this.authType, apiUrl);
+  sdkFactory = (authDetails: AuthDetails, envName: string): MMISDK => {
+    const { apiUrl } = this.getCustodianFromEnvName(envName);
+    return mmiSDKFactory(BitgoCustodianApi, authDetails, this.authType, apiUrl);
+  };
 
   txDeepLink = async (_custodianDetails, _txId) => {
     const transactionLink: Partial<ICustodianTransactionLink> = {
diff --git a/src/custodianTypes/cactus/CactusCustodyKeyring.test.ts b/src/custodianTypes/cactus/CactusCustodyKeyring.test.ts
new file mode 100644
index 0000000000000000000000000000000000000000..450ca8ef39e9a43af419ab41c329c882b1d21e8d
--- /dev/null
+++ b/src/custodianTypes/cactus/CactusCustodyKeyring.test.ts
@@ -0,0 +1,148 @@
+import { MMISDK, mmiSDKFactory } from "@metamask-institutional/sdk";
+import { IExtensionCustodianAccount, IRefreshTokenAuthDetails } from "@metamask-institutional/types";
+import crypto, { Hash } from "crypto";
+import { MmiConfigurationController } from "src/MmiConfiguration";
+import { mocked } from "ts-jest/utils";
+
+import { CactusCustodyKeyring } from "./CactusCustodyKeyring";
+import { CactusStatusMap } from "./CactusStatusMap";
+
+jest.mock("@metamask-institutional/sdk");
+
+const mockedMmiSdkFactory = mocked(mmiSDKFactory, true);
+
+const mockMMISDK = {
+  getAccountHierarchy: jest.fn(),
+  getEthereumAccounts: jest.fn().mockResolvedValue([
+    {
+      name: "myCoolAccount",
+      address: "0x123456",
+      custodianDetails: {},
+      labels: [{ key: "my-label", value: "my-label" }],
+      jwt: "jwt",
+      apiUrl: "apiUrl",
+    },
+  ]),
+  getEthereumAccountsByAddress: jest.fn().mockResolvedValue([]),
+  getEthereumAccountsByLabelOrAddressName: jest.fn().mockResolvedValue([]),
+  createTransaction: jest.fn(),
+  getTransaction: jest.fn(),
+  getAllTransactions: jest.fn(),
+  getCustomerId: jest.fn(),
+  signedTypedData_v4: jest.fn(),
+  getErc20Tokens: jest.fn(),
+  subscribeToEvents: jest.fn(),
+  registerEventCallback: jest.fn(),
+  handlePing: jest.fn(),
+  checkPing: jest.fn(),
+  handleEvent: jest.fn(),
+  getTransactionLink: jest.fn().mockResolvedValue(null),
+  on: jest.fn(),
+  eventCallbacks: [],
+  jwt: "",
+  defaultCacheAgeSeconds: 0,
+  lastPing: 0,
+  pingCheckRunning: false,
+  cache: null,
+  custodianApi: null,
+};
+
+describe("CactusCustodyKeyring", () => {
+  let custodyKeyring: CactusCustodyKeyring;
+
+  beforeEach(() => {
+    custodyKeyring = new CactusCustodyKeyring({
+      mmiConfigurationController: {
+        store: {
+          getState: jest.fn().mockReturnValue({
+            mmiConfiguration: {
+              custodians: [
+                {
+                  apiUrl: "https://api",
+                  envName: "cactus",
+                },
+              ],
+            },
+          }),
+        },
+      } as unknown as MmiConfigurationController,
+    });
+
+    jest.clearAllMocks();
+    mockedMmiSdkFactory.mockReturnValue(mockMMISDK as unknown as MMISDK);
+  });
+
+  describe("getTransactionDeepLink", () => {
+    it("should return a link to the cactus website", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123456",
+          custodianDetails: { wallet_id: "test" },
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "https://api",
+          chainId: 4,
+          custodyType: "Cactus",
+          envName: "cactus",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+      custodyKeyring.addAccounts(1);
+
+      const result = await custodyKeyring.getTransactionDeepLink("0x123456", "12345");
+
+      expect(result).toEqual({
+        text: null,
+        url: "https://www.mycactus.com/cactus/login",
+      });
+    });
+  });
+
+  describe("getStatusMap", () => {
+    it("should return the status map", () => {
+      expect(custodyKeyring.getStatusMap()).toEqual(CactusStatusMap);
+    });
+  });
+
+  // This method is tested in the Jupiter Keyring test, but that has a different AuthType
+  describe("hashAuthDetails", () => {
+    it("should hash the refreshtoken together with the custodian API URL", () => {
+      const authDetails: IRefreshTokenAuthDetails = {
+        refreshToken: "miaow",
+      };
+
+      const url = "https://api";
+      const envName = "cactus";
+
+      const hashMock = {
+        update: jest.fn().mockReturnThis(),
+        digest: jest.fn().mockReturnValueOnce("fake hash"),
+      } as unknown as Hash;
+
+      // Mocking the crypto module
+      const createHashMock = jest.spyOn(crypto, "createHash").mockImplementationOnce(() => hashMock);
+
+      const result = custodyKeyring.hashAuthDetails(authDetails, envName);
+
+      expect(createHashMock).toBeCalledWith("sha256");
+      expect(hashMock.update).toBeCalledWith(authDetails.refreshToken + url);
+      expect(hashMock.digest).toBeCalledWith("hex");
+
+      expect(result).toEqual("fake hash");
+    });
+  });
+
+  describe("createAuthDetails", () => {
+    it("should take a token and turn it into IRefreshTokenAuthDetails", () => {
+      const refreshToken = "token";
+
+      const result = custodyKeyring.createAuthDetails(refreshToken);
+
+      expect(result).toEqual({
+        refreshToken,
+      });
+    });
+  });
+});
diff --git a/src/custodianTypes/cactus/CactusCustodyKeyring.ts b/src/custodianTypes/cactus/CactusCustodyKeyring.ts
index 918ccda1299f4e61611317cd151aff7ecd938014..947d17908a7af7b4a62ad26b76808d30c67634fe 100644
--- a/src/custodianTypes/cactus/CactusCustodyKeyring.ts
+++ b/src/custodianTypes/cactus/CactusCustodyKeyring.ts
@@ -44,8 +44,10 @@ export class CactusCustodyKeyring extends CustodyKeyring {
 
   public static addressType: AddressType.POLYCHAIN;
 
-  sdkFactory = (authDetails: IRefreshTokenAuthDetails, apiUrl: string): MMISDK =>
-    mmiSDKFactory(CactusCustodianApi, authDetails, this.authType, apiUrl);
+  sdkFactory = (authDetails: IRefreshTokenAuthDetails, envName: string): MMISDK => {
+    const { apiUrl } = this.getCustodianFromEnvName(envName);
+    return mmiSDKFactory(CactusCustodianApi, authDetails, this.authType, apiUrl);
+  };
 
   txDeepLink = async (_custodianDetails, _txId): Promise<Partial<ICustodianTransactionLink>> => {
     const transactionLink: Partial<ICustodianTransactionLink> = {
diff --git a/src/custodianTypes/curv/CurvCustodyKeyring.ts b/src/custodianTypes/curv/CurvCustodyKeyring.ts
index 39b3e6e3e46206fddcc454ce86b7cf866cd7f334..791ba09bbd811e3b502195e2bbee43950f98177a 100644
--- a/src/custodianTypes/curv/CurvCustodyKeyring.ts
+++ b/src/custodianTypes/curv/CurvCustodyKeyring.ts
@@ -18,6 +18,7 @@ interface ICustodianAccountProto {
   chainId?: number;
   custodyType: string;
   meta?: { version: number };
+  envName: string;
 }
 
 // The type actually used in CustodyKeyring
@@ -63,8 +64,10 @@ export class CurvCustodyKeyring extends CustodyKeyring {
   public selectedAddresses: ICustodianAccount<ITokenAuthDetails>[];
   public accountsDetails: ICustodianAccount<ITokenAuthDetails>[];
 
-  sdkFactory = (authDetails: AuthDetails, apiUrl: string) =>
-    mmiSDKFactory(CurvCustodianApi, authDetails, this.authType, apiUrl);
+  sdkFactory = (authDetails: AuthDetails, envName: string) => {
+    const { apiUrl } = this.getCustodianFromEnvName(envName);
+    return mmiSDKFactory(CurvCustodianApi, authDetails, this.authType, apiUrl);
+  };
 
   // For AccountDetails that still contain `jwt` property
   handleLegacyAccountDetails(
@@ -90,6 +93,7 @@ export class CurvCustodyKeyring extends CustodyKeyring {
         chainId: details.chainId,
         custodyType: details.custodyType,
         authDetails,
+        envName: details.envName || this.custodianType.envName,
       };
     });
   }
diff --git a/src/custodianTypes/eca3/ECA3CustodyKeyring.ts b/src/custodianTypes/eca3/ECA3CustodyKeyring.ts
index ab71f8d3b8083f94b23beb69b8ec2681a4a59b1d..b7c7cce7f26a704bfcb3d8c692bb49399a256202 100644
--- a/src/custodianTypes/eca3/ECA3CustodyKeyring.ts
+++ b/src/custodianTypes/eca3/ECA3CustodyKeyring.ts
@@ -35,26 +35,18 @@ export class ECA3CustodyKeyring extends CustodyKeyring {
     environmentMapping: [], // No environment mapping for JSON-RPC custodians as this is derived from the configuration service
   };
 
-  sdkFactory = (authDetails: IRefreshTokenAuthDetails, apiUrl: string): MMISDK => {
-    const store = this.mmiConfigurationController.store.getState();
+  sdkFactory = (authDetails: IRefreshTokenAuthDetails, envName: string): MMISDK => {
+    const { refreshTokenUrl, apiUrl } = this.getCustodianFromEnvName(envName);
 
-    const { custodians } = store.mmiConfiguration;
-
-    const custodian = custodians.find(c => c.apiUrl === apiUrl);
-
-    if (!custodian) {
-      throw new Error(`Could not find custodian with URL: ${apiUrl} - please contact support`);
-    }
-
-    authDetails.refreshTokenUrl = custodian.refreshTokenUrl;
+    authDetails.refreshTokenUrl = refreshTokenUrl;
 
     return mmiSDKFactory(ECA3CustodianApi, authDetails, this.authType, apiUrl);
   };
 
   txDeepLink = async (address: string, txId: string): Promise<Partial<ICustodianTransactionLink>> => {
-    const { authDetails, apiUrl } = this.getAccountDetails(address);
+    const { authDetails, envName } = this.getAccountDetails(address);
 
-    const sdk = this.getSDK(authDetails, apiUrl);
+    const sdk = this.getSDK(authDetails, envName);
 
     try {
       const transactionLink = await sdk.getTransactionLink(txId);
diff --git a/src/custodianTypes/json-rpc/JsonRpcCustodyKeyring.test.ts b/src/custodianTypes/json-rpc/JsonRpcCustodyKeyring.test.ts
new file mode 100644
index 0000000000000000000000000000000000000000..0b636c0dc7f04068f922368e9577d8105357da62
--- /dev/null
+++ b/src/custodianTypes/json-rpc/JsonRpcCustodyKeyring.test.ts
@@ -0,0 +1,286 @@
+import { MMISDK, mmiSDKFactory } from "@metamask-institutional/sdk";
+import { IExtensionCustodianAccount, IRefreshTokenAuthDetails } from "@metamask-institutional/types";
+import crypto, { Hash } from "crypto";
+import { mocked } from "ts-jest/utils";
+
+import { JsonRpcCustodyKeyring } from "./JsonRpcCustodyKeyring";
+import { JsonRpcStatusMap } from "./JsonRpcStatusMap";
+
+jest.mock("@metamask-institutional/sdk");
+
+const mockedMmiSdkFactory = mocked(mmiSDKFactory, true);
+
+const mockMMISDK = {
+  getAccountHierarchy: jest.fn(),
+  getEthereumAccounts: jest.fn().mockResolvedValue([
+    {
+      name: "myCoolAccount",
+      address: "0x123456",
+      custodianDetails: {},
+      labels: [{ key: "my-label", value: "my-label" }],
+      jwt: "jwt",
+      apiUrl: "apiUrl",
+      envName: "saturn",
+    },
+  ]),
+  getSignature: jest.fn(),
+  getEthereumAccountsByAddress: jest.fn().mockResolvedValue([]),
+  getEthereumAccountsByLabelOrAddressName: jest.fn().mockResolvedValue([]),
+  createTransaction: jest.fn(),
+  getTransaction: jest.fn(),
+  getAllTransactions: jest.fn(),
+  getCustomerId: jest.fn(),
+  signedTypedData_v4: jest.fn(),
+  getErc20Tokens: jest.fn(),
+  subscribeToEvents: jest.fn(),
+  registerEventCallback: jest.fn(),
+  handlePing: jest.fn(),
+  checkPing: jest.fn(),
+  handleEvent: jest.fn(),
+  getTransactionLink: jest.fn().mockResolvedValue({}),
+  changeRefreshTokenAuthDetails: jest.fn(),
+  getCustomerProof: jest.fn(),
+  eventCallbacks: [],
+  jwt: "",
+  defaultCacheAgeSeconds: 0,
+  lastPing: 0,
+  pingCheckRunning: false,
+  cache: null,
+  custodianApi: null,
+  on: jest.fn(),
+};
+
+const mockMmiConfigurationController = {
+  store: {
+    getState: jest.fn().mockReturnValue({
+      mmiConfiguration: {
+        custodians: [
+          {
+            apiUrl: "https://api",
+            envName: "saturn",
+          },
+        ],
+      },
+    }),
+  },
+  configurationClient: {},
+  storeConfiguration: jest.fn(),
+  getConfiguration: jest.fn(),
+  getWebsocketApiUrl: jest.fn(),
+};
+
+describe("JsonRpcCustodyKeyring", () => {
+  let custodyKeyring: JsonRpcCustodyKeyring;
+
+  beforeEach(() => {
+    custodyKeyring = new JsonRpcCustodyKeyring({
+      mmiConfigurationController: mockMmiConfigurationController,
+    });
+    jest.clearAllMocks();
+    mockedMmiSdkFactory.mockReturnValue(mockMMISDK as unknown as MMISDK);
+  });
+
+  describe("getTransactionDeepLink", () => {
+    it("should call the getTransactionDeepLink method on the sdk", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123456",
+          custodianDetails: { wallet_id: "test" },
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "https://api",
+          chainId: 4,
+          custodyType: "Saturn",
+          envName: "saturn",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+      custodyKeyring.addAccounts(1);
+
+      const result = await custodyKeyring.getTransactionDeepLink("0x123456", "12345");
+
+      expect(mockMMISDK.getTransactionLink).toHaveBeenCalledWith("12345");
+
+      expect(result).toEqual({});
+    });
+
+    it("should return null if the call fails", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123456",
+          custodianDetails: { wallet_id: "test" },
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "https://api",
+          chainId: 4,
+          custodyType: "Saturn",
+          envName: "saturn",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+      custodyKeyring.addAccounts(1);
+
+      mockMMISDK.getTransactionLink = jest.fn().mockRejectedValueOnce("error");
+
+      const result = await custodyKeyring.getTransactionDeepLink("0x123456", "12345");
+
+      expect(result).toEqual(null);
+    });
+  });
+
+  describe("getStatusMap", () => {
+    it("should return the status map", () => {
+      expect(custodyKeyring.getStatusMap()).toEqual(JsonRpcStatusMap);
+    });
+  });
+
+  // This method is tested in the Jupiter Keyring test, but that has a different AuthType
+  describe("hashAuthDetails", () => {
+    it("should hash the refreshtoken together with the custodian API URL", () => {
+      const authDetails: IRefreshTokenAuthDetails = {
+        refreshToken: "miaow",
+      };
+
+      const url = "https://api";
+      const envName = "saturn";
+
+      const hashMock = {
+        update: jest.fn().mockReturnThis(),
+        digest: jest.fn().mockReturnValueOnce("fake hash"),
+      } as unknown as Hash;
+
+      // Mocking the crypto module
+      const createHashMock = jest.spyOn(crypto, "createHash").mockImplementationOnce(() => hashMock);
+
+      const result = custodyKeyring.hashAuthDetails(authDetails, envName);
+
+      expect(createHashMock).toBeCalledWith("sha256");
+      expect(hashMock.update).toBeCalledWith(authDetails.refreshToken + url);
+      expect(hashMock.digest).toBeCalledWith("hex");
+
+      expect(result).toEqual("fake hash");
+    });
+  });
+
+  describe("createAuthDetails", () => {
+    it("should take a token and turn it into IRefreshTokenAuthDetails", () => {
+      const jwt = "token";
+
+      const result = custodyKeyring.createAuthDetails(jwt);
+
+      expect(result).toEqual({
+        refreshToken: jwt,
+      });
+    });
+  });
+
+  describe("getCustomerProof", () => {
+    it("should get the sdk and call the getCustomerProof method", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123456",
+          custodianDetails: { wallet_id: "test" },
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "https://api",
+          chainId: 4,
+          custodyType: "Saturn",
+          envName: "saturn",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+      custodyKeyring.addAccounts(1);
+
+      await custodyKeyring.getCustomerProof("0x123456");
+
+      expect(mockMMISDK.getCustomerProof).toHaveBeenCalled();
+    });
+  });
+
+  describe("replaceRefreshTokenAuthDetails", () => {
+    it("given an address and new auth Details, it calls the sdk with the new auth details", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123456",
+          custodianDetails: { wallet_id: "test" },
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "https://api",
+          chainId: 4,
+          custodyType: "Saturn",
+          envName: "saturn",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+      custodyKeyring.addAccounts(1);
+
+      const refreshToken = "newToken";
+
+      await custodyKeyring.replaceRefreshTokenAuthDetails("0x123456", refreshToken);
+
+      expect(mockMMISDK.changeRefreshTokenAuthDetails).toHaveBeenCalledWith({
+        refreshToken,
+      });
+    });
+  });
+
+  describe("updateAccountsDetailsWithNewRefreshToken", () => {
+    it("replace the refresh in accountsDetails", () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123456",
+          custodianDetails: { wallet_id: "test" },
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "https://api",
+          chainId: 4,
+          custodyType: "Saturn",
+          envName: "saturn",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+      custodyKeyring.addAccounts(1);
+
+      custodyKeyring.updateAccountsDetailsWithNewRefreshToken("jwt", "newToken", "https://api");
+
+      expect((custodyKeyring.accountsDetails[0].authDetails as IRefreshTokenAuthDetails).refreshToken).toEqual(
+        "newToken",
+      );
+    });
+  });
+
+  describe("getSignature", () => {
+    it("should call the sdk with the correct params", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123456",
+          custodianDetails: { wallet_id: "test" },
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "https://api",
+          chainId: 4,
+          custodyType: "Saturn",
+          envName: "saturn",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+      custodyKeyring.addAccounts(1);
+
+      await custodyKeyring.getSignature("0x123456", "signed-message-id");
+
+      expect(mockMMISDK.getSignature).toHaveBeenCalledWith("0x123456", "signed-message-id");
+    });
+  });
+});
diff --git a/src/custodianTypes/json-rpc/JsonRpcCustodyKeyring.ts b/src/custodianTypes/json-rpc/JsonRpcCustodyKeyring.ts
index ca3756007da6328823d664c648fabd2722f4d71f..589e79a33683eeb7548c635b3602856b4740aa4c 100644
--- a/src/custodianTypes/json-rpc/JsonRpcCustodyKeyring.ts
+++ b/src/custodianTypes/json-rpc/JsonRpcCustodyKeyring.ts
@@ -35,26 +35,18 @@ export class JsonRpcCustodyKeyring extends CustodyKeyring {
     environmentMapping: [], // No environment mapping for JSON-RPC custodians as this is derived from the configuration service
   };
 
-  sdkFactory = (authDetails: IRefreshTokenAuthDetails, apiUrl: string): MMISDK => {
-    const store = this.mmiConfigurationController.store.getState();
+  sdkFactory = (authDetails: IRefreshTokenAuthDetails, envName: string): MMISDK => {
+    const { refreshTokenUrl, apiUrl } = this.getCustodianFromEnvName(envName);
 
-    const { custodians } = store.mmiConfiguration;
-
-    const custodian = custodians.find(c => c.apiUrl === apiUrl);
-
-    if (!custodian) {
-      throw new Error(`Could not find custodian with URL: ${apiUrl} - please contact support`);
-    }
-
-    authDetails.refreshTokenUrl = custodian.refreshTokenUrl;
+    authDetails.refreshTokenUrl = refreshTokenUrl;
 
     return mmiSDKFactory(JsonRpcCustodianApi, authDetails, this.authType, apiUrl);
   };
 
   txDeepLink = async (address: string, txId: string): Promise<Partial<ICustodianTransactionLink>> => {
-    const { authDetails, apiUrl } = this.getAccountDetails(address);
+    const { authDetails, envName } = this.getAccountDetails(address);
 
-    const sdk = this.getSDK(authDetails, apiUrl);
+    const sdk = this.getSDK(authDetails, envName);
 
     try {
       const transactionLink = await sdk.getTransactionLink(txId);
diff --git a/src/custodianTypes/jupiter/JupiterCustodyKeyring.test.ts b/src/custodianTypes/jupiter/JupiterCustodyKeyring.test.ts
new file mode 100644
index 0000000000000000000000000000000000000000..d6f628c8cd7bb6b8ed089543f8ceba364fcfff78
--- /dev/null
+++ b/src/custodianTypes/jupiter/JupiterCustodyKeyring.test.ts
@@ -0,0 +1,1103 @@
+import { Transaction } from "@ethereumjs/tx";
+import { JupiterCustodianApi, MMISDK, mmiSDKFactory } from "@metamask-institutional/sdk";
+import {
+  ICustodianAccount,
+  IEIP1559TxParams,
+  IExtensionCustodianAccount,
+  ILegacyTXParams,
+  ITokenAuthDetails,
+  MetamaskTransaction,
+} from "@metamask-institutional/types";
+import { MmiConfigurationController } from "src/MmiConfiguration";
+import { mocked } from "ts-jest/utils";
+
+import { DEFAULT_MAX_CACHE_AGE } from "../../constants";
+import { JupiterCustodyKeyring } from "./JupiterCustodyKeyring";
+import { JupiterStatusMap } from "./JupiterStatusMap";
+
+jest.mock("@metamask-institutional/sdk");
+
+const mockedMmiSdkFactory = mocked(mmiSDKFactory, true);
+const mockAccounts = [
+  {
+    name: "myCoolAccount",
+    address: "0x123456",
+    custodianDetails: {},
+    labels: [{ key: "my-label", value: "my-label" }],
+    token: "jwt",
+    apiUrl: "apiUrl",
+    envName: "jupiter",
+  },
+];
+
+const mockMMISDK = {
+  getAccountHierarchy: jest.fn(),
+  getEthereumAccounts: jest.fn().mockResolvedValue(mockAccounts),
+  getEthereumAccountsByAddress: jest.fn().mockResolvedValue(mockAccounts),
+  getEthereumAccountsByLabelOrAddressName: jest.fn().mockResolvedValue([]),
+  createTransaction: jest.fn(),
+  getTransaction: jest.fn(),
+  getAllTransactions: jest.fn(),
+  getCustomerId: jest.fn(),
+  signedTypedData_v4: jest.fn(),
+  signPersonalMessage: jest.fn(),
+  getErc20Tokens: jest.fn(),
+  subscribeToEvents: jest.fn(),
+  registerEventCallback: jest.fn(),
+  handlePing: jest.fn(),
+  checkPing: jest.fn(),
+  handleEvent: jest.fn(),
+  setBuildMetaData: jest.fn(),
+  getTransactionLink: jest.fn().mockResolvedValue(null),
+  changeRefreshTokenAuthDetails: jest.fn(),
+  eventCallbacks: [],
+  jwt: "",
+  defaultCacheAgeSeconds: 0,
+  lastPing: 0,
+  pingCheckRunning: false,
+  cache: null,
+  custodianApi: null,
+  getSupportedChains: jest.fn().mockReturnValue(["4"]),
+  on: jest.fn(),
+};
+
+describe("CustodyKeyring", () => {
+  let custodyKeyring: JupiterCustodyKeyring;
+
+  beforeEach(() => {
+    custodyKeyring = new JupiterCustodyKeyring({
+      mmiConfigurationController: {
+        store: {
+          getState: jest.fn().mockReturnValue({
+            mmiConfiguration: {
+              custodians: [
+                {
+                  apiUrl: "apiUrl",
+                  envName: "jupiter",
+                },
+                {
+                  apiUrl: "apiUrl2",
+                  envName: "jupiter2",
+                },
+                {
+                  apiUrl: "https://jupiter-custody-demo.codefi.network",
+                  envName: "jupiter-demo",
+                },
+              ],
+            },
+          }),
+        },
+      } as unknown as MmiConfigurationController,
+    });
+    jest.clearAllMocks();
+    mockedMmiSdkFactory.mockReturnValue(mockMMISDK as unknown as MMISDK);
+  });
+
+  describe("serialize", () => {
+    it("should return the accounts, selectedAddresses, accountDetails and meta as plain objects", async () => {
+      const result = await custodyKeyring.serialize();
+      expect(result).toEqual({
+        accounts: [],
+        selectedAddresses: [],
+        accountsDetails: [],
+        meta: {},
+      });
+    });
+  });
+
+  describe("deserialize", () => {
+    it("should accept the accounts, selectedAddresses and accountDetails and self assign them, including creating SDKs for them", async () => {
+      const mockAccounts = ["0x123456"];
+      const mockSelectedAddresses: ICustodianAccount<ITokenAuthDetails>[] = [
+        {
+          name: "myCoolAccount",
+          address: "0x123456",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          authDetails: { jwt: "jwt" },
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+      const mockAccountsDetails: ICustodianAccount<ITokenAuthDetails>[] = [
+        {
+          address: "0x123456",
+          authDetails: { jwt: "jwt" },
+          apiUrl: "apiUrl",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+
+      await custodyKeyring.deserialize({
+        accounts: mockAccounts,
+        selectedAddresses: mockSelectedAddresses,
+        accountsDetails: mockAccountsDetails,
+      });
+
+      expect(custodyKeyring.accounts).toEqual(mockAccounts);
+      expect(custodyKeyring.selectedAddresses).toEqual(mockSelectedAddresses);
+      expect(custodyKeyring.accountsDetails).toEqual(mockAccountsDetails);
+      expect(mmiSDKFactory).toHaveBeenCalled();
+    });
+  });
+
+  describe("setSelectedAddresses", () => {
+    it("accepts an array of custodian accounts and self assigns them", () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount",
+          address: "0x123456",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+
+      expect(custodyKeyring.selectedAddresses).toEqual([]);
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+      expect(custodyKeyring.selectedAddresses).toEqual(
+        mockSelectedAddresses.map(
+          custodyKeyring.convertExtensionCustodianAccountToSDKCustodianAccount.bind(custodyKeyring),
+        ),
+      );
+    });
+  });
+
+  describe("addAccounts", () => {
+    it("takes a number, and adds this many accounts from selectedAddresses to the accounts list and stores their metadata in accountsDetails", () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123456",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+        {
+          name: "myCoolAccount2",
+          address: "0x123457",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl2",
+          custodyType: "jupiter",
+          envName: "jupiter2",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+      custodyKeyring.addAccounts(1);
+      expect(custodyKeyring.accounts.length).toEqual(1);
+      custodyKeyring.addAccounts(2);
+      expect(custodyKeyring.accounts.length).toEqual(2);
+    });
+  });
+
+  describe("getAccounts", () => {
+    it("returns the accounts property", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123456",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+      custodyKeyring.addAccounts(1);
+      const result = await custodyKeyring.getAccounts();
+      expect(result).toEqual(custodyKeyring.accounts);
+    });
+  });
+
+  describe("removeAccounts", () => {
+    it("removes an account from the accounts list based on the address", () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123456",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+        {
+          name: "myCoolAccount2",
+          address: "0x123457",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl2",
+          custodyType: "jupiter",
+          envName: "jupiter2",
+        },
+      ];
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+      custodyKeyring.addAccounts(2);
+
+      expect(custodyKeyring.accounts.length).toEqual(2);
+      expect(custodyKeyring.accountsDetails.length).toEqual(2);
+
+      custodyKeyring.removeAccount(mockSelectedAddresses[1].address);
+
+      expect(custodyKeyring.accounts.length).toEqual(1);
+      expect(custodyKeyring.accountsDetails.length).toEqual(1);
+
+      custodyKeyring.removeAccount(mockSelectedAddresses[0].address);
+
+      expect(custodyKeyring.accounts.length).toEqual(0);
+      expect(custodyKeyring.accountsDetails.length).toEqual(0);
+    });
+  });
+
+  describe("getSDK", () => {
+    it("returns a copy of the SDK from the sdkList if it exists, or creates one if it is not there", () => {
+      const result = custodyKeyring.getSDK({ jwt: "jwt" }, "jupiter");
+
+      expect(result).toEqual(mockMMISDK);
+
+      expect(mockedMmiSdkFactory).toHaveBeenCalledWith(JupiterCustodianApi, { jwt: "jwt" }, 0, "apiUrl");
+    });
+
+    it("does not create one of it is there already", () => {
+      custodyKeyring.getSDK({ jwt: "jwt" }, "jupiter");
+      custodyKeyring.getSDK({ jwt: "jwt" }, "jupiter");
+
+      expect(mmiSDKFactory).toHaveBeenCalledTimes(1);
+    });
+
+    it("will draw from the existing sdkList and return only ones that differ by hash of the auth details", () => {
+      custodyKeyring.getSDK({ jwt: "jwt" }, "jupiter");
+      custodyKeyring.getSDK({ jwt: "jwt" }, "jupiter");
+      custodyKeyring.getSDK({ jwt: "jwt2" }, "jupiter2");
+
+      expect(mmiSDKFactory).toHaveBeenCalledTimes(2);
+    });
+  });
+
+  describe("getCustodianAccounts", () => {
+    it("will get addresses, if the arguments specify an ethereum address", () => {
+      const address = "0x4D8519890C77217A352d3cC978B0b74165154401";
+
+      custodyKeyring.getCustodianAccounts("jwt", "jupiter", address);
+
+      expect(mockMMISDK.getEthereumAccountsByAddress).toHaveBeenCalledWith(address, DEFAULT_MAX_CACHE_AGE);
+    });
+
+    it("will not return already existing addresses", async () => {
+      const address = "0x4D8519890C77217A352d3cC978B0b74165154401";
+
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address,
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+
+      custodyKeyring.addAccounts(1);
+
+      const result = await custodyKeyring.getCustodianAccounts("jwt", "jupiter", address);
+      expect(result).toEqual(mockAccounts);
+      expect(mmiSDKFactory).toHaveBeenCalledTimes(1);
+    });
+
+    it("will search by labels if there is a non-address search text", () => {
+      custodyKeyring.getCustodianAccounts("jwt", "jupiter", "search");
+
+      expect(mockMMISDK.getEthereumAccountsByLabelOrAddressName).toHaveBeenCalledWith("search", DEFAULT_MAX_CACHE_AGE);
+    });
+
+    it("will get all accounts (for a chainID) if called with no search text", () => {
+      custodyKeyring.getCustodianAccounts("jwt", "jupiter", null);
+
+      expect(mockMMISDK.getEthereumAccounts).toHaveBeenCalledWith(60);
+    });
+  });
+
+  describe("getTransactionNote", () => {
+    it("will get a readable category for transaction based on the transaction category", () => {
+      const txMeta = {
+        type: "transfer",
+        origin: "http://",
+      } as MetamaskTransaction;
+
+      expect(custodyKeyring.getTransactionNote(txMeta)).toEqual("ETH Transfer - initiated on http://");
+    });
+
+    it("will return the raw category if there is no mapping", () => {
+      const txMeta = {
+        type: "blah",
+        origin: "http://",
+      } as MetamaskTransaction;
+
+      expect(custodyKeyring.getTransactionNote(txMeta)).toEqual("blah - initiated on http://");
+    });
+  });
+
+  describe("signTransaction", () => {
+    it("will get account information and then call signTransaction on the SDK with formatted transaction metadata", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123458",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+
+      custodyKeyring.addAccounts(1);
+
+      const fromAddress = mockSelectedAddresses[0].address;
+
+      const ethTx = {
+        data: "0x",
+      } as unknown as Transaction;
+
+      const txMeta = {
+        type: "contractInteraction",
+        origin: "http://",
+        chainId: "4",
+        txParams: {
+          to: "0x5678",
+          gasPrice: "1",
+          gas: "2",
+          value: "3",
+        },
+      } as MetamaskTransaction;
+
+      await custodyKeyring.signTransaction(fromAddress, ethTx, txMeta);
+
+      expect(mockMMISDK.createTransaction).toHaveBeenCalledWith(
+        {
+          data: ethTx.data,
+          from: fromAddress,
+          gasLimit: txMeta.txParams.gas,
+          gasPrice: (txMeta.txParams as ILegacyTXParams).gasPrice,
+          to: txMeta.txParams.to,
+          value: txMeta.txParams.value,
+          type: "0",
+        },
+        {
+          chainId: txMeta.chainId,
+          note: "Contract Interaction - initiated on http://",
+          origin: "http://",
+          transactionCategory: "contractInteraction",
+        },
+      );
+    });
+
+    it("will throw if there's a specified chainId and it doesnt match the account", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123458",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+
+      custodyKeyring.addAccounts(1);
+
+      const fromAddress = mockSelectedAddresses[0].address;
+
+      const ethTx = {
+        data: "0x",
+      } as unknown as Transaction;
+
+      const txMeta = {
+        type: "contractInteraction",
+        origin: "http://",
+        chainId: "777",
+        txParams: {
+          to: "0x5678",
+          gasPrice: "1",
+          gas: "2",
+          value: "3",
+        },
+      } as unknown as MetamaskTransaction;
+
+      await expect(custodyKeyring.signTransaction(fromAddress, ethTx, txMeta)).rejects.toThrowError(
+        "This network 777 is not configured or supported with your custody provider.",
+      );
+    });
+
+    it("will call with type 2 for london transactions", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123458",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+
+      custodyKeyring.addAccounts(1);
+
+      const fromAddress = mockSelectedAddresses[0].address;
+
+      const ethTx = {
+        data: "0x",
+      } as unknown as Transaction;
+
+      const txMeta = {
+        type: "contractInteraction",
+        origin: "http://",
+        chainId: "4",
+        txParams: {
+          to: "0x5678",
+          gas: "2",
+          maxFeePerGas: "4000000013",
+          maxPriorityFeePerGas: "4000000000",
+          value: "3",
+        },
+      } as MetamaskTransaction;
+
+      await custodyKeyring.signTransaction(fromAddress, ethTx, txMeta);
+
+      expect(mockMMISDK.createTransaction).toHaveBeenCalledWith(
+        {
+          data: ethTx.data,
+          from: fromAddress,
+          gasLimit: txMeta.txParams.gas,
+          maxFeePerGas: (txMeta.txParams as IEIP1559TxParams).maxFeePerGas,
+          maxPriorityFeePerGas: (txMeta.txParams as IEIP1559TxParams).maxPriorityFeePerGas,
+          to: txMeta.txParams.to,
+          value: txMeta.txParams.value,
+          type: "2",
+        },
+        {
+          chainId: txMeta.chainId,
+          note: "Contract Interaction - initiated on http://",
+          origin: "http://",
+          transactionCategory: "contractInteraction",
+        },
+      );
+    });
+
+    it("handles large amounts", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123458",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+
+      custodyKeyring.addAccounts(1);
+
+      const fromAddress = mockSelectedAddresses[0].address;
+
+      const ethTx = {
+        data: "0x",
+      } as unknown as Transaction;
+
+      const txMeta = {
+        type: "contractInteraction",
+        origin: "http://",
+        chainId: "4",
+        txParams: {
+          to: "0x5678",
+          gasPrice: "1",
+          gas: "2",
+          value: "0xD3C21BCECCEDA1000000",
+        },
+      } as MetamaskTransaction;
+
+      await custodyKeyring.signTransaction(fromAddress, ethTx, txMeta);
+
+      expect(mockMMISDK.createTransaction).toHaveBeenCalledWith(
+        {
+          data: ethTx.data,
+          from: fromAddress,
+          gasLimit: (txMeta.txParams as ILegacyTXParams).gas,
+          gasPrice: (txMeta.txParams as ILegacyTXParams).gasPrice,
+          to: txMeta.txParams.to,
+          value: "1000000000000000000000000",
+          type: "0",
+        },
+        {
+          chainId: txMeta.chainId,
+          note: "Contract Interaction - initiated on http://",
+          origin: "http://",
+          transactionCategory: "contractInteraction",
+        },
+      );
+    });
+
+    it("should convert tx data from a Uint8Array to 0x-ified string", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123458",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+
+      custodyKeyring.addAccounts(1);
+
+      const fromAddress = mockSelectedAddresses[0].address;
+
+      const ethTx = {
+        data: Uint8Array.from([1]),
+      } as unknown as Transaction;
+
+      const txMeta = {
+        type: "contractInteraction",
+        origin: "http://",
+        chainId: "4",
+        txParams: {
+          to: "0x5678",
+          gasPrice: "1",
+          gas: "2",
+          value: "3",
+          type: "0",
+        },
+      } as MetamaskTransaction;
+
+      await custodyKeyring.signTransaction(fromAddress, ethTx, txMeta);
+
+      expect(mockMMISDK.createTransaction).toHaveBeenCalledWith(
+        {
+          data: "0x1",
+          from: fromAddress,
+          gasLimit: txMeta.txParams.gas,
+          gasPrice: (txMeta.txParams as ILegacyTXParams).gasPrice,
+          to: txMeta.txParams.to,
+          value: txMeta.txParams.value,
+          type: txMeta.txParams.type,
+        },
+        {
+          chainId: txMeta.chainId,
+          note: "Contract Interaction - initiated on http://",
+          origin: "http://",
+          transactionCategory: "contractInteraction",
+        },
+      );
+    });
+
+    it("should convert empty data into undefined", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123458",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+
+      custodyKeyring.addAccounts(1);
+
+      const fromAddress = mockSelectedAddresses[0].address;
+
+      const ethTx = {
+        data: "",
+      } as unknown as Transaction;
+
+      const txMeta = {
+        type: "contractInteraction",
+        origin: "http://",
+        chainId: "4",
+        txParams: {
+          to: "0x5678",
+          gasPrice: "1",
+          gas: "2",
+          value: "3",
+        },
+      } as MetamaskTransaction;
+
+      await custodyKeyring.signTransaction(fromAddress, ethTx, txMeta);
+
+      expect(mockMMISDK.createTransaction).toHaveBeenCalledWith(
+        {
+          data: undefined,
+          from: fromAddress,
+          gasLimit: txMeta.txParams.gas,
+          gasPrice: (txMeta.txParams as ILegacyTXParams).gasPrice,
+          to: txMeta.txParams.to,
+          value: txMeta.txParams.value,
+          type: "0",
+        },
+        {
+          chainId: txMeta.chainId,
+          note: "Contract Interaction - initiated on http://",
+          origin: "http://",
+          transactionCategory: "contractInteraction",
+        },
+      );
+    });
+
+    it("should convert tx data from a Uint8Array to 0x-ified string", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123458",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+
+      custodyKeyring.addAccounts(1);
+
+      const fromAddress = mockSelectedAddresses[0].address;
+
+      const ethTx = {
+        data: Uint8Array.from([1]),
+      } as unknown as Transaction;
+
+      const txMeta = {
+        type: "contractInteraction",
+        origin: "http://",
+        chainId: "4",
+        txParams: {
+          to: "0x5678",
+          gasPrice: "1",
+          gas: "2",
+          value: "3",
+        },
+      } as MetamaskTransaction;
+
+      await custodyKeyring.signTransaction(fromAddress, ethTx, txMeta);
+
+      expect(mockMMISDK.createTransaction).toHaveBeenCalledWith(
+        {
+          data: "0x1",
+          from: fromAddress,
+          gasLimit: txMeta.txParams.gas,
+          gasPrice: (txMeta.txParams as ILegacyTXParams).gasPrice,
+          to: txMeta.txParams.to,
+          value: txMeta.txParams.value,
+          type: "0",
+        },
+        {
+          chainId: txMeta.chainId,
+          note: "Contract Interaction - initiated on http://",
+          origin: "http://",
+          transactionCategory: "contractInteraction",
+        },
+      );
+    });
+
+    it("should 0x-prefix data", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123458",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+
+      custodyKeyring.addAccounts(1);
+
+      const fromAddress = mockSelectedAddresses[0].address;
+
+      const ethTx = {
+        data: "12",
+      } as unknown as Transaction;
+
+      const txMeta = {
+        type: "contractInteraction",
+        origin: "http://",
+        chainId: "4",
+        txParams: {
+          to: "0x5678",
+          gasPrice: "1",
+          gas: "2",
+          value: "3",
+          type: "0",
+        },
+      } as MetamaskTransaction;
+
+      await custodyKeyring.signTransaction(fromAddress, ethTx, txMeta);
+
+      expect(mockMMISDK.createTransaction).toHaveBeenCalledWith(
+        {
+          data: "0x12",
+          from: fromAddress,
+          gasLimit: txMeta.txParams.gas,
+          gasPrice: (txMeta.txParams as ILegacyTXParams).gasPrice,
+          to: txMeta.txParams.to,
+          value: txMeta.txParams.value,
+          type: txMeta.txParams.type,
+        },
+        {
+          chainId: txMeta.chainId,
+          note: "Contract Interaction - initiated on http://",
+          origin: "http://",
+          transactionCategory: "contractInteraction",
+        },
+      );
+    });
+  });
+
+  describe("getTransaction", () => {
+    it("should call getTransaction on the SDK", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123456",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+      custodyKeyring.addAccounts(1);
+      await custodyKeyring.getTransaction("0x123456", "12345");
+      expect(mockMMISDK.getTransaction).toHaveBeenCalledWith("0x123456", "12345");
+    });
+
+    it("does nothing if called with bad arguments", async () => {
+      const result = await custodyKeyring.getTransaction(undefined, undefined);
+
+      expect(result).toEqual(null);
+    });
+  });
+
+  describe("getTransactionDeepLink", () => {
+    it("should return the URL of the Jupiter Custody UI", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123456",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+      custodyKeyring.addAccounts(1);
+
+      const result = await custodyKeyring.getTransactionDeepLink("0x123456", "12345");
+
+      expect(result).toEqual({
+        text: "Approve the transaction in the Jupiter Custody app. Once all required custody approvals have been performed the transaction will complete. Check your Jupiter Custody app for status.",
+        url: null,
+      });
+    });
+
+    it("should return a link to the Jupiter custody UI", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x1234567",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+      custodyKeyring.addAccounts(1);
+
+      const result = await custodyKeyring.getTransactionDeepLink("0x1234567", "12345");
+
+      expect(result).toEqual({
+        text: "Approve the transaction in the Jupiter Custody app. Once all required custody approvals have been performed the transaction will complete. Check your Jupiter Custody app for status.",
+        url: null,
+      });
+    });
+
+    it("has a special rule for the demo environment", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123456",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "https://jupiter-custody-demo.codefi.network",
+          custodyType: "jupiter",
+          envName: "jupiter-demo",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+      custodyKeyring.addAccounts(1);
+
+      const result = await custodyKeyring.getTransactionDeepLink("0x123456", "12345");
+
+      expect(result).toEqual({
+        text: "Approve the transaction in the Jupiter Custody app. Once all required custody approvals have been performed the transaction will complete. Check your Jupiter Custody app for status.",
+        url: "https://jupiter-custody-ui-demo.codefi.network/12345",
+      });
+    });
+  });
+
+  describe("signMessage", () => {
+    it("should throw an exception", () => {
+      expect(() => custodyKeyring.signMessage()).toThrowError("Not supported on this custodian");
+    });
+  });
+
+  describe("exportAccount", () => {
+    it("should throw an exception", () => {
+      expect(() => custodyKeyring.exportAccount()).toThrowError("Not supported on this custodian");
+    });
+  });
+
+  describe("getErc20Tokens", () => {
+    it("should call getErc20Tokens for every jwt/URL pair", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123458",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+        {
+          name: "myCoolAccount1",
+          address: "0x123459",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt2",
+          apiUrl: "apiUrl2",
+          custodyType: "jupiter",
+          envName: "jupiter2",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+
+      custodyKeyring.addAccounts(2);
+
+      await custodyKeyring.getErc20Tokens();
+
+      expect(mockMMISDK.getErc20Tokens).toHaveBeenCalledTimes(2);
+    });
+  });
+
+  describe("getStatusMap", () => {
+    it("should return the status map", () => {
+      expect(custodyKeyring.getStatusMap()).toEqual(JupiterStatusMap);
+    });
+  });
+
+  describe("signTypedData", () => {
+    it("should call signTypedData on the SDK", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123458",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+
+      custodyKeyring.addAccounts(1);
+
+      const fromAddress = mockSelectedAddresses[0].address;
+
+      await custodyKeyring.signTypedData(fromAddress, "data", {
+        version: "V4",
+      });
+
+      expect(mockMMISDK.signedTypedData_v4).toHaveBeenCalledWith(fromAddress, "data", "V4", {
+        chainId: null,
+        note: null,
+        originUrl: null,
+      });
+    });
+
+    it("throws an exception if an invalid version is specified", () => {
+      expect(custodyKeyring.signTypedData("0x1236", "data", { version: "V9000" })).rejects.toThrowError(
+        "Only signedTypedData_v4 and signedTypedData_v3 is supported",
+      );
+    });
+  });
+
+  describe("signPersonalMessage", () => {
+    it("should call signPersonalMessage on the SDK", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123458",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+
+      custodyKeyring.addAccounts(1);
+
+      const fromAddress = mockSelectedAddresses[0].address;
+
+      await custodyKeyring.signPersonalMessage(fromAddress, "data", null);
+
+      expect(mockMMISDK.signPersonalMessage).toHaveBeenCalledWith(fromAddress, "data", {
+        chainId: null,
+        note: null,
+        originUrl: null,
+      });
+    });
+  });
+
+  describe("getSupportedChains", () => {
+    it("should return the supported chains", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123458",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+
+      custodyKeyring.addAccounts(1);
+
+      const fromAddress = mockSelectedAddresses[0].address;
+
+      const result = await custodyKeyring.getSupportedChains(fromAddress);
+      expect(mockMMISDK.getSupportedChains).toHaveBeenCalled();
+      expect(result).toEqual(["4"]);
+    });
+  });
+
+  describe("getAllAccountsWithToken", () => {
+    it("should get all the accounts with a specific token", () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123458",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "apiUrl",
+          custodyType: "jupiter",
+          envName: "jupiter",
+        },
+        {
+          name: "myCoolAccount2",
+          address: "0x123458",
+          custodianDetails: {},
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt2",
+          apiUrl: "apiUrl2",
+          custodyType: "jupiter",
+          envName: "jupiter2",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+
+      custodyKeyring.addAccounts(1);
+
+      // eslint-disable-next-line @typescript-eslint/no-unused-vars
+      const { token: _token, ...accountWithoutToken } = mockSelectedAddresses[0];
+
+      expect(custodyKeyring.getAllAccountsWithToken("jwt")).toEqual([
+        {
+          ...accountWithoutToken,
+          authDetails: { jwt: "jwt" },
+          meta: { version: 1 },
+        },
+      ]);
+    });
+  });
+});
diff --git a/src/custodianTypes/jupiter/JupiterCustodyKeyring.ts b/src/custodianTypes/jupiter/JupiterCustodyKeyring.ts
index 90b60f46580636dbb3b248b847cbc4900f4f7b85..8480bdf65a74a0d92e9533a983d431cd462c2213 100644
--- a/src/custodianTypes/jupiter/JupiterCustodyKeyring.ts
+++ b/src/custodianTypes/jupiter/JupiterCustodyKeyring.ts
@@ -44,14 +44,17 @@ export class JupiterCustodyKeyring extends CustodyKeyring {
     ],
   };
 
-  sdkFactory = (authDetails: AuthDetails, apiUrl: string): MMISDK =>
-    mmiSDKFactory(JupiterCustodianApi, authDetails, this.authType, apiUrl);
+  sdkFactory = (authDetails: AuthDetails, envName: string): MMISDK => {
+    const { apiUrl } = this.getCustodianFromEnvName(envName);
+    return mmiSDKFactory(JupiterCustodianApi, authDetails, this.authType, apiUrl);
+  };
 
   txDeepLink = async (address: string, txId) => {
     // Currently the Jupiter custody UI has no transaction dialog, but one has been asked for
     // https://consensys.slack.com/archives/C02F5G7SZU1/p1634735561046100
 
-    const { apiUrl } = this.getAccountDetails(address);
+    const { envName } = this.getAccountDetails(address);
+    const { apiUrl } = this.getCustodianFromEnvName(envName);
 
     const transactionLink: Partial<ICustodianTransactionLink> = {
       text: "Approve the transaction in the Jupiter Custody app. Once all required custody approvals have been performed the transaction will complete. Check your Jupiter Custody app for status.",
diff --git a/src/custodianTypes/qredo/QredoCustodyKeyring.test.ts b/src/custodianTypes/qredo/QredoCustodyKeyring.test.ts
new file mode 100644
index 0000000000000000000000000000000000000000..607c50b1ca161ed20270e3681ee9d7e9de98e25d
--- /dev/null
+++ b/src/custodianTypes/qredo/QredoCustodyKeyring.test.ts
@@ -0,0 +1,145 @@
+import { MMISDK, mmiSDKFactory } from "@metamask-institutional/sdk";
+import { IExtensionCustodianAccount, IRefreshTokenAuthDetails } from "@metamask-institutional/types";
+import crypto, { Hash } from "crypto";
+import { MmiConfigurationController } from "src/MmiConfiguration";
+import { mocked } from "ts-jest/utils";
+
+import { QredoCustodyKeyring } from "./QredoCustodyKeyring";
+import { QredoStatusMap } from "./QredoStatusMap";
+
+jest.mock("@metamask-institutional/sdk");
+
+const mockedMmiSdkFactory = mocked(mmiSDKFactory, true);
+
+const mockMMISDK = {
+  getAccountHierarchy: jest.fn(),
+  getEthereumAccounts: jest.fn().mockResolvedValue([
+    {
+      name: "myCoolAccount",
+      address: "0x123456",
+      custodianDetails: {},
+      labels: [{ key: "my-label", value: "my-label" }],
+      jwt: "jwt",
+      apiUrl: "https://qredo-api.com",
+      envName: "qredo",
+    },
+  ]),
+  getEthereumAccountsByAddress: jest.fn().mockResolvedValue([]),
+  getEthereumAccountsByLabelOrAddressName: jest.fn().mockResolvedValue([]),
+  createTransaction: jest.fn(),
+  getTransaction: jest.fn(),
+  getAllTransactions: jest.fn(),
+  getCustomerId: jest.fn(),
+  signedTypedData_v4: jest.fn(),
+  getErc20Tokens: jest.fn(),
+  subscribeToEvents: jest.fn(),
+  registerEventCallback: jest.fn(),
+  handlePing: jest.fn(),
+  checkPing: jest.fn(),
+  handleEvent: jest.fn(),
+  getTransactionLink: jest.fn().mockResolvedValue(null),
+  on: jest.fn(),
+  eventCallbacks: [],
+  jwt: "",
+  defaultCacheAgeSeconds: 0,
+  lastPing: 0,
+  pingCheckRunning: false,
+  cache: null,
+  custodianApi: null,
+};
+
+describe("QredoCustodyKeyring", () => {
+  let custodyKeyring: QredoCustodyKeyring;
+
+  beforeEach(() => {
+    custodyKeyring = new QredoCustodyKeyring({
+      mmiConfigurationController: {
+        store: {
+          getState: jest.fn().mockReturnValue({
+            mmiConfiguration: {
+              custodians: [
+                {
+                  apiUrl: "https://qredo-api.com",
+                  envName: "qredo",
+                },
+              ],
+            },
+          }),
+        },
+      } as unknown as MmiConfigurationController,
+    });
+    jest.clearAllMocks();
+    mockedMmiSdkFactory.mockReturnValue(mockMMISDK as unknown as MMISDK);
+  });
+
+  describe("getTransactionDeepLink", () => {
+    it("should resolve to null", async () => {
+      const mockSelectedAddresses: IExtensionCustodianAccount[] = [
+        {
+          name: "myCoolAccount1",
+          address: "0x123456",
+          custodianDetails: { wallet_id: "test" },
+          labels: [{ key: "my-label", value: "my-label" }],
+          token: "jwt",
+          apiUrl: "https://qredo-api.com",
+          chainId: 4,
+          custodyType: "Qredo",
+          envName: "qredo",
+        },
+      ];
+
+      custodyKeyring.setSelectedAddresses(mockSelectedAddresses);
+      custodyKeyring.addAccounts(1);
+
+      const result = await custodyKeyring.getTransactionDeepLink("0x123456", "12345");
+
+      expect(result).toEqual(null);
+    });
+  });
+
+  describe("getStatusMap", () => {
+    it("should return the status map", () => {
+      expect(custodyKeyring.getStatusMap()).toEqual(QredoStatusMap);
+    });
+  });
+
+  // This method is tested in the Jupiter Keyring test, but that has a different AuthType
+  describe("hashAuthDetails", () => {
+    it("should hash the refreshtoken together with the custodian API URL", () => {
+      const authDetails: IRefreshTokenAuthDetails = {
+        refreshToken: "miaow",
+      };
+
+      const url = "https://qredo-api.com";
+      const envName = "qredo";
+
+      const hashMock = {
+        update: jest.fn().mockReturnThis(),
+        digest: jest.fn().mockReturnValueOnce("fake hash"),
+      } as unknown as Hash;
+
+      // Mocking the crypto module
+      const createHashMock = jest.spyOn(crypto, "createHash").mockImplementationOnce(() => hashMock);
+
+      const result = custodyKeyring.hashAuthDetails(authDetails, envName);
+
+      expect(createHashMock).toBeCalledWith("sha256");
+      expect(hashMock.update).toBeCalledWith(authDetails.refreshToken + url);
+      expect(hashMock.digest).toBeCalledWith("hex");
+
+      expect(result).toEqual("fake hash");
+    });
+  });
+
+  describe("createAuthDetails", () => {
+    it("should take a token and turn it into IRefreshTokenAuthDetails", () => {
+      const refreshToken = "token";
+
+      const result = custodyKeyring.createAuthDetails(refreshToken);
+
+      expect(result).toEqual({
+        refreshToken,
+      });
+    });
+  });
+});
diff --git a/src/custodianTypes/qredo/QredoCustodyKeyring.ts b/src/custodianTypes/qredo/QredoCustodyKeyring.ts
index f376eedd360ae7deda6cf019670b846ee33c4046..376527c9c6277d7f1a21f2c31736590fc9716e36 100644
--- a/src/custodianTypes/qredo/QredoCustodyKeyring.ts
+++ b/src/custodianTypes/qredo/QredoCustodyKeyring.ts
@@ -44,8 +44,10 @@ export class QredoCustodyKeyring extends CustodyKeyring {
 
   public static addressType: AddressType.POLYCHAIN;
 
-  sdkFactory = (authDetails: IRefreshTokenAuthDetails, apiUrl: string): MMISDK =>
-    mmiSDKFactory(QredoCustodianApi, authDetails, this.authType, apiUrl);
+  sdkFactory = (authDetails: IRefreshTokenAuthDetails, envName: string): MMISDK => {
+    const { apiUrl } = this.getCustodianFromEnvName(envName);
+    return mmiSDKFactory(QredoCustodianApi, authDetails, this.authType, apiUrl);
+  };
 
   txDeepLink = async (_address: string, _txId: string): Promise<Partial<ICustodianTransactionLink>> => {
     return null;
diff --git a/src/migrations/001.test.ts b/src/migrations/001.test.ts
new file mode 100644
index 0000000000000000000000000000000000000000..06c52193295428baccc53205545aa51c97f1412a
--- /dev/null
+++ b/src/migrations/001.test.ts
@@ -0,0 +1,34 @@
+import { AuthTypes } from "@metamask-institutional/types";
+
+import { CUSTODIAN_TYPES } from "..";
+import migration1 from "./001";
+
+describe("migration #1", function () {
+  it("should add authDetails to keyrings accountDetails", function (done) {
+    const data = {
+      custodianType: CUSTODIAN_TYPES.JUPITER,
+      type: "Custody - Curv",
+      authType: AuthTypes.TOKEN,
+      meta: { version: 0 },
+      jwt: "jwt1",
+      accountsDetails: [{ jwt: "jwt1" }],
+    };
+    const migratedData = migration1.migrate(data);
+    expect(migratedData.accountsDetails[0].authDetails.jwt).toBe("jwt1");
+    done();
+  });
+
+  it("should add the default API URL", function (done) {
+    const data = {
+      custodianType: CUSTODIAN_TYPES.JUPITER,
+      type: "Custody - Curv",
+      authType: AuthTypes.TOKEN,
+      meta: { version: 0 },
+      jwt: "jwt1",
+      accountsDetails: [{ jwt: "jwt1" }],
+    };
+    const migratedData = migration1.migrate(data);
+    expect(migratedData.accountsDetails[0].apiUrl).toBe(data.custodianType.apiUrl);
+    done();
+  });
+});
diff --git a/src/migrations/migrator.test.ts b/src/migrations/migrator.test.ts
new file mode 100644
index 0000000000000000000000000000000000000000..e044d5e93eb9901cd3cf38cce6e1b44e241e6741
--- /dev/null
+++ b/src/migrations/migrator.test.ts
@@ -0,0 +1,124 @@
+import { AuthTypes } from "@metamask-institutional/types";
+import { strict as assert } from "assert";
+import fs from "fs";
+import cloneDeep from "lodash.clonedeep";
+
+import { migrations as liveMigrations } from ".";
+import { CUSTODIAN_TYPES } from "..";
+import { Migrator } from "./migrator";
+
+const stubMigrations = [
+  {
+    version: 1,
+    keyringTypesToChange: ["Custody - Test", "Custody - Jupiter"],
+    migrate: state => {
+      // clone the data just like we do in migrations
+      const clonedData = cloneDeep(state);
+      clonedData.meta = {
+        version: 1,
+      };
+      return clonedData;
+    },
+  },
+  {
+    version: 2,
+    keyringTypesToChange: ["Custody - Test", "Custody - Jupiter"],
+    migrate: state => {
+      const clonedData = cloneDeep(state);
+      clonedData.meta = {
+        version: 2,
+      };
+      return clonedData;
+    },
+  },
+  {
+    version: 3,
+    keyringTypesToChange: ["Custody - Test", "Custody - Jupiter"],
+    migrate: state => {
+      const clonedData = cloneDeep(state);
+      clonedData.meta = {
+        version: 3,
+      };
+      return clonedData;
+    },
+  },
+];
+const versionedData = {
+  type: "Custody - Test",
+  authType: AuthTypes.TOKEN,
+  meta: { version: 0 },
+  jwt: "jwt0",
+  accountsDetails: [{ jwt: "jwt0" }],
+};
+
+describe("migrations", function () {
+  describe("liveMigrations require list", function () {
+    let migrationNumbers;
+
+    beforeAll(function () {
+      const fileNames = fs.readdirSync("./src/migrations/");
+      migrationNumbers = fileNames
+        .reduce((acc: string[] = [], filename) => {
+          const name = filename.split(".")[0];
+          if (/^\d+$/u.test(name)) {
+            acc.push(name);
+          }
+          return acc;
+        }, [])
+        .map(num => parseInt(num, 10));
+    });
+
+    it("should include all migrations", function () {
+      migrationNumbers.forEach(num => {
+        const migration = liveMigrations.find(m => m.version === num);
+        assert(migration, `migration not included in 'migrations/index.js': ${num}`);
+      });
+    });
+
+    it("should have tests for all migrations", function () {
+      const fileNames = fs.readdirSync("./src/migrations/");
+      const testNumbers = fileNames
+        .reduce((acc: string[] = [], filename) => {
+          const name = filename.split(".test.")[0];
+          if (/^\d+$/u.test(name)) {
+            acc.push(name);
+          }
+          return acc;
+        }, [])
+        .map(num => parseInt(num, 10));
+
+      migrationNumbers.forEach(num => {
+        if (num >= 33) {
+          assert.ok(testNumbers.includes(num), `no test found for migration: ${num}`);
+        }
+      });
+    });
+  });
+
+  describe("Migrator", function () {
+    it("migratedData version should be version 3", async function () {
+      const migrator = new Migrator({ migrations: stubMigrations });
+      const migratedData = await migrator.migrateData(versionedData);
+      assert.equal(migratedData.meta.version, stubMigrations[2].version);
+    });
+
+    it("should match the last version in live migrations", async function () {
+      const migrator = new Migrator({ migrations: liveMigrations });
+      const keyring = {
+        type: "Custody - Jupiter",
+        custodianType: CUSTODIAN_TYPES.JUPITER,
+        authType: AuthTypes.TOKEN,
+        accountsDetails: [
+          {
+            jwt: "jwt1",
+          } as any,
+        ],
+      };
+
+      const migratedKeyring = migrator.migrateData(keyring);
+      // console.log('migratedKeyring: ', migratedKeyring);
+      const last = liveMigrations.length - 1;
+      assert.equal(migratedKeyring.meta.version, liveMigrations[last].version);
+    });
+  });
+});
