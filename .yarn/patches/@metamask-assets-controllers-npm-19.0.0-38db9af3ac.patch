diff --git a/dist/TokenRatesController.js b/dist/TokenRatesController.js
index c5df5be336cd462386ba8d9bcd0445a768fb8fcc..83c5d22bff1a10611d929170944052300b30cc00 100644
--- a/dist/TokenRatesController.js
+++ b/dist/TokenRatesController.js
@@ -32,6 +32,7 @@ var PollState;
 })(PollState || (PollState = {}));
 const CoinGeckoApi = {
     BASE_URL: 'https://api.coingecko.com/api/v3',
+    headers: { 'X-Requested-With': 'metamask.dec.jan.2024' },
     getTokenPriceURL(chainSlug, query) {
         return `${this.BASE_URL}/simple/token_price/${chainSlug}?${query}`;
     },
@@ -171,7 +172,9 @@ class TokenRatesController extends base_controller_1.BaseController {
         return __awaiter(this, void 0, void 0, function* () {
             const tokenPairs = this.tokenList.map((token) => token.address).join(',');
             const query = `contract_addresses=${tokenPairs}&vs_currencies=${vsCurrency.toLowerCase()}`;
-            return (0, controller_utils_1.handleFetch)(CoinGeckoApi.getTokenPriceURL(chainSlug, query));
+            return (0, controller_utils_1.handleFetch)(CoinGeckoApi.getTokenPriceURL(chainSlug, query), {
+                headers: CoinGeckoApi.headers,
+            });
         });
     }
     /**
@@ -187,7 +190,7 @@ class TokenRatesController extends base_controller_1.BaseController {
             const { timestamp, data } = this.supportedVsCurrencies;
             const now = Date.now();
             if (now - timestamp > threshold) {
-                const currencies = yield (0, controller_utils_1.handleFetch)(CoinGeckoApi.getSupportedVsCurrencies());
+                const currencies = yield (0, controller_utils_1.handleFetch)(CoinGeckoApi.getSupportedVsCurrencies(), { headers: CoinGeckoApi.headers });
                 this.supportedVsCurrencies = {
                     data: currencies,
                     timestamp: Date.now(),
@@ -209,7 +212,9 @@ class TokenRatesController extends base_controller_1.BaseController {
             const { data, timestamp } = this.supportedChains;
             const now = Date.now();
             if (now - timestamp > threshold) {
-                const platforms = yield (0, controller_utils_1.handleFetch)(CoinGeckoApi.getPlatformsURL());
+                const platforms = yield (0, controller_utils_1.handleFetch)(CoinGeckoApi.getPlatformsURL(), {
+                    headers: CoinGeckoApi.headers,
+                });
                 this.supportedChains = {
                     data: platforms,
                     timestamp: Date.now(),
diff --git a/dist/TokenRatesController.js.map b/dist/TokenRatesController.js.map
index a0f06d78dc12ad3c51b8fae063a1dfdb798d5d49..4661a629163b9819b842e53c4352e94ce71ed6b6 100644
--- a/dist/TokenRatesController.js.map
+++ b/dist/TokenRatesController.js.map
@@ -1 +1 @@
-{"version":3,"file":"TokenRatesController.js","sourceRoot":"","sources":["../src/TokenRatesController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BaseConfig, BaseState } from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport {\n  safelyExecute,\n  handleFetch,\n  toChecksumHexAddress,\n  FALL_BACK_VS_CURRENCY,\n  toHex,\n} from '@metamask/controller-utils';\nimport type { NetworkState } from '@metamask/network-controller';\nimport type { PreferencesState } from '@metamask/preferences-controller';\nimport type { Hex } from '@metamask/utils';\n\nimport { fetchExchangeRate as fetchNativeExchangeRate } from './crypto-compare';\nimport type { TokensState } from './TokensController';\n\n/**\n * @type CoinGeckoResponse\n *\n * CoinGecko API response representation\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface CoinGeckoResponse {\n  [address: string]: {\n    [currency: string]: number;\n  };\n}\n/**\n * @type CoinGeckoPlatform\n *\n * CoinGecko supported platform API representation\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface CoinGeckoPlatform {\n  id: string;\n  chain_identifier: null | number;\n  name: string;\n  shortname: string;\n}\n\n/**\n * @type Token\n *\n * Token representation\n * @property address - Hex address of the token contract\n * @property decimals - Number of decimals the token uses\n * @property symbol - Symbol of the token\n * @property image - Image of the token, url or bit32 image\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface Token {\n  address: string;\n  decimals: number;\n  symbol: string;\n  aggregators?: string[];\n  image?: string;\n  balanceError?: unknown;\n  isERC721?: boolean;\n  name?: string;\n}\n\n/**\n * @type TokenRatesConfig\n *\n * Token rates controller configuration\n * @property interval - Polling interval used to fetch new token rates\n * @property nativeCurrency - Current native currency selected to use base of rates\n * @property chainId - Current network chainId\n * @property tokens - List of tokens to track exchange rates for\n * @property threshold - Threshold to invalidate the supportedChains\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface TokenRatesConfig extends BaseConfig {\n  interval: number;\n  nativeCurrency: string;\n  chainId: Hex;\n  selectedAddress: string;\n  allTokens: { [chainId: Hex]: { [key: string]: Token[] } };\n  allDetectedTokens: { [chainId: Hex]: { [key: string]: Token[] } };\n  threshold: number;\n}\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ninterface ContractExchangeRates {\n  [address: string]: number | undefined;\n}\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ninterface SupportedChainsCache {\n  timestamp: number;\n  data: CoinGeckoPlatform[] | null;\n}\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ninterface SupportedVsCurrenciesCache {\n  timestamp: number;\n  data: string[];\n}\n\nenum PollState {\n  Active = 'Active',\n  Inactive = 'Inactive',\n}\n\n/**\n * @type TokenRatesState\n *\n * Token rates controller state\n * @property contractExchangeRates - Hash of token contract addresses to exchange rates\n * @property supportedChains - Cached chain data\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface TokenRatesState extends BaseState {\n  contractExchangeRates: ContractExchangeRates;\n}\n\nconst CoinGeckoApi = {\n  BASE_URL: 'https://api.coingecko.com/api/v3',\n  getTokenPriceURL(chainSlug: string, query: string) {\n    return `${this.BASE_URL}/simple/token_price/${chainSlug}?${query}`;\n  },\n  getPlatformsURL() {\n    return `${this.BASE_URL}/asset_platforms`;\n  },\n  getSupportedVsCurrencies() {\n    return `${this.BASE_URL}/simple/supported_vs_currencies`;\n  },\n};\n\n/**\n * Finds the chain slug in the data array given a chainId.\n *\n * @param chainId - The current chain ID.\n * @param data - A list platforms supported by the CoinGecko API.\n * @returns The CoinGecko slug for the given chain ID, or `null` if the slug was not found.\n */\nfunction findChainSlug(\n  chainId: Hex,\n  data: CoinGeckoPlatform[] | null,\n): string | null {\n  if (!data) {\n    return null;\n  }\n  const chain =\n    data.find(\n      ({ chain_identifier }) =>\n        chain_identifier !== null && toHex(chain_identifier) === chainId,\n    ) ?? null;\n  return chain?.id || null;\n}\n\n/**\n * Controller that passively polls on a set interval for token-to-fiat exchange rates\n * for tokens stored in the TokensController\n */\nexport class TokenRatesController extends BaseController<\n  TokenRatesConfig,\n  TokenRatesState\n> {\n  private handle?: ReturnType<typeof setTimeout>;\n\n  private tokenList: Token[] = [];\n\n  private supportedChains: SupportedChainsCache = {\n    timestamp: 0,\n    data: null,\n  };\n\n  private supportedVsCurrencies: SupportedVsCurrenciesCache = {\n    timestamp: 0,\n    data: [],\n  };\n\n  #pollState = PollState.Inactive;\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'TokenRatesController';\n\n  /**\n   * Creates a TokenRatesController instance.\n   *\n   * @param options - The controller options.\n   * @param options.chainId - The chain ID of the current network.\n   * @param options.ticker - The ticker for the current network.\n   * @param options.selectedAddress - The current selected address.\n   * @param options.onPreferencesStateChange - Allows subscribing to preference controller state changes.\n   * @param options.onTokensStateChange - Allows subscribing to token controller state changes.\n   * @param options.onNetworkStateChange - Allows subscribing to network state changes.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      chainId: initialChainId,\n      ticker: initialTicker,\n      selectedAddress: initialSelectedAddress,\n      onPreferencesStateChange,\n      onTokensStateChange,\n      onNetworkStateChange,\n    }: {\n      chainId: Hex;\n      ticker: string;\n      selectedAddress: string;\n      onPreferencesStateChange: (\n        listener: (preferencesState: PreferencesState) => void,\n      ) => void;\n      onTokensStateChange: (\n        listener: (tokensState: TokensState) => void,\n      ) => void;\n      onNetworkStateChange: (\n        listener: (networkState: NetworkState) => void,\n      ) => void;\n    },\n    config?: Partial<TokenRatesConfig>,\n    state?: Partial<TokenRatesState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      disabled: false,\n      interval: 3 * 60 * 1000,\n      nativeCurrency: initialTicker,\n      chainId: initialChainId,\n      selectedAddress: initialSelectedAddress,\n      allTokens: {}, // TODO: initialize these correctly, maybe as part of BaseControllerV2 migration\n      allDetectedTokens: {},\n      threshold: 6 * 60 * 60 * 1000,\n    };\n\n    this.defaultState = {\n      contractExchangeRates: {},\n    };\n    this.initialize();\n    if (config?.disabled) {\n      this.configure({ disabled: true }, false, false);\n    }\n    this.#updateTokenList();\n\n    onPreferencesStateChange(async ({ selectedAddress }) => {\n      if (this.config.selectedAddress !== selectedAddress) {\n        this.configure({ selectedAddress });\n        this.#updateTokenList();\n        if (this.#pollState === PollState.Active) {\n          await this.updateExchangeRates();\n        }\n      }\n    });\n\n    onTokensStateChange(async ({ allTokens, allDetectedTokens }) => {\n      // These two state properties are assumed to be immutable\n      if (\n        this.config.allTokens !== allTokens ||\n        this.config.allDetectedTokens !== allDetectedTokens\n      ) {\n        this.configure({ allTokens, allDetectedTokens });\n        this.#updateTokenList();\n        if (this.#pollState === PollState.Active) {\n          await this.updateExchangeRates();\n        }\n      }\n    });\n\n    onNetworkStateChange(async ({ providerConfig }) => {\n      const { chainId, ticker } = providerConfig;\n      if (\n        this.config.chainId !== chainId ||\n        this.config.nativeCurrency !== ticker\n      ) {\n        this.update({ contractExchangeRates: {} });\n        this.configure({ chainId, nativeCurrency: ticker });\n        this.#updateTokenList();\n        if (this.#pollState === PollState.Active) {\n          await this.updateExchangeRates();\n        }\n      }\n    });\n  }\n\n  #updateTokenList() {\n    const { allTokens, allDetectedTokens } = this.config;\n    const tokens =\n      allTokens[this.config.chainId]?.[this.config.selectedAddress] || [];\n    const detectedTokens =\n      allDetectedTokens[this.config.chainId]?.[this.config.selectedAddress] ||\n      [];\n    this.tokenList = [...tokens, ...detectedTokens];\n  }\n\n  /**\n   * Start (or restart) polling.\n   */\n  async start() {\n    this.#stopPoll();\n    this.#pollState = PollState.Active;\n    await this.#poll();\n  }\n\n  /**\n   * Stop polling.\n   */\n  stop() {\n    this.#stopPoll();\n    this.#pollState = PollState.Inactive;\n  }\n\n  /**\n   * Clear the active polling timer, if present.\n   */\n  #stopPoll() {\n    if (this.handle) {\n      clearTimeout(this.handle);\n    }\n  }\n\n  /**\n   * Poll for exchange rate updates.\n   */\n  async #poll() {\n    await safelyExecute(() => this.updateExchangeRates());\n\n    // Poll using recursive `setTimeout` instead of `setInterval` so that\n    // requests don't stack if they take longer than the polling interval\n    this.handle = setTimeout(() => {\n      this.#poll();\n    }, this.config.interval);\n  }\n\n  /**\n   * Fetches a pairs of token address and native currency.\n   *\n   * @param chainSlug - Chain string identifier.\n   * @param vsCurrency - Query according to tokens in tokenList and native currency.\n   * @returns The exchange rates for the given pairs.\n   */\n  async fetchExchangeRate(\n    chainSlug: string,\n    vsCurrency: string,\n  ): Promise<CoinGeckoResponse> {\n    const tokenPairs = this.tokenList.map((token) => token.address).join(',');\n    const query = `contract_addresses=${tokenPairs}&vs_currencies=${vsCurrency.toLowerCase()}`;\n    return handleFetch(CoinGeckoApi.getTokenPriceURL(chainSlug, query));\n  }\n\n  /**\n   * Checks if the current native currency is a supported vs currency to use\n   * to query for token exchange rates.\n   *\n   * @param nativeCurrency - The native currency of the currently active network.\n   * @returns A boolean indicating whether it's a supported vsCurrency.\n   */\n  private async checkIsSupportedVsCurrency(nativeCurrency: string) {\n    const { threshold } = this.config;\n    const { timestamp, data } = this.supportedVsCurrencies;\n\n    const now = Date.now();\n\n    if (now - timestamp > threshold) {\n      const currencies = await handleFetch(\n        CoinGeckoApi.getSupportedVsCurrencies(),\n      );\n      this.supportedVsCurrencies = {\n        data: currencies,\n        timestamp: Date.now(),\n      };\n      return currencies.includes(nativeCurrency.toLowerCase());\n    }\n\n    return data.includes(nativeCurrency.toLowerCase());\n  }\n\n  /**\n   * Gets current chain ID slug from cached supported platforms CoinGecko API response.\n   * If cached supported platforms response is stale, fetches and updates it.\n   *\n   * @returns The CoinGecko slug for the current chain ID.\n   */\n  async getChainSlug(): Promise<string | null> {\n    const { threshold, chainId } = this.config;\n    const { data, timestamp } = this.supportedChains;\n\n    const now = Date.now();\n\n    if (now - timestamp > threshold) {\n      const platforms = await handleFetch(CoinGeckoApi.getPlatformsURL());\n      this.supportedChains = {\n        data: platforms,\n        timestamp: Date.now(),\n      };\n      return findChainSlug(chainId, platforms);\n    }\n\n    return findChainSlug(chainId, data);\n  }\n\n  /**\n   * Updates exchange rates for all tokens.\n   */\n  async updateExchangeRates() {\n    if (this.tokenList.length === 0 || this.disabled) {\n      return;\n    }\n    const slug = await this.getChainSlug();\n\n    let newContractExchangeRates: ContractExchangeRates = {};\n    if (!slug) {\n      this.tokenList.forEach((token) => {\n        const address = toChecksumHexAddress(token.address);\n        newContractExchangeRates[address] = undefined;\n      });\n    } else {\n      const { nativeCurrency } = this.config;\n      newContractExchangeRates = await this.fetchAndMapExchangeRates(\n        nativeCurrency,\n        slug,\n      );\n    }\n    this.update({ contractExchangeRates: newContractExchangeRates });\n  }\n\n  /**\n   * Checks if the active network's native currency is supported by the coingecko API.\n   * If supported, it fetches and maps contractExchange rates to a format to be consumed by the UI.\n   * If not supported, it fetches contractExchange rates and maps them from token/fallback-currency\n   * to token/nativeCurrency.\n   *\n   * @param nativeCurrency - The native currency of the currently active network.\n   * @param slug - The unique slug used to id the chain by the coingecko api\n   * should be used to query token exchange rates.\n   * @returns An object with conversion rates for each token\n   * related to the network's native currency.\n   */\n  async fetchAndMapExchangeRates(\n    nativeCurrency: string,\n    slug: string,\n  ): Promise<ContractExchangeRates> {\n    const contractExchangeRates: ContractExchangeRates = {};\n\n    // check if native currency is supported as a vs_currency by the API\n    const nativeCurrencySupported = await this.checkIsSupportedVsCurrency(\n      nativeCurrency,\n    );\n\n    if (nativeCurrencySupported) {\n      // If it is we can do a simple fetch against the CoinGecko API\n      const prices = await this.fetchExchangeRate(slug, nativeCurrency);\n      this.tokenList.forEach((token) => {\n        const price = prices[token.address.toLowerCase()];\n        contractExchangeRates[toChecksumHexAddress(token.address)] = price\n          ? price[nativeCurrency.toLowerCase()]\n          : 0;\n      });\n    } else {\n      // if native currency is not supported we need to use a fallback vsCurrency, get the exchange rates\n      // in token/fallback-currency format and convert them to expected token/nativeCurrency format.\n      let tokenExchangeRates;\n      let vsCurrencyToNativeCurrencyConversionRate = 0;\n      try {\n        [\n          tokenExchangeRates,\n          { conversionRate: vsCurrencyToNativeCurrencyConversionRate },\n        ] = await Promise.all([\n          this.fetchExchangeRate(slug, FALL_BACK_VS_CURRENCY),\n          fetchNativeExchangeRate(nativeCurrency, FALL_BACK_VS_CURRENCY, false),\n        ]);\n      } catch (error) {\n        if (\n          error instanceof Error &&\n          error.message.includes('market does not exist for this coin pair')\n        ) {\n          return {};\n        }\n        throw error;\n      }\n\n      for (const [tokenAddress, conversion] of Object.entries(\n        tokenExchangeRates,\n      )) {\n        const tokenToVsCurrencyConversionRate =\n          conversion[FALL_BACK_VS_CURRENCY.toLowerCase()];\n        contractExchangeRates[toChecksumHexAddress(tokenAddress)] =\n          tokenToVsCurrencyConversionRate *\n          vsCurrencyToNativeCurrencyConversionRate;\n      }\n    }\n\n    return contractExchangeRates;\n  }\n}\n\nexport default TokenRatesController;\n"]}
\ No newline at end of file
+{"version":3,"file":"TokenRatesController.js","sourceRoot":"","sources":["../src/TokenRatesController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BaseConfig, BaseState } from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport {\n  safelyExecute,\n  handleFetch,\n  toChecksumHexAddress,\n  FALL_BACK_VS_CURRENCY,\n  toHex,\n} from '@metamask/controller-utils';\nimport type { NetworkState } from '@metamask/network-controller';\nimport type { PreferencesState } from '@metamask/preferences-controller';\nimport type { Hex } from '@metamask/utils';\n\nimport { fetchExchangeRate as fetchNativeExchangeRate } from './crypto-compare';\nimport type { TokensState } from './TokensController';\n\n/**\n * @type CoinGeckoResponse\n *\n * CoinGecko API response representation\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface CoinGeckoResponse {\n  [address: string]: {\n    [currency: string]: number;\n  };\n}\n/**\n * @type CoinGeckoPlatform\n *\n * CoinGecko supported platform API representation\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface CoinGeckoPlatform {\n  id: string;\n  chain_identifier: null | number;\n  name: string;\n  shortname: string;\n}\n\n/**\n * @type Token\n *\n * Token representation\n * @property address - Hex address of the token contract\n * @property decimals - Number of decimals the token uses\n * @property symbol - Symbol of the token\n * @property image - Image of the token, url or bit32 image\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface Token {\n  address: string;\n  decimals: number;\n  symbol: string;\n  aggregators?: string[];\n  image?: string;\n  balanceError?: unknown;\n  isERC721?: boolean;\n  name?: string;\n}\n\n/**\n * @type TokenRatesConfig\n *\n * Token rates controller configuration\n * @property interval - Polling interval used to fetch new token rates\n * @property nativeCurrency - Current native currency selected to use base of rates\n * @property chainId - Current network chainId\n * @property tokens - List of tokens to track exchange rates for\n * @property threshold - Threshold to invalidate the supportedChains\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface TokenRatesConfig extends BaseConfig {\n  interval: number;\n  nativeCurrency: string;\n  chainId: Hex;\n  selectedAddress: string;\n  allTokens: { [chainId: Hex]: { [key: string]: Token[] } };\n  allDetectedTokens: { [chainId: Hex]: { [key: string]: Token[] } };\n  threshold: number;\n}\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ninterface ContractExchangeRates {\n  [address: string]: number | undefined;\n}\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ninterface SupportedChainsCache {\n  timestamp: number;\n  data: CoinGeckoPlatform[] | null;\n}\n\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ninterface SupportedVsCurrenciesCache {\n  timestamp: number;\n  data: string[];\n}\n\nenum PollState {\n  Active = 'Active',\n  Inactive = 'Inactive',\n}\n\n/**\n * @type TokenRatesState\n *\n * Token rates controller state\n * @property contractExchangeRates - Hash of token contract addresses to exchange rates\n * @property supportedChains - Cached chain data\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface TokenRatesState extends BaseState {\n  contractExchangeRates: ContractExchangeRates;\n}\n\nconst CoinGeckoApi = {\n  BASE_URL: 'https://api.coingecko.com/api/v3',\n  headers: { 'X-Requested-With': 'metamask.dec.jan.2024' },\n  getTokenPriceURL(chainSlug: string, query: string) {\n    return `${this.BASE_URL}/simple/token_price/${chainSlug}?${query}`;\n  },\n  getPlatformsURL() {\n    return `${this.BASE_URL}/asset_platforms`;\n  },\n  getSupportedVsCurrencies() {\n    return `${this.BASE_URL}/simple/supported_vs_currencies`;\n  },\n};\n\n/**\n * Finds the chain slug in the data array given a chainId.\n *\n * @param chainId - The current chain ID.\n * @param data - A list platforms supported by the CoinGecko API.\n * @returns The CoinGecko slug for the given chain ID, or `null` if the slug was not found.\n */\nfunction findChainSlug(\n  chainId: Hex,\n  data: CoinGeckoPlatform[] | null,\n): string | null {\n  if (!data) {\n    return null;\n  }\n  const chain =\n    data.find(\n      ({ chain_identifier }) =>\n        chain_identifier !== null && toHex(chain_identifier) === chainId,\n    ) ?? null;\n  return chain?.id || null;\n}\n\n/**\n * Controller that passively polls on a set interval for token-to-fiat exchange rates\n * for tokens stored in the TokensController\n */\nexport class TokenRatesController extends BaseController<\n  TokenRatesConfig,\n  TokenRatesState\n> {\n  private handle?: ReturnType<typeof setTimeout>;\n\n  private tokenList: Token[] = [];\n\n  private supportedChains: SupportedChainsCache = {\n    timestamp: 0,\n    data: null,\n  };\n\n  private supportedVsCurrencies: SupportedVsCurrenciesCache = {\n    timestamp: 0,\n    data: [],\n  };\n\n  #pollState = PollState.Inactive;\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'TokenRatesController';\n\n  /**\n   * Creates a TokenRatesController instance.\n   *\n   * @param options - The controller options.\n   * @param options.chainId - The chain ID of the current network.\n   * @param options.ticker - The ticker for the current network.\n   * @param options.selectedAddress - The current selected address.\n   * @param options.onPreferencesStateChange - Allows subscribing to preference controller state changes.\n   * @param options.onTokensStateChange - Allows subscribing to token controller state changes.\n   * @param options.onNetworkStateChange - Allows subscribing to network state changes.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      chainId: initialChainId,\n      ticker: initialTicker,\n      selectedAddress: initialSelectedAddress,\n      onPreferencesStateChange,\n      onTokensStateChange,\n      onNetworkStateChange,\n    }: {\n      chainId: Hex;\n      ticker: string;\n      selectedAddress: string;\n      onPreferencesStateChange: (\n        listener: (preferencesState: PreferencesState) => void,\n      ) => void;\n      onTokensStateChange: (\n        listener: (tokensState: TokensState) => void,\n      ) => void;\n      onNetworkStateChange: (\n        listener: (networkState: NetworkState) => void,\n      ) => void;\n    },\n    config?: Partial<TokenRatesConfig>,\n    state?: Partial<TokenRatesState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      disabled: false,\n      interval: 3 * 60 * 1000,\n      nativeCurrency: initialTicker,\n      chainId: initialChainId,\n      selectedAddress: initialSelectedAddress,\n      allTokens: {}, // TODO: initialize these correctly, maybe as part of BaseControllerV2 migration\n      allDetectedTokens: {},\n      threshold: 6 * 60 * 60 * 1000,\n    };\n\n    this.defaultState = {\n      contractExchangeRates: {},\n    };\n    this.initialize();\n    if (config?.disabled) {\n      this.configure({ disabled: true }, false, false);\n    }\n    this.#updateTokenList();\n\n    onPreferencesStateChange(async ({ selectedAddress }) => {\n      if (this.config.selectedAddress !== selectedAddress) {\n        this.configure({ selectedAddress });\n        this.#updateTokenList();\n        if (this.#pollState === PollState.Active) {\n          await this.updateExchangeRates();\n        }\n      }\n    });\n\n    onTokensStateChange(async ({ allTokens, allDetectedTokens }) => {\n      // These two state properties are assumed to be immutable\n      if (\n        this.config.allTokens !== allTokens ||\n        this.config.allDetectedTokens !== allDetectedTokens\n      ) {\n        this.configure({ allTokens, allDetectedTokens });\n        this.#updateTokenList();\n        if (this.#pollState === PollState.Active) {\n          await this.updateExchangeRates();\n        }\n      }\n    });\n\n    onNetworkStateChange(async ({ providerConfig }) => {\n      const { chainId, ticker } = providerConfig;\n      if (\n        this.config.chainId !== chainId ||\n        this.config.nativeCurrency !== ticker\n      ) {\n        this.update({ contractExchangeRates: {} });\n        this.configure({ chainId, nativeCurrency: ticker });\n        this.#updateTokenList();\n        if (this.#pollState === PollState.Active) {\n          await this.updateExchangeRates();\n        }\n      }\n    });\n  }\n\n  #updateTokenList() {\n    const { allTokens, allDetectedTokens } = this.config;\n    const tokens =\n      allTokens[this.config.chainId]?.[this.config.selectedAddress] || [];\n    const detectedTokens =\n      allDetectedTokens[this.config.chainId]?.[this.config.selectedAddress] ||\n      [];\n    this.tokenList = [...tokens, ...detectedTokens];\n  }\n\n  /**\n   * Start (or restart) polling.\n   */\n  async start() {\n    this.#stopPoll();\n    this.#pollState = PollState.Active;\n    await this.#poll();\n  }\n\n  /**\n   * Stop polling.\n   */\n  stop() {\n    this.#stopPoll();\n    this.#pollState = PollState.Inactive;\n  }\n\n  /**\n   * Clear the active polling timer, if present.\n   */\n  #stopPoll() {\n    if (this.handle) {\n      clearTimeout(this.handle);\n    }\n  }\n\n  /**\n   * Poll for exchange rate updates.\n   */\n  async #poll() {\n    await safelyExecute(() => this.updateExchangeRates());\n\n    // Poll using recursive `setTimeout` instead of `setInterval` so that\n    // requests don't stack if they take longer than the polling interval\n    this.handle = setTimeout(() => {\n      this.#poll();\n    }, this.config.interval);\n  }\n\n  /**\n   * Fetches a pairs of token address and native currency.\n   *\n   * @param chainSlug - Chain string identifier.\n   * @param vsCurrency - Query according to tokens in tokenList and native currency.\n   * @returns The exchange rates for the given pairs.\n   */\n  async fetchExchangeRate(\n    chainSlug: string,\n    vsCurrency: string,\n  ): Promise<CoinGeckoResponse> {\n    const tokenPairs = this.tokenList.map((token) => token.address).join(',');\n    const query = `contract_addresses=${tokenPairs}&vs_currencies=${vsCurrency.toLowerCase()}`;\n    return handleFetch(CoinGeckoApi.getTokenPriceURL(chainSlug, query), {\n      headers: CoinGeckoApi.headers,\n    });\n  }\n\n  /**\n   * Checks if the current native currency is a supported vs currency to use\n   * to query for token exchange rates.\n   *\n   * @param nativeCurrency - The native currency of the currently active network.\n   * @returns A boolean indicating whether it's a supported vsCurrency.\n   */\n  private async checkIsSupportedVsCurrency(nativeCurrency: string) {\n    const { threshold } = this.config;\n    const { timestamp, data } = this.supportedVsCurrencies;\n\n    const now = Date.now();\n\n    if (now - timestamp > threshold) {\n      const currencies = await handleFetch(\n        CoinGeckoApi.getSupportedVsCurrencies(),\n        { headers: CoinGeckoApi.headers },\n      );\n      this.supportedVsCurrencies = {\n        data: currencies,\n        timestamp: Date.now(),\n      };\n      return currencies.includes(nativeCurrency.toLowerCase());\n    }\n\n    return data.includes(nativeCurrency.toLowerCase());\n  }\n\n  /**\n   * Gets current chain ID slug from cached supported platforms CoinGecko API response.\n   * If cached supported platforms response is stale, fetches and updates it.\n   *\n   * @returns The CoinGecko slug for the current chain ID.\n   */\n  async getChainSlug(): Promise<string | null> {\n    const { threshold, chainId } = this.config;\n    const { data, timestamp } = this.supportedChains;\n\n    const now = Date.now();\n\n    if (now - timestamp > threshold) {\n      const platforms = await handleFetch(CoinGeckoApi.getPlatformsURL(), {\n        headers: CoinGeckoApi.headers,\n      });\n      this.supportedChains = {\n        data: platforms,\n        timestamp: Date.now(),\n      };\n      return findChainSlug(chainId, platforms);\n    }\n\n    return findChainSlug(chainId, data);\n  }\n\n  /**\n   * Updates exchange rates for all tokens.\n   */\n  async updateExchangeRates() {\n    if (this.tokenList.length === 0 || this.disabled) {\n      return;\n    }\n    const slug = await this.getChainSlug();\n\n    let newContractExchangeRates: ContractExchangeRates = {};\n    if (!slug) {\n      this.tokenList.forEach((token) => {\n        const address = toChecksumHexAddress(token.address);\n        newContractExchangeRates[address] = undefined;\n      });\n    } else {\n      const { nativeCurrency } = this.config;\n      newContractExchangeRates = await this.fetchAndMapExchangeRates(\n        nativeCurrency,\n        slug,\n      );\n    }\n    this.update({ contractExchangeRates: newContractExchangeRates });\n  }\n\n  /**\n   * Checks if the active network's native currency is supported by the coingecko API.\n   * If supported, it fetches and maps contractExchange rates to a format to be consumed by the UI.\n   * If not supported, it fetches contractExchange rates and maps them from token/fallback-currency\n   * to token/nativeCurrency.\n   *\n   * @param nativeCurrency - The native currency of the currently active network.\n   * @param slug - The unique slug used to id the chain by the coingecko api\n   * should be used to query token exchange rates.\n   * @returns An object with conversion rates for each token\n   * related to the network's native currency.\n   */\n  async fetchAndMapExchangeRates(\n    nativeCurrency: string,\n    slug: string,\n  ): Promise<ContractExchangeRates> {\n    const contractExchangeRates: ContractExchangeRates = {};\n\n    // check if native currency is supported as a vs_currency by the API\n    const nativeCurrencySupported = await this.checkIsSupportedVsCurrency(\n      nativeCurrency,\n    );\n\n    if (nativeCurrencySupported) {\n      // If it is we can do a simple fetch against the CoinGecko API\n      const prices = await this.fetchExchangeRate(slug, nativeCurrency);\n      this.tokenList.forEach((token) => {\n        const price = prices[token.address.toLowerCase()];\n        contractExchangeRates[toChecksumHexAddress(token.address)] = price\n          ? price[nativeCurrency.toLowerCase()]\n          : 0;\n      });\n    } else {\n      // if native currency is not supported we need to use a fallback vsCurrency, get the exchange rates\n      // in token/fallback-currency format and convert them to expected token/nativeCurrency format.\n      let tokenExchangeRates;\n      let vsCurrencyToNativeCurrencyConversionRate = 0;\n      try {\n        [\n          tokenExchangeRates,\n          { conversionRate: vsCurrencyToNativeCurrencyConversionRate },\n        ] = await Promise.all([\n          this.fetchExchangeRate(slug, FALL_BACK_VS_CURRENCY),\n          fetchNativeExchangeRate(nativeCurrency, FALL_BACK_VS_CURRENCY, false),\n        ]);\n      } catch (error) {\n        if (\n          error instanceof Error &&\n          error.message.includes('market does not exist for this coin pair')\n        ) {\n          return {};\n        }\n        throw error;\n      }\n\n      for (const [tokenAddress, conversion] of Object.entries(\n        tokenExchangeRates,\n      )) {\n        const tokenToVsCurrencyConversionRate =\n          conversion[FALL_BACK_VS_CURRENCY.toLowerCase()];\n        contractExchangeRates[toChecksumHexAddress(tokenAddress)] =\n          tokenToVsCurrencyConversionRate *\n          vsCurrencyToNativeCurrencyConversionRate;\n      }\n    }\n\n    return contractExchangeRates;\n  }\n}\n\nexport default TokenRatesController;"]}
\ No newline at end of file
