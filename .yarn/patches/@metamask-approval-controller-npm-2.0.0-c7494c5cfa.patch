diff --git a/dist/ApprovalController.d.ts b/dist/ApprovalController.d.ts
index 64f0572..4d8ddf0 100644
--- a/dist/ApprovalController.d.ts
+++ b/dist/ApprovalController.d.ts
@@ -87,6 +87,7 @@ declare type ApprovalControllerOptions = {
     messenger: ApprovalControllerMessenger;
     showApprovalRequest: ShowApprovalRequest;
     state?: Partial<ApprovalControllerState>;
+    typesExcludedFromRateLimiting?: string[];
 };
 /**
  * Controller for managing requests that require user approval.
@@ -101,6 +102,7 @@ export declare class ApprovalController extends BaseControllerV2<typeof controll
     private _approvals;
     private _origins;
     private _showApprovalRequest;
+    private _typesExcludedFromRateLimiting;
     /**
      * Construct an Approval controller.
      *
@@ -109,8 +111,9 @@ export declare class ApprovalController extends BaseControllerV2<typeof controll
      * the request can be displayed to the user.
      * @param options.messenger - The restricted controller messenger for the Approval controller.
      * @param options.state - The initial controller state.
+     * @param options.typesExcludedFromRateLimiting - Array of aproval types which allow multiple pending approval requests from the same origin.
      */
-    constructor({ messenger, showApprovalRequest, state, }: ApprovalControllerOptions);
+    constructor({ messenger, showApprovalRequest, state, typesExcludedFromRateLimiting, }: ApprovalControllerOptions);
     /**
      * Constructor helper for registering this controller's messaging system
      * actions.
@@ -292,13 +295,6 @@ export declare class ApprovalController extends BaseControllerV2<typeof controll
      * @returns The promise callbacks associated with the approval request.
      */
     private _deleteApprovalAndGetCallbacks;
-    /**
-     * Checks whether there are any approvals associated with the given
-     * origin.
-     *
-     * @param origin - The origin to check.
-     * @returns True if the origin has no approvals, false otherwise.
-     */
-    private _isEmptyOrigin;
 }
 export default ApprovalController;
+//# sourceMappingURL=ApprovalController.d.ts.map
\ No newline at end of file
diff --git a/dist/ApprovalController.js b/dist/ApprovalController.js
index 6666b81..ccd0e68 100644
--- a/dist/ApprovalController.js
+++ b/dist/ApprovalController.js
@@ -35,8 +35,9 @@ class ApprovalController extends base_controller_1.BaseControllerV2 {
      * the request can be displayed to the user.
      * @param options.messenger - The restricted controller messenger for the Approval controller.
      * @param options.state - The initial controller state.
+     * @param options.typesExcludedFromRateLimiting - Array of aproval types which allow multiple pending approval requests from the same origin.
      */
-    constructor({ messenger, showApprovalRequest, state = {}, }) {
+    constructor({ messenger, showApprovalRequest, state = {}, typesExcludedFromRateLimiting = [], }) {
         super({
             name: controllerName,
             metadata: stateMetadata,
@@ -46,6 +47,7 @@ class ApprovalController extends base_controller_1.BaseControllerV2 {
         this._approvals = new Map();
         this._origins = new Map();
         this._showApprovalRequest = showApprovalRequest;
+        this._typesExcludedFromRateLimiting = typesExcludedFromRateLimiting;
         this.registerMessageHandlers();
     }
     /**
@@ -131,16 +133,16 @@ class ApprovalController extends base_controller_1.BaseControllerV2 {
      * type.
      */
     getApprovalCount(opts = {}) {
-        var _a, _b;
+        var _a;
         if (!opts.origin && !opts.type) {
             throw new Error('Must specify origin, type, or both.');
         }
         const { origin, type: _type } = opts;
         if (origin && _type) {
-            return Number(Boolean((_a = this._origins.get(origin)) === null || _a === void 0 ? void 0 : _a.has(_type)));
+            return ((_a = this._origins.get(origin)) === null || _a === void 0 ? void 0 : _a.get(_type)) || 0;
         }
         if (origin) {
-            return ((_b = this._origins.get(origin)) === null || _b === void 0 ? void 0 : _b.size) || 0;
+            return Array.from((this._origins.get(origin) || new Map()).values()).reduce((total, value) => total + value, 0);
         }
         // Only "type" was specified
         let count = 0;
@@ -192,7 +194,7 @@ class ApprovalController extends base_controller_1.BaseControllerV2 {
             }
             // Check origin and type pair if type also specified
             if (_type) {
-                return Boolean((_a = this._origins.get(origin)) === null || _a === void 0 ? void 0 : _a.has(_type));
+                return Boolean((_a = this._origins.get(origin)) === null || _a === void 0 ? void 0 : _a.get(_type));
             }
             return this._origins.has(origin);
         }
@@ -267,9 +269,9 @@ class ApprovalController extends base_controller_1.BaseControllerV2 {
      * @returns The approval promise.
      */
     _add(origin, type, id = (0, nanoid_1.nanoid)(), requestData, requestState) {
-        var _a;
         this._validateAddParams(id, origin, type, requestData, requestState);
-        if ((_a = this._origins.get(origin)) === null || _a === void 0 ? void 0 : _a.has(type)) {
+        if (!this._typesExcludedFromRateLimiting.includes(type) &&
+            this.has({ origin, type })) {
             throw eth_rpc_errors_1.ethErrors.rpc.resourceUnavailable(getAlreadyPendingMessage(origin, type));
         }
         // add pending approval
@@ -322,10 +324,11 @@ class ApprovalController extends base_controller_1.BaseControllerV2 {
      * @param type - The type associated with the approval request.
      */
     _addPendingApprovalOrigin(origin, type) {
-        const originSet = this._origins.get(origin) || new Set();
-        originSet.add(type);
+        const originMap = this._origins.get(origin) || new Map();
+        const currentValue = originMap.get(type) || 0;
+        originMap.set(type, currentValue + 1);
         if (!this._origins.has(origin)) {
-            this._origins.set(origin, originSet);
+            this._origins.set(origin, originMap);
         }
     }
     /**
@@ -367,10 +370,15 @@ class ApprovalController extends base_controller_1.BaseControllerV2 {
         // specified id exists.
         // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
         const { origin, type } = this.state.pendingApprovals[id];
-        this._origins.get(origin).delete(type);
-        if (this._isEmptyOrigin(origin)) {
+        const originMap = this._origins.get(origin);
+        const originTotalCount = this.getApprovalCount({ origin });
+        const originTypeCount = originMap.get(type);
+        if (originTotalCount === 1) {
             this._origins.delete(origin);
         }
+        else {
+            originMap.set(type, originTypeCount - 1);
+        }
         this.update((draftState) => {
             delete draftState.pendingApprovals[id];
             draftState.pendingApprovalCount = Object.keys(draftState.pendingApprovals).length;
@@ -392,17 +400,6 @@ class ApprovalController extends base_controller_1.BaseControllerV2 {
         this._delete(id);
         return callbacks;
     }
-    /**
-     * Checks whether there are any approvals associated with the given
-     * origin.
-     *
-     * @param origin - The origin to check.
-     * @returns True if the origin has no approvals, false otherwise.
-     */
-    _isEmptyOrigin(origin) {
-        var _a;
-        return !((_a = this._origins.get(origin)) === null || _a === void 0 ? void 0 : _a.size);
-    }
 }
 exports.ApprovalController = ApprovalController;
 exports.default = ApprovalController;
