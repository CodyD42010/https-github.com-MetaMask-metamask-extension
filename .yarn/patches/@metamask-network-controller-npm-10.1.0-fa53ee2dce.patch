diff --git a/dist/NetworkController.d.ts.map b/dist/NetworkController.d.ts.map
index 883c7ef21d3a3d0685e5ba67deabae5a38cddc4b..eebff6e5befce4a464e264b75bad0d581de3bc27 100644
--- a/dist/NetworkController.d.ts.map
+++ b/dist/NetworkController.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"NetworkController.d.ts","sourceRoot":"","sources":["../src/NetworkController.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AACpE,OAAO,QAAQ,MAAM,WAAW,CAAC;AACjC,OAAO,EACL,gBAAgB,EAChB,6BAA6B,EAC9B,MAAM,2BAA2B,CAAC;AAEnC,OAAO,KAAK,EAAE,KAAK,EAAE,MAAM,OAAO,CAAC;AAEnC,OAAO,EAKL,iBAAiB,EACjB,WAAW,EAEZ,MAAM,4BAA4B,CAAC;AACpC,OAAO,EACL,GAAG,EAKJ,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAsB,aAAa,EAAE,MAAM,aAAa,CAAC;AAMhE,OAAO,KAAK,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AAItD;;;;;;;;;;GAUG;AACH,oBAAY,cAAc,GAAG;IAC3B,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,IAAI,EAAE,WAAW,CAAC;IAClB,OAAO,EAAE,GAAG,CAAC;IACb,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,QAAQ,CAAC,EAAE;QAAE,gBAAgB,CAAC,EAAE,MAAM,CAAA;KAAE,CAAC;IACzC,EAAE,CAAC,EAAE,sBAAsB,CAAC;CAC7B,CAAC;AAEF,oBAAY,KAAK,GAAG;IAClB,aAAa,CAAC,EAAE,MAAM,CAAC;CACxB,CAAC;AAEF;;;GAGG;AACH,oBAAY,cAAc,GAAG;IAC3B;;OAEG;IACH,IAAI,EAAE;QACJ,CAAC,SAAS,EAAE,MAAM,GAAG,OAAO,CAAC;KAC9B,CAAC;CACH,CAAC;AAEF;;;;;;;;GAQG;AACH,oBAAY,oBAAoB,GAAG;IACjC,MAAM,EAAE,MAAM,CAAC;IACf,OAAO,EAAE,GAAG,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;IACf,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,QAAQ,CAAC,EAAE;QACT,gBAAgB,EAAE,MAAM,CAAC;KAC1B,CAAC;CACH,CAAC;AA8CF;;GAEG;AACH,oBAAY,SAAS,GAAG,GAAG,MAAM,EAAE,CAAC;AAEpC;;;;;;;;GAQG;AACH,oBAAY,YAAY,GAAG;IACzB,SAAS,EAAE,SAAS,GAAG,IAAI,CAAC;IAC5B,aAAa,EAAE,aAAa,CAAC;IAC7B,cAAc,EAAE,cAAc,CAAC;IAC/B,cAAc,EAAE,cAAc,CAAC;IAC/B,qBAAqB,EAAE,MAAM,CAAC,MAAM,EAAE,oBAAoB,GAAG;QAAE,EAAE,EAAE,MAAM,CAAA;KAAE,CAAC,CAAC;CAC9E,CAAC;AAEF,QAAA,MAAM,IAAI,sBAAsB,CAAC;AAEjC,oBAAY,iBAAiB,GAAG,cAAc,CAAC,YAAY,CAAC,CAAC;AAE7D,oBAAY,aAAa,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC;AAErD,oBAAY,iCAAiC,GAAG;IAC9C,IAAI,EAAE,+BAA+B,CAAC;IACtC,OAAO,EAAE,CAAC,YAAY,EAAE,KAAK,EAAE,CAAC,CAAC;CAClC,CAAC;AAEF;;;;GAIG;AACH,oBAAY,uCAAuC,GAAG;IACpD,IAAI,EAAE,qCAAqC,CAAC;IAC5C,OAAO,EAAE,EAAE,CAAC;CACb,CAAC;AAEF;;;GAGG;AACH,oBAAY,sCAAsC,GAAG;IACnD,IAAI,EAAE,oCAAoC,CAAC;IAC3C,OAAO,EAAE,EAAE,CAAC;CACb,CAAC;AAEF;;;;GAIG;AACH,oBAAY,qCAAqC,GAAG;IAClD,IAAI,EAAE,mCAAmC,CAAC;IAC1C,OAAO,EAAE,EAAE,CAAC;CACb,CAAC;AAEF;;;;GAIG;AACH,oBAAY,uCAAuC,GAAG;IACpD,IAAI,EAAE,qCAAqC,CAAC;IAC5C,OAAO,EAAE,EAAE,CAAC;CACb,CAAC;AAEF,oBAAY,uBAAuB,GAC/B,iCAAiC,GACjC,uCAAuC,GACvC,sCAAsC,GACtC,qCAAqC,GACrC,uCAAuC,CAAC;AAE5C,oBAAY,+BAA+B,GAAG;IAC5C,IAAI,EAAE,4BAA4B,CAAC;IACnC,OAAO,EAAE,MAAM,YAAY,CAAC;CAC7B,CAAC;AAEF,oBAAY,wCAAwC,GAAG;IACrD,IAAI,EAAE,qCAAqC,CAAC;IAC5C,OAAO,EAAE,MAAM,cAAc,CAAC;CAC/B,CAAC;AAEF,oBAAY,kCAAkC,GAAG;IAC/C,IAAI,EAAE,+BAA+B,CAAC;IACtC,OAAO,EAAE,MAAM,QAAQ,GAAG,SAAS,CAAC;CACrC,CAAC;AAEF,oBAAY,wBAAwB,GAChC,+BAA+B,GAC/B,wCAAwC,GACxC,kCAAkC,CAAC;AAEvC,oBAAY,0BAA0B,GAAG,6BAA6B,CACpE,OAAO,IAAI,EACX,wBAAwB,EACxB,uBAAuB,EACvB,MAAM,EACN,MAAM,CACP,CAAC;AAEF,oBAAY,wBAAwB,GAAG;IACrC,SAAS,EAAE,0BAA0B,CAAC;IACtC,qBAAqB,EAAE,MAAM,IAAI,CAAC;IAClC,eAAe,EAAE,MAAM,CAAC;IACxB,KAAK,CAAC,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;CAC/B,CAAC;AAEF,eAAO,MAAM,YAAY,EAAE,YAW1B,CAAC;AAeF,aAAK,sBAAsB,GAAG,MAAM,CAAC;AAErC;;GAEG;AACH,qBAAa,iBAAkB,SAAQ,gBAAgB,CACrD,OAAO,IAAI,EACX,YAAY,EACZ,0BAA0B,CAC3B;;gBAaa,EACV,SAAS,EACT,KAAK,EACL,eAAe,EACf,qBAAqB,GACtB,EAAE,wBAAwB;IA4E3B,0BAA0B,IAAI;QAC5B,QAAQ,EAAE,cAAc,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC;QAC/C,YAAY,EAAE,cAAc,CAAC,YAAY,CAAC,GAAG,SAAS,CAAC;KACxD;IA0DD;;;;;OAKG;IACG,kBAAkB;IA4BxB;;;;;;;;;;OAUG;IACG,aAAa;IAgGnB;;;;OAIG;IACG,eAAe,CAAC,IAAI,EAAE,iBAAiB;IA8B7C;;;;OAIG;IACG,gBAAgB,CAAC,sBAAsB,EAAE,MAAM;IA4CrD;;;;;;;OAOG;IACG,uBAAuB;IA+B7B;;OAEG;IACG,eAAe;IA0BrB;;;;;;;;;;;;;;;OAeG;IACG,0BAA0B,CAC9B,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,oBAAoB,EACrE,EACE,SAAiB,EACjB,QAAQ,EACR,MAAM,GACP,EAAE;QAAE,SAAS,CAAC,EAAE,OAAO,CAAC;QAAC,QAAQ,EAAE,MAAM,CAAC;QAAC,MAAM,EAAE,MAAM,CAAA;KAAE,GAC3D,OAAO,CAAC,MAAM,CAAC;IAqFlB;;;;OAIG;IACH,0BAA0B,CAAC,sBAAsB,EAAE,MAAM;IAWzD;;;;OAIG;IACG,0BAA0B;IAOhC;;;;OAIG;IACG,OAAO;IAIb;;;;;OAKG;IACH,UAAU,CAAC,EACT,qBAAqB,GACtB,EAAE;QACD,qBAAqB,EAAE,YAAY,CAAC,uBAAuB,CAAC,CAAC;KAC9D,GAAG,IAAI;CAQT;AAED,eAAe,iBAAiB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"NetworkController.d.ts","sourceRoot":"","sources":["../src/NetworkController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/NetworkController.js b/dist/NetworkController.js
index 1111a8cc91c634ea4a7653e725d5b50a1953f67b..74843db397a1898d922740386ea24d7ce47d6cb3 100644
--- a/dist/NetworkController.js
+++ b/dist/NetworkController.js
@@ -22,7 +22,7 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
 var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
-var _NetworkController_instances, _NetworkController_ethQuery, _NetworkController_infuraProjectId, _NetworkController_trackMetaMetricsEvent, _NetworkController_previousProviderConfig, _NetworkController_providerProxy, _NetworkController_blockTrackerProxy, _NetworkController_configureProvider, _NetworkController_refreshNetwork, _NetworkController_registerProvider, _NetworkController_setupInfuraProvider, _NetworkController_setupStandardProvider, _NetworkController_updateProvider, _NetworkController_getNetworkId, _NetworkController_getLatestBlock, _NetworkController_determineEIP1559Compatibility, _NetworkController_setProviderAndBlockTracker;
+var _NetworkController_instances, _NetworkController_ethQuery, _NetworkController_infuraProjectId, _NetworkController_trackMetaMetricsEvent, _NetworkController_previousProviderConfig, _NetworkController_providerProxy, _NetworkController_blockTrackerProxy, _NetworkController_configureProvider, _NetworkController_refreshNetwork, _NetworkController_registerProvider, _NetworkController_setupInfuraProvider, _NetworkController_setupStandardProvider, _NetworkController_updateProvider, _NetworkController_getNetworkId, _NetworkController_getLatestBlockWithRetry, _NetworkController_getLatestBlock, _NetworkController_determineEIP1559Compatibility, _NetworkController_setProviderAndBlockTracker;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.NetworkController = exports.defaultState = void 0;
 const assert_1 = require("assert");
@@ -543,6 +543,19 @@ _NetworkController_ethQuery = new WeakMap(), _NetworkController_infuraProjectId
         });
         return convertNetworkId(possibleNetworkId);
     });
+}, _NetworkController_getLatestBlockWithRetry = function _NetworkController_getLatestBlockWithRetry(maxAttempts = 3) {
+    return __awaiter(this, void 0, void 0, function* () {
+        let latestBlock;
+        const retryInterval = 500;
+        for (let attempts = 0; attempts <= maxAttempts; attempts++) {
+            latestBlock = yield __classPrivateFieldGet(this, _NetworkController_instances, "m", _NetworkController_getLatestBlock).call(this);
+            if (latestBlock) {
+                return latestBlock;
+            }
+            yield new Promise((resolve) => setTimeout(resolve, retryInterval));
+        }
+        return null;
+    });
 }, _NetworkController_getLatestBlock = function _NetworkController_getLatestBlock() {
     return new Promise((resolve, reject) => {
         if (!__classPrivateFieldGet(this, _NetworkController_ethQuery, "f")) {
@@ -560,8 +573,11 @@ _NetworkController_ethQuery = new WeakMap(), _NetworkController_infuraProjectId
     });
 }, _NetworkController_determineEIP1559Compatibility = function _NetworkController_determineEIP1559Compatibility() {
     return __awaiter(this, void 0, void 0, function* () {
-        const latestBlock = yield __classPrivateFieldGet(this, _NetworkController_instances, "m", _NetworkController_getLatestBlock).call(this);
-        return (latestBlock === null || latestBlock === void 0 ? void 0 : latestBlock.baseFeePerGas) !== undefined;
+        const latestBlock = yield __classPrivateFieldGet(this, _NetworkController_instances, "m", _NetworkController_getLatestBlockWithRetry).call(this);
+        if (!latestBlock) {
+            throw new Error('Unable to determine EIP-1559 compatibility. Failed to retrieve the latest block.');
+        }
+        return latestBlock.baseFeePerGas !== undefined;
     });
 }, _NetworkController_setProviderAndBlockTracker = function _NetworkController_setProviderAndBlockTracker({ provider, blockTracker, }) {
     if (__classPrivateFieldGet(this, _NetworkController_providerProxy, "f")) {
diff --git a/dist/NetworkController.js.map b/dist/NetworkController.js.map
index 7f8246a6a7d3b9e82bb22e13c04ab8fba5e22f21..6c581182f10a1bced8dfbc668b3f4aa9fa2b7dcb 100644
--- a/dist/NetworkController.js.map
+++ b/dist/NetworkController.js.map
@@ -1 +1 @@
-{"version":3,"file":"NetworkController.js","sourceRoot":"","sources":["../src/NetworkController.ts"],"names":[],"mappings":"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","sourcesContent":["import { strict as assert } from 'assert';\nimport { createEventEmitterProxy } from '@metamask/swappable-obj-proxy';\nimport type { SwappableProxy } from '@metamask/swappable-obj-proxy';\nimport EthQuery from 'eth-query';\nimport {\n  BaseControllerV2,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { v4 as random } from 'uuid';\nimport type { Patch } from 'immer';\nimport { errorCodes } from 'eth-rpc-errors';\nimport {\n  BUILT_IN_NETWORKS,\n  convertHexToDecimal,\n  NetworksTicker,\n  ChainId,\n  InfuraNetworkType,\n  NetworkType,\n  isSafeChainId,\n} from '@metamask/controller-utils';\nimport {\n  Hex,\n  assertIsStrictHexString,\n  hasProperty,\n  isPlainObject,\n  isStrictHexString,\n} from '@metamask/utils';\nimport { INFURA_BLOCKED_KEY, NetworkStatus } from './constants';\nimport { projectLogger, createModuleLogger } from './logger';\nimport {\n  createNetworkClient,\n  NetworkClientType,\n} from './create-network-client';\nimport type { BlockTracker, Provider } from './types';\n\nconst log = createModuleLogger(projectLogger, 'NetworkController');\n\n/**\n * @type ProviderConfig\n *\n * Configuration passed to web3-provider-engine\n * @property rpcUrl - RPC target URL.\n * @property type - Human-readable network name.\n * @property chainId - Network ID as per EIP-155.\n * @property ticker - Currency ticker.\n * @property nickname - Personalized network name.\n * @property id - Network Configuration Id.\n */\nexport type ProviderConfig = {\n  rpcUrl?: string;\n  type: NetworkType;\n  chainId: Hex;\n  ticker?: string;\n  nickname?: string;\n  rpcPrefs?: { blockExplorerUrl?: string };\n  id?: NetworkConfigurationId;\n};\n\nexport type Block = {\n  baseFeePerGas?: string;\n};\n\n/**\n * Information about the network not held by any other part of state. Currently\n * only used to capture whether a network supports EIP-1559.\n */\nexport type NetworkDetails = {\n  /**\n   * EIPs supported by the network.\n   */\n  EIPS: {\n    [eipNumber: number]: boolean;\n  };\n};\n\n/**\n * Custom RPC network information\n *\n * @property rpcUrl - RPC target URL.\n * @property chainId - Network ID as per EIP-155\n * @property nickname - Personalized network name.\n * @property ticker - Currency ticker.\n * @property rpcPrefs - Personalized preferences.\n */\nexport type NetworkConfiguration = {\n  rpcUrl: string;\n  chainId: Hex;\n  ticker: string;\n  nickname?: string;\n  rpcPrefs?: {\n    blockExplorerUrl: string;\n  };\n};\n\n/**\n * Convert the given value into a valid network ID. The ID is accepted\n * as either a number, a decimal string, or a 0x-prefixed hex string.\n *\n * @param value - The network ID to convert, in an unknown format.\n * @returns A valid network ID (as a decimal string)\n * @throws If the given value cannot be safely parsed.\n */\nfunction convertNetworkId(value: unknown): NetworkId {\n  if (typeof value === 'number' && !Number.isNaN(value)) {\n    return `${value}`;\n  } else if (isStrictHexString(value)) {\n    return `${convertHexToDecimal(value)}`;\n  } else if (typeof value === 'string' && /^\\d+$/u.test(value)) {\n    return value as NetworkId;\n  }\n  throw new Error(`Cannot parse as a valid network ID: '${value}'`);\n}\n\n/**\n * Type guard for determining whether the given value is an error object with a\n * `code` property, such as an instance of Error.\n *\n * TODO: Move this to @metamask/utils.\n *\n * @param error - The object to check.\n * @returns True if `error` has a `code`, false otherwise.\n */\nfunction isErrorWithCode(error: unknown): error is { code: string | number } {\n  return typeof error === 'object' && error !== null && 'code' in error;\n}\n\n/**\n * Returns whether the given argument is a type that our Infura middleware\n * recognizes.\n *\n * @param type - A type to compare.\n * @returns True or false, depending on whether the given type is one that our\n * Infura middleware recognizes.\n */\nfunction isInfuraProviderType(type: string): type is InfuraNetworkType {\n  return Object.keys(InfuraNetworkType).includes(type);\n}\n\n/**\n * The network ID of a network.\n */\nexport type NetworkId = `${number}`;\n\n/**\n * @type NetworkState\n *\n * Network controller state\n * @property network - Network ID as per net_version of the currently connected network\n * @property providerConfig - RPC URL and network name provider settings of the currently connected network\n * @property properties - an additional set of network properties for the currently connected network\n * @property networkConfigurations - the full list of configured networks either preloaded or added by the user.\n */\nexport type NetworkState = {\n  networkId: NetworkId | null;\n  networkStatus: NetworkStatus;\n  providerConfig: ProviderConfig;\n  networkDetails: NetworkDetails;\n  networkConfigurations: Record<string, NetworkConfiguration & { id: string }>;\n};\n\nconst name = 'NetworkController';\n\nexport type BlockTrackerProxy = SwappableProxy<BlockTracker>;\n\nexport type ProviderProxy = SwappableProxy<Provider>;\n\nexport type NetworkControllerStateChangeEvent = {\n  type: `NetworkController:stateChange`;\n  payload: [NetworkState, Patch[]];\n};\n\n/**\n * `networkWillChange` is published when the current network is about to be\n * switched, but the new provider has not been created and no state changes have\n * occurred yet.\n */\nexport type NetworkControllerNetworkWillChangeEvent = {\n  type: 'NetworkController:networkWillChange';\n  payload: [];\n};\n\n/**\n * `networkDidChange` is published after a provider has been created for a newly\n * switched network (but before the network has been confirmed to be available).\n */\nexport type NetworkControllerNetworkDidChangeEvent = {\n  type: 'NetworkController:networkDidChange';\n  payload: [];\n};\n\n/**\n * `infuraIsBlocked` is published after the network is switched to an Infura\n * network, but when Infura returns an error blocking the user based on their\n * location.\n */\nexport type NetworkControllerInfuraIsBlockedEvent = {\n  type: 'NetworkController:infuraIsBlocked';\n  payload: [];\n};\n\n/**\n * `infuraIsBlocked` is published either after the network is switched to an\n * Infura network and Infura does not return an error blocking the user based on\n * their location, or the network is switched to a non-Infura network.\n */\nexport type NetworkControllerInfuraIsUnblockedEvent = {\n  type: 'NetworkController:infuraIsUnblocked';\n  payload: [];\n};\n\nexport type NetworkControllerEvents =\n  | NetworkControllerStateChangeEvent\n  | NetworkControllerNetworkWillChangeEvent\n  | NetworkControllerNetworkDidChangeEvent\n  | NetworkControllerInfuraIsBlockedEvent\n  | NetworkControllerInfuraIsUnblockedEvent;\n\nexport type NetworkControllerGetStateAction = {\n  type: `NetworkController:getState`;\n  handler: () => NetworkState;\n};\n\nexport type NetworkControllerGetProviderConfigAction = {\n  type: `NetworkController:getProviderConfig`;\n  handler: () => ProviderConfig;\n};\n\nexport type NetworkControllerGetEthQueryAction = {\n  type: `NetworkController:getEthQuery`;\n  handler: () => EthQuery | undefined;\n};\n\nexport type NetworkControllerActions =\n  | NetworkControllerGetStateAction\n  | NetworkControllerGetProviderConfigAction\n  | NetworkControllerGetEthQueryAction;\n\nexport type NetworkControllerMessenger = RestrictedControllerMessenger<\n  typeof name,\n  NetworkControllerActions,\n  NetworkControllerEvents,\n  string,\n  string\n>;\n\nexport type NetworkControllerOptions = {\n  messenger: NetworkControllerMessenger;\n  trackMetaMetricsEvent: () => void;\n  infuraProjectId: string;\n  state?: Partial<NetworkState>;\n};\n\nexport const defaultState: NetworkState = {\n  networkId: null,\n  networkStatus: NetworkStatus.Unknown,\n  providerConfig: {\n    type: NetworkType.mainnet,\n    chainId: ChainId.mainnet,\n  },\n  networkDetails: {\n    EIPS: {},\n  },\n  networkConfigurations: {},\n};\n\ntype MetaMetricsEventPayload = {\n  event: string;\n  category: string;\n  referrer?: { url: string };\n  actionId?: number;\n  environmentType?: string;\n  properties?: unknown;\n  sensitiveProperties?: unknown;\n  revenue?: number;\n  currency?: string;\n  value?: number;\n};\n\ntype NetworkConfigurationId = string;\n\n/**\n * Controller that creates and manages an Ethereum network provider.\n */\nexport class NetworkController extends BaseControllerV2<\n  typeof name,\n  NetworkState,\n  NetworkControllerMessenger\n> {\n  #ethQuery?: EthQuery;\n\n  #infuraProjectId: string;\n\n  #trackMetaMetricsEvent: (event: MetaMetricsEventPayload) => void;\n\n  #previousProviderConfig: ProviderConfig;\n\n  #providerProxy: ProviderProxy | undefined;\n\n  #blockTrackerProxy: BlockTrackerProxy | undefined;\n\n  constructor({\n    messenger,\n    state,\n    infuraProjectId,\n    trackMetaMetricsEvent,\n  }: NetworkControllerOptions) {\n    super({\n      name,\n      metadata: {\n        networkId: {\n          persist: true,\n          anonymous: false,\n        },\n        networkStatus: {\n          persist: true,\n          anonymous: false,\n        },\n        networkDetails: {\n          persist: true,\n          anonymous: false,\n        },\n        providerConfig: {\n          persist: true,\n          anonymous: false,\n        },\n        networkConfigurations: {\n          persist: true,\n          anonymous: false,\n        },\n      },\n      messenger,\n      state: { ...defaultState, ...state },\n    });\n    if (!infuraProjectId || typeof infuraProjectId !== 'string') {\n      throw new Error('Invalid Infura project ID');\n    }\n    this.#infuraProjectId = infuraProjectId;\n    this.#trackMetaMetricsEvent = trackMetaMetricsEvent;\n    this.messagingSystem.registerActionHandler(\n      `${this.name}:getProviderConfig`,\n      () => {\n        return this.state.providerConfig;\n      },\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${this.name}:getEthQuery`,\n      () => {\n        return this.#ethQuery;\n      },\n    );\n\n    this.#previousProviderConfig = this.state.providerConfig;\n  }\n\n  #configureProvider(\n    type: NetworkType,\n    rpcUrl: string | undefined,\n    chainId: Hex | undefined,\n  ) {\n    switch (type) {\n      case NetworkType.mainnet:\n      case NetworkType.goerli:\n      case NetworkType.sepolia:\n        this.#setupInfuraProvider(type);\n        break;\n      case NetworkType.rpc:\n        if (chainId === undefined) {\n          throw new Error('chainId must be provided for custom RPC endpoints');\n        }\n\n        if (rpcUrl === undefined) {\n          throw new Error('rpcUrl must be provided for custom RPC endpoints');\n        }\n        this.#setupStandardProvider(rpcUrl, chainId);\n        break;\n      default:\n        throw new Error(`Unrecognized network type: '${type}'`);\n    }\n  }\n\n  getProviderAndBlockTracker(): {\n    provider: SwappableProxy<Provider> | undefined;\n    blockTracker: SwappableProxy<BlockTracker> | undefined;\n  } {\n    return {\n      provider: this.#providerProxy,\n      blockTracker: this.#blockTrackerProxy,\n    };\n  }\n\n  async #refreshNetwork() {\n    this.messagingSystem.publish('NetworkController:networkWillChange');\n    this.update((state) => {\n      state.networkId = null;\n      state.networkStatus = NetworkStatus.Unknown;\n      state.networkDetails = {\n        EIPS: {},\n      };\n    });\n    const { rpcUrl, type, chainId } = this.state.providerConfig;\n    this.#configureProvider(type, rpcUrl, chainId);\n    this.messagingSystem.publish('NetworkController:networkDidChange');\n    await this.lookupNetwork();\n  }\n\n  #registerProvider() {\n    const { provider } = this.getProviderAndBlockTracker();\n\n    if (provider) {\n      this.#ethQuery = new EthQuery(provider);\n    }\n  }\n\n  #setupInfuraProvider(type: InfuraNetworkType) {\n    const { provider, blockTracker } = createNetworkClient({\n      network: type,\n      infuraProjectId: this.#infuraProjectId,\n      type: NetworkClientType.Infura,\n    });\n\n    this.#updateProvider(provider, blockTracker);\n  }\n\n  #setupStandardProvider(rpcUrl: string, chainId: Hex) {\n    const { provider, blockTracker } = createNetworkClient({\n      chainId,\n      rpcUrl,\n      type: NetworkClientType.Custom,\n    });\n\n    this.#updateProvider(provider, blockTracker);\n  }\n\n  #updateProvider(provider: Provider, blockTracker: BlockTracker) {\n    this.#setProviderAndBlockTracker({\n      provider,\n      blockTracker,\n    });\n    this.#registerProvider();\n  }\n\n  /**\n   * Method to inilialize the provider,\n   * Creates the provider and block tracker for the configured network,\n   * using the provider to gather details about the network.\n   *\n   */\n  async initializeProvider() {\n    const { type, rpcUrl, chainId } = this.state.providerConfig;\n    this.#configureProvider(type, rpcUrl, chainId);\n    this.#registerProvider();\n    await this.lookupNetwork();\n  }\n\n  async #getNetworkId(): Promise<NetworkId> {\n    const possibleNetworkId = await new Promise<string>((resolve, reject) => {\n      if (!this.#ethQuery) {\n        throw new Error('Provider has not been initialized');\n      }\n      this.#ethQuery.sendAsync(\n        { method: 'net_version' },\n        (error: unknown, result?: unknown) => {\n          if (error) {\n            reject(error);\n          } else {\n            // TODO: Validate this type\n            resolve(result as string);\n          }\n        },\n      );\n    });\n\n    return convertNetworkId(possibleNetworkId);\n  }\n\n  /**\n   * Performs side effects after switching to a network. If the network is\n   * available, updates the network state with the network ID of the network and\n   * stores whether the network supports EIP-1559; otherwise clears said\n   * information about the network that may have been previously stored.\n   *\n   * @fires infuraIsBlocked if the network is Infura-supported and is blocking\n   * requests.\n   * @fires infuraIsUnblocked if the network is Infura-supported and is not\n   * blocking requests, or if the network is not Infura-supported.\n   */\n  async lookupNetwork() {\n    if (!this.#ethQuery) {\n      return;\n    }\n    const isInfura = isInfuraProviderType(this.state.providerConfig.type);\n\n    let networkChanged = false;\n    const listener = () => {\n      networkChanged = true;\n      this.messagingSystem.unsubscribe(\n        'NetworkController:networkDidChange',\n        listener,\n      );\n    };\n    this.messagingSystem.subscribe(\n      'NetworkController:networkDidChange',\n      listener,\n    );\n\n    let updatedNetworkStatus: NetworkStatus;\n    let updatedNetworkId: NetworkId | null = null;\n    let updatedIsEIP1559Compatible: boolean | undefined;\n\n    try {\n      const [networkId, isEIP1559Compatible] = await Promise.all([\n        this.#getNetworkId(),\n        this.#determineEIP1559Compatibility(),\n      ]);\n      updatedNetworkStatus = NetworkStatus.Available;\n      updatedNetworkId = networkId;\n      updatedIsEIP1559Compatible = isEIP1559Compatible;\n    } catch (error) {\n      if (isErrorWithCode(error)) {\n        let responseBody;\n        if (\n          isInfura &&\n          hasProperty(error, 'message') &&\n          typeof error.message === 'string'\n        ) {\n          try {\n            responseBody = JSON.parse(error.message);\n          } catch {\n            // error.message must not be JSON\n          }\n        }\n\n        if (\n          isPlainObject(responseBody) &&\n          responseBody.error === INFURA_BLOCKED_KEY\n        ) {\n          updatedNetworkStatus = NetworkStatus.Blocked;\n        } else if (error.code === errorCodes.rpc.internal) {\n          updatedNetworkStatus = NetworkStatus.Unknown;\n        } else {\n          updatedNetworkStatus = NetworkStatus.Unavailable;\n        }\n      } else {\n        log('NetworkController - could not determine network status', error);\n        updatedNetworkStatus = NetworkStatus.Unknown;\n      }\n    }\n\n    if (networkChanged) {\n      // If the network has changed, then `lookupNetwork` either has been or is\n      // in the process of being called, so we don't need to go further.\n      return;\n    }\n    this.messagingSystem.unsubscribe(\n      'NetworkController:networkDidChange',\n      listener,\n    );\n\n    this.update((state) => {\n      state.networkId = updatedNetworkId;\n      state.networkStatus = updatedNetworkStatus;\n      if (updatedIsEIP1559Compatible === undefined) {\n        delete state.networkDetails.EIPS[1559];\n      } else {\n        state.networkDetails.EIPS[1559] = updatedIsEIP1559Compatible;\n      }\n    });\n\n    if (isInfura) {\n      if (updatedNetworkStatus === NetworkStatus.Available) {\n        this.messagingSystem.publish('NetworkController:infuraIsUnblocked');\n      } else if (updatedNetworkStatus === NetworkStatus.Blocked) {\n        this.messagingSystem.publish('NetworkController:infuraIsBlocked');\n      }\n    } else {\n      // Always publish infuraIsUnblocked regardless of network status to\n      // prevent consumers from being stuck in a blocked state if they were\n      // previously connected to an Infura network that was blocked\n      this.messagingSystem.publish('NetworkController:infuraIsUnblocked');\n    }\n  }\n\n  /**\n   * Convenience method to update provider network type settings.\n   *\n   * @param type - Human readable network name.\n   */\n  async setProviderType(type: InfuraNetworkType) {\n    assert.notStrictEqual(\n      type,\n      NetworkType.rpc,\n      `NetworkController - cannot call \"setProviderType\" with type \"${NetworkType.rpc}\". Use \"setActiveNetwork\"`,\n    );\n    assert.ok(\n      isInfuraProviderType(type),\n      `Unknown Infura provider type \"${type}\".`,\n    );\n    this.#previousProviderConfig = this.state.providerConfig;\n\n    // If testnet the ticker symbol should use a testnet prefix\n    const ticker =\n      type in NetworksTicker && NetworksTicker[type].length > 0\n        ? NetworksTicker[type]\n        : 'ETH';\n\n    this.update((state) => {\n      state.providerConfig.type = type;\n      state.providerConfig.ticker = ticker;\n      state.providerConfig.chainId = ChainId[type];\n      state.providerConfig.rpcPrefs = BUILT_IN_NETWORKS[type].rpcPrefs;\n      state.providerConfig.rpcUrl = undefined;\n      state.providerConfig.nickname = undefined;\n      state.providerConfig.id = undefined;\n    });\n    await this.#refreshNetwork();\n  }\n\n  /**\n   * Convenience method to update provider RPC settings.\n   *\n   * @param networkConfigurationId - The unique id for the network configuration to set as the active provider.\n   */\n  async setActiveNetwork(networkConfigurationId: string) {\n    this.#previousProviderConfig = this.state.providerConfig;\n\n    const targetNetwork =\n      this.state.networkConfigurations[networkConfigurationId];\n\n    if (!targetNetwork) {\n      throw new Error(\n        `networkConfigurationId ${networkConfigurationId} does not match a configured networkConfiguration`,\n      );\n    }\n\n    this.update((state) => {\n      state.providerConfig.type = NetworkType.rpc;\n      state.providerConfig.rpcUrl = targetNetwork.rpcUrl;\n      state.providerConfig.chainId = targetNetwork.chainId;\n      state.providerConfig.ticker = targetNetwork.ticker;\n      state.providerConfig.nickname = targetNetwork.nickname;\n      state.providerConfig.rpcPrefs = targetNetwork.rpcPrefs;\n      state.providerConfig.id = targetNetwork.id;\n    });\n\n    await this.#refreshNetwork();\n  }\n\n  #getLatestBlock(): Promise<Block> {\n    return new Promise((resolve, reject) => {\n      if (!this.#ethQuery) {\n        throw new Error('Provider has not been initialized');\n      }\n      this.#ethQuery.sendAsync(\n        { method: 'eth_getBlockByNumber', params: ['latest', false] },\n        (error: unknown, block?: unknown) => {\n          if (error) {\n            reject(error);\n          } else {\n            // TODO: Validate this type\n            resolve(block as Block);\n          }\n        },\n      );\n    });\n  }\n\n  /**\n   * Determines whether the network supports EIP-1559 by checking whether the\n   * latest block has a `baseFeePerGas` property, then updates state\n   * appropriately.\n   *\n   * @returns A promise that resolves to true if the network supports EIP-1559\n   * and false otherwise.\n   */\n  async getEIP1559Compatibility() {\n    const { EIPS } = this.state.networkDetails;\n\n    if (EIPS[1559] !== undefined) {\n      return EIPS[1559];\n    }\n\n    if (!this.#ethQuery) {\n      return false;\n    }\n\n    const isEIP1559Compatible = await this.#determineEIP1559Compatibility();\n    this.update((state) => {\n      state.networkDetails.EIPS[1559] = isEIP1559Compatible;\n    });\n    return isEIP1559Compatible;\n  }\n\n  /**\n   * Retrieves the latest block from the currently selected network; if the\n   * block has a `baseFeePerGas` property, then we know that the network\n   * supports EIP-1559; otherwise it doesn't.\n   *\n   * @returns A promise that resolves to true if the network supports EIP-1559\n   * and false otherwise.\n   */\n  async #determineEIP1559Compatibility(): Promise<boolean> {\n    const latestBlock = await this.#getLatestBlock();\n    return latestBlock?.baseFeePerGas !== undefined;\n  }\n\n  /**\n   * Re-initializes the provider and block tracker for the current network.\n   */\n  async resetConnection() {\n    await this.#refreshNetwork();\n  }\n\n  #setProviderAndBlockTracker({\n    provider,\n    blockTracker,\n  }: {\n    provider: Provider;\n    blockTracker: BlockTracker;\n  }) {\n    if (this.#providerProxy) {\n      this.#providerProxy.setTarget(provider);\n    } else {\n      this.#providerProxy = createEventEmitterProxy(provider);\n    }\n\n    if (this.#blockTrackerProxy) {\n      this.#blockTrackerProxy.setTarget(blockTracker);\n    } else {\n      this.#blockTrackerProxy = createEventEmitterProxy(blockTracker, {\n        eventFilter: 'skipInternal',\n      });\n    }\n  }\n\n  /**\n   * Adds a network configuration if the rpcUrl is not already present on an\n   * existing network configuration. Otherwise updates the entry with the matching rpcUrl.\n   *\n   * @param networkConfiguration - The network configuration to add or, if rpcUrl matches an existing entry, to modify.\n   * @param networkConfiguration.rpcUrl -  RPC provider url.\n   * @param networkConfiguration.chainId - Network ID as per EIP-155.\n   * @param networkConfiguration.ticker - Currency ticker.\n   * @param networkConfiguration.nickname - Personalized network name.\n   * @param networkConfiguration.rpcPrefs - Personalized preferences (i.e. preferred blockExplorer)\n   * @param options - additional configuration options.\n   * @param options.setActive - An option to set the newly added networkConfiguration as the active provider.\n   * @param options.referrer - The site from which the call originated, or 'metamask' for internal calls - used for event metrics.\n   * @param options.source - Where the upsertNetwork event originated (i.e. from a dapp or from the network form) - used for event metrics.\n   * @returns id for the added or updated network configuration\n   */\n  async upsertNetworkConfiguration(\n    { rpcUrl, chainId, ticker, nickname, rpcPrefs }: NetworkConfiguration,\n    {\n      setActive = false,\n      referrer,\n      source,\n    }: { setActive?: boolean; referrer: string; source: string },\n  ): Promise<string> {\n    assertIsStrictHexString(chainId);\n\n    if (!isSafeChainId(chainId)) {\n      throw new Error(\n        `Invalid chain ID \"${chainId}\": numerical value greater than max safe value.`,\n      );\n    }\n\n    if (!rpcUrl) {\n      throw new Error(\n        'An rpcUrl is required to add or update network configuration',\n      );\n    }\n\n    if (!referrer || !source) {\n      throw new Error(\n        'referrer and source are required arguments for adding or updating a network configuration',\n      );\n    }\n\n    try {\n      new URL(rpcUrl);\n    } catch (e: any) {\n      if (e.message.includes('Invalid URL')) {\n        throw new Error('rpcUrl must be a valid URL');\n      }\n    }\n\n    if (!ticker) {\n      throw new Error(\n        'A ticker is required to add or update networkConfiguration',\n      );\n    }\n\n    const newNetworkConfiguration = {\n      rpcUrl,\n      chainId,\n      ticker,\n      nickname,\n      rpcPrefs,\n    };\n\n    const oldNetworkConfigurations = this.state.networkConfigurations;\n\n    const oldNetworkConfigurationId = Object.values(\n      oldNetworkConfigurations,\n    ).find(\n      (networkConfiguration) =>\n        networkConfiguration.rpcUrl?.toLowerCase() === rpcUrl?.toLowerCase(),\n    )?.id;\n\n    const newNetworkConfigurationId = oldNetworkConfigurationId || random();\n    this.update((state) => {\n      state.networkConfigurations = {\n        ...oldNetworkConfigurations,\n        [newNetworkConfigurationId]: {\n          ...newNetworkConfiguration,\n          id: newNetworkConfigurationId,\n        },\n      };\n    });\n\n    if (!oldNetworkConfigurationId) {\n      this.#trackMetaMetricsEvent({\n        event: 'Custom Network Added',\n        category: 'Network',\n        referrer: {\n          url: referrer,\n        },\n        properties: {\n          chain_id: chainId,\n          symbol: ticker,\n          source,\n        },\n      });\n    }\n\n    if (setActive) {\n      await this.setActiveNetwork(newNetworkConfigurationId);\n    }\n\n    return newNetworkConfigurationId;\n  }\n\n  /**\n   * Removes network configuration from state.\n   *\n   * @param networkConfigurationId - The networkConfigurationId of an existing network configuration\n   */\n  removeNetworkConfiguration(networkConfigurationId: string) {\n    if (!this.state.networkConfigurations[networkConfigurationId]) {\n      throw new Error(\n        `networkConfigurationId ${networkConfigurationId} does not match a configured networkConfiguration`,\n      );\n    }\n    this.update((state) => {\n      delete state.networkConfigurations[networkConfigurationId];\n    });\n  }\n\n  /**\n   * Switches to the previous network, assuming that the current network is\n   * different than the initial network (if it is, then this is equivalent to\n   * calling `resetConnection`).\n   */\n  async rollbackToPreviousProvider() {\n    this.update((state) => {\n      state.providerConfig = this.#previousProviderConfig;\n    });\n    await this.#refreshNetwork();\n  }\n\n  /**\n   * Deactivates the controller, stopping any ongoing polling.\n   *\n   * In-progress requests will not be aborted.\n   */\n  async destroy() {\n    await this.#blockTrackerProxy?.destroy();\n  }\n\n  /**\n   * Updates the controller using the given backup data.\n   *\n   * @param backup - The data that has been backed up.\n   * @param backup.networkConfigurations - Network configurations in the backup.\n   */\n  loadBackup({\n    networkConfigurations,\n  }: {\n    networkConfigurations: NetworkState['networkConfigurations'];\n  }): void {\n    this.update((state) => {\n      state.networkConfigurations = {\n        ...state.networkConfigurations,\n        ...networkConfigurations,\n      };\n    });\n  }\n}\n\nexport default NetworkController;\n"]}
\ No newline at end of file
+{"version":3,"file":"NetworkController.js","sourceRoot":"","sources":["../src/NetworkController.ts"],"names":[],"mappings":"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","sourcesContent":["import { strict as assert } from 'assert';\nimport { createEventEmitterProxy } from '@metamask/swappable-obj-proxy';\nimport type { SwappableProxy } from '@metamask/swappable-obj-proxy';\nimport EthQuery from 'eth-query';\nimport {\n  BaseControllerV2,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { v4 as random } from 'uuid';\nimport type { Patch } from 'immer';\nimport { errorCodes } from 'eth-rpc-errors';\nimport {\n  BUILT_IN_NETWORKS,\n  convertHexToDecimal,\n  NetworksTicker,\n  ChainId,\n  InfuraNetworkType,\n  NetworkType,\n  isSafeChainId,\n} from '@metamask/controller-utils';\nimport {\n  Hex,\n  assertIsStrictHexString,\n  hasProperty,\n  isPlainObject,\n  isStrictHexString,\n} from '@metamask/utils';\nimport { INFURA_BLOCKED_KEY, NetworkStatus } from './constants';\nimport { projectLogger, createModuleLogger } from './logger';\nimport {\n  createNetworkClient,\n  NetworkClientType,\n} from './create-network-client';\nimport type { BlockTracker, Provider } from './types';\n\nconst log = createModuleLogger(projectLogger, 'NetworkController');\n\n/**\n * @type ProviderConfig\n *\n * Configuration passed to web3-provider-engine\n * @property rpcUrl - RPC target URL.\n * @property type - Human-readable network name.\n * @property chainId - Network ID as per EIP-155.\n * @property ticker - Currency ticker.\n * @property nickname - Personalized network name.\n * @property id - Network Configuration Id.\n */\nexport type ProviderConfig = {\n  rpcUrl?: string;\n  type: NetworkType;\n  chainId: Hex;\n  ticker?: string;\n  nickname?: string;\n  rpcPrefs?: { blockExplorerUrl?: string };\n  id?: NetworkConfigurationId;\n};\n\nexport type Block = {\n  baseFeePerGas?: string;\n};\n\n/**\n * Information about the network not held by any other part of state. Currently\n * only used to capture whether a network supports EIP-1559.\n */\nexport type NetworkDetails = {\n  /**\n   * EIPs supported by the network.\n   */\n  EIPS: {\n    [eipNumber: number]: boolean;\n  };\n};\n\n/**\n * Custom RPC network information\n *\n * @property rpcUrl - RPC target URL.\n * @property chainId - Network ID as per EIP-155\n * @property nickname - Personalized network name.\n * @property ticker - Currency ticker.\n * @property rpcPrefs - Personalized preferences.\n */\nexport type NetworkConfiguration = {\n  rpcUrl: string;\n  chainId: Hex;\n  ticker: string;\n  nickname?: string;\n  rpcPrefs?: {\n    blockExplorerUrl: string;\n  };\n};\n\n/**\n * Convert the given value into a valid network ID. The ID is accepted\n * as either a number, a decimal string, or a 0x-prefixed hex string.\n *\n * @param value - The network ID to convert, in an unknown format.\n * @returns A valid network ID (as a decimal string)\n * @throws If the given value cannot be safely parsed.\n */\nfunction convertNetworkId(value: unknown): NetworkId {\n  if (typeof value === 'number' && !Number.isNaN(value)) {\n    return `${value}`;\n  } else if (isStrictHexString(value)) {\n    return `${convertHexToDecimal(value)}`;\n  } else if (typeof value === 'string' && /^\\d+$/u.test(value)) {\n    return value as NetworkId;\n  }\n  throw new Error(`Cannot parse as a valid network ID: '${value}'`);\n}\n\n/**\n * Type guard for determining whether the given value is an error object with a\n * `code` property, such as an instance of Error.\n *\n * TODO: Move this to @metamask/utils.\n *\n * @param error - The object to check.\n * @returns True if `error` has a `code`, false otherwise.\n */\nfunction isErrorWithCode(error: unknown): error is { code: string | number } {\n  return typeof error === 'object' && error !== null && 'code' in error;\n}\n\n/**\n * Returns whether the given argument is a type that our Infura middleware\n * recognizes.\n *\n * @param type - A type to compare.\n * @returns True or false, depending on whether the given type is one that our\n * Infura middleware recognizes.\n */\nfunction isInfuraProviderType(type: string): type is InfuraNetworkType {\n  return Object.keys(InfuraNetworkType).includes(type);\n}\n\n/**\n * The network ID of a network.\n */\nexport type NetworkId = `${number}`;\n\n/**\n * @type NetworkState\n *\n * Network controller state\n * @property network - Network ID as per net_version of the currently connected network\n * @property providerConfig - RPC URL and network name provider settings of the currently connected network\n * @property properties - an additional set of network properties for the currently connected network\n * @property networkConfigurations - the full list of configured networks either preloaded or added by the user.\n */\nexport type NetworkState = {\n  networkId: NetworkId | null;\n  networkStatus: NetworkStatus;\n  providerConfig: ProviderConfig;\n  networkDetails: NetworkDetails;\n  networkConfigurations: Record<string, NetworkConfiguration & { id: string }>;\n};\n\nconst name = 'NetworkController';\n\nexport type BlockTrackerProxy = SwappableProxy<BlockTracker>;\n\nexport type ProviderProxy = SwappableProxy<Provider>;\n\nexport type NetworkControllerStateChangeEvent = {\n  type: `NetworkController:stateChange`;\n  payload: [NetworkState, Patch[]];\n};\n\n/**\n * `networkWillChange` is published when the current network is about to be\n * switched, but the new provider has not been created and no state changes have\n * occurred yet.\n */\nexport type NetworkControllerNetworkWillChangeEvent = {\n  type: 'NetworkController:networkWillChange';\n  payload: [];\n};\n\n/**\n * `networkDidChange` is published after a provider has been created for a newly\n * switched network (but before the network has been confirmed to be available).\n */\nexport type NetworkControllerNetworkDidChangeEvent = {\n  type: 'NetworkController:networkDidChange';\n  payload: [];\n};\n\n/**\n * `infuraIsBlocked` is published after the network is switched to an Infura\n * network, but when Infura returns an error blocking the user based on their\n * location.\n */\nexport type NetworkControllerInfuraIsBlockedEvent = {\n  type: 'NetworkController:infuraIsBlocked';\n  payload: [];\n};\n\n/**\n * `infuraIsBlocked` is published either after the network is switched to an\n * Infura network and Infura does not return an error blocking the user based on\n * their location, or the network is switched to a non-Infura network.\n */\nexport type NetworkControllerInfuraIsUnblockedEvent = {\n  type: 'NetworkController:infuraIsUnblocked';\n  payload: [];\n};\n\nexport type NetworkControllerEvents =\n  | NetworkControllerStateChangeEvent\n  | NetworkControllerNetworkWillChangeEvent\n  | NetworkControllerNetworkDidChangeEvent\n  | NetworkControllerInfuraIsBlockedEvent\n  | NetworkControllerInfuraIsUnblockedEvent;\n\nexport type NetworkControllerGetStateAction = {\n  type: `NetworkController:getState`;\n  handler: () => NetworkState;\n};\n\nexport type NetworkControllerGetProviderConfigAction = {\n  type: `NetworkController:getProviderConfig`;\n  handler: () => ProviderConfig;\n};\n\nexport type NetworkControllerGetEthQueryAction = {\n  type: `NetworkController:getEthQuery`;\n  handler: () => EthQuery | undefined;\n};\n\nexport type NetworkControllerActions =\n  | NetworkControllerGetStateAction\n  | NetworkControllerGetProviderConfigAction\n  | NetworkControllerGetEthQueryAction;\n\nexport type NetworkControllerMessenger = RestrictedControllerMessenger<\n  typeof name,\n  NetworkControllerActions,\n  NetworkControllerEvents,\n  string,\n  string\n>;\n\nexport type NetworkControllerOptions = {\n  messenger: NetworkControllerMessenger;\n  trackMetaMetricsEvent: () => void;\n  infuraProjectId: string;\n  state?: Partial<NetworkState>;\n};\n\nexport const defaultState: NetworkState = {\n  networkId: null,\n  networkStatus: NetworkStatus.Unknown,\n  providerConfig: {\n    type: NetworkType.mainnet,\n    chainId: ChainId.mainnet,\n  },\n  networkDetails: {\n    EIPS: {},\n  },\n  networkConfigurations: {},\n};\n\ntype MetaMetricsEventPayload = {\n  event: string;\n  category: string;\n  referrer?: { url: string };\n  actionId?: number;\n  environmentType?: string;\n  properties?: unknown;\n  sensitiveProperties?: unknown;\n  revenue?: number;\n  currency?: string;\n  value?: number;\n};\n\ntype NetworkConfigurationId = string;\n\n/**\n * Controller that creates and manages an Ethereum network provider.\n */\nexport class NetworkController extends BaseControllerV2<\n  typeof name,\n  NetworkState,\n  NetworkControllerMessenger\n> {\n  #ethQuery?: EthQuery;\n\n  #infuraProjectId: string;\n\n  #trackMetaMetricsEvent: (event: MetaMetricsEventPayload) => void;\n\n  #previousProviderConfig: ProviderConfig;\n\n  #providerProxy: ProviderProxy | undefined;\n\n  #blockTrackerProxy: BlockTrackerProxy | undefined;\n\n  constructor({\n    messenger,\n    state,\n    infuraProjectId,\n    trackMetaMetricsEvent,\n  }: NetworkControllerOptions) {\n    super({\n      name,\n      metadata: {\n        networkId: {\n          persist: true,\n          anonymous: false,\n        },\n        networkStatus: {\n          persist: true,\n          anonymous: false,\n        },\n        networkDetails: {\n          persist: true,\n          anonymous: false,\n        },\n        providerConfig: {\n          persist: true,\n          anonymous: false,\n        },\n        networkConfigurations: {\n          persist: true,\n          anonymous: false,\n        },\n      },\n      messenger,\n      state: { ...defaultState, ...state },\n    });\n    if (!infuraProjectId || typeof infuraProjectId !== 'string') {\n      throw new Error('Invalid Infura project ID');\n    }\n    this.#infuraProjectId = infuraProjectId;\n    this.#trackMetaMetricsEvent = trackMetaMetricsEvent;\n    this.messagingSystem.registerActionHandler(\n      `${this.name}:getProviderConfig`,\n      () => {\n        return this.state.providerConfig;\n      },\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${this.name}:getEthQuery`,\n      () => {\n        return this.#ethQuery;\n      },\n    );\n\n    this.#previousProviderConfig = this.state.providerConfig;\n  }\n\n  #configureProvider(\n    type: NetworkType,\n    rpcUrl: string | undefined,\n    chainId: Hex | undefined,\n  ) {\n    switch (type) {\n      case NetworkType.mainnet:\n      case NetworkType.goerli:\n      case NetworkType.sepolia:\n        this.#setupInfuraProvider(type);\n        break;\n      case NetworkType.rpc:\n        if (chainId === undefined) {\n          throw new Error('chainId must be provided for custom RPC endpoints');\n        }\n\n        if (rpcUrl === undefined) {\n          throw new Error('rpcUrl must be provided for custom RPC endpoints');\n        }\n        this.#setupStandardProvider(rpcUrl, chainId);\n        break;\n      default:\n        throw new Error(`Unrecognized network type: '${type}'`);\n    }\n  }\n\n  getProviderAndBlockTracker(): {\n    provider: SwappableProxy<Provider> | undefined;\n    blockTracker: SwappableProxy<BlockTracker> | undefined;\n  } {\n    return {\n      provider: this.#providerProxy,\n      blockTracker: this.#blockTrackerProxy,\n    };\n  }\n\n  async #refreshNetwork() {\n    this.messagingSystem.publish('NetworkController:networkWillChange');\n    this.update((state) => {\n      state.networkId = null;\n      state.networkStatus = NetworkStatus.Unknown;\n      state.networkDetails = {\n        EIPS: {},\n      };\n    });\n    const { rpcUrl, type, chainId } = this.state.providerConfig;\n    this.#configureProvider(type, rpcUrl, chainId);\n    this.messagingSystem.publish('NetworkController:networkDidChange');\n    await this.lookupNetwork();\n  }\n\n  #registerProvider() {\n    const { provider } = this.getProviderAndBlockTracker();\n\n    if (provider) {\n      this.#ethQuery = new EthQuery(provider);\n    }\n  }\n\n  #setupInfuraProvider(type: InfuraNetworkType) {\n    const { provider, blockTracker } = createNetworkClient({\n      network: type,\n      infuraProjectId: this.#infuraProjectId,\n      type: NetworkClientType.Infura,\n    });\n\n    this.#updateProvider(provider, blockTracker);\n  }\n\n  #setupStandardProvider(rpcUrl: string, chainId: Hex) {\n    const { provider, blockTracker } = createNetworkClient({\n      chainId,\n      rpcUrl,\n      type: NetworkClientType.Custom,\n    });\n\n    this.#updateProvider(provider, blockTracker);\n  }\n\n  #updateProvider(provider: Provider, blockTracker: BlockTracker) {\n    this.#setProviderAndBlockTracker({\n      provider,\n      blockTracker,\n    });\n    this.#registerProvider();\n  }\n\n  /**\n   * Method to inilialize the provider,\n   * Creates the provider and block tracker for the configured network,\n   * using the provider to gather details about the network.\n   *\n   */\n  async initializeProvider() {\n    const { type, rpcUrl, chainId } = this.state.providerConfig;\n    this.#configureProvider(type, rpcUrl, chainId);\n    this.#registerProvider();\n    await this.lookupNetwork();\n  }\n\n  async #getNetworkId(): Promise<NetworkId> {\n    const possibleNetworkId = await new Promise<string>((resolve, reject) => {\n      if (!this.#ethQuery) {\n        throw new Error('Provider has not been initialized');\n      }\n      this.#ethQuery.sendAsync(\n        { method: 'net_version' },\n        (error: unknown, result?: unknown) => {\n          if (error) {\n            reject(error);\n          } else {\n            // TODO: Validate this type\n            resolve(result as string);\n          }\n        },\n      );\n    });\n\n    return convertNetworkId(possibleNetworkId);\n  }\n\n  /**\n   * Performs side effects after switching to a network. If the network is\n   * available, updates the network state with the network ID of the network and\n   * stores whether the network supports EIP-1559; otherwise clears said\n   * information about the network that may have been previously stored.\n   *\n   * @fires infuraIsBlocked if the network is Infura-supported and is blocking\n   * requests.\n   * @fires infuraIsUnblocked if the network is Infura-supported and is not\n   * blocking requests, or if the network is not Infura-supported.\n   */\n  async lookupNetwork() {\n    if (!this.#ethQuery) {\n      return;\n    }\n    const isInfura = isInfuraProviderType(this.state.providerConfig.type);\n\n    let networkChanged = false;\n    const listener = () => {\n      networkChanged = true;\n      this.messagingSystem.unsubscribe(\n        'NetworkController:networkDidChange',\n        listener,\n      );\n    };\n    this.messagingSystem.subscribe(\n      'NetworkController:networkDidChange',\n      listener,\n    );\n\n    let updatedNetworkStatus: NetworkStatus;\n    let updatedNetworkId: NetworkId | null = null;\n    let updatedIsEIP1559Compatible: boolean | undefined;\n\n    try {\n      const [networkId, isEIP1559Compatible] = await Promise.all([\n        this.#getNetworkId(),\n        this.#determineEIP1559Compatibility(),\n      ]);\n      updatedNetworkStatus = NetworkStatus.Available;\n      updatedNetworkId = networkId;\n      updatedIsEIP1559Compatible = isEIP1559Compatible;\n    } catch (error) {\n      if (isErrorWithCode(error)) {\n        let responseBody;\n        if (\n          isInfura &&\n          hasProperty(error, 'message') &&\n          typeof error.message === 'string'\n        ) {\n          try {\n            responseBody = JSON.parse(error.message);\n          } catch {\n            // error.message must not be JSON\n          }\n        }\n\n        if (\n          isPlainObject(responseBody) &&\n          responseBody.error === INFURA_BLOCKED_KEY\n        ) {\n          updatedNetworkStatus = NetworkStatus.Blocked;\n        } else if (error.code === errorCodes.rpc.internal) {\n          updatedNetworkStatus = NetworkStatus.Unknown;\n        } else {\n          updatedNetworkStatus = NetworkStatus.Unavailable;\n        }\n      } else {\n        log('NetworkController - could not determine network status', error);\n        updatedNetworkStatus = NetworkStatus.Unknown;\n      }\n    }\n\n    if (networkChanged) {\n      // If the network has changed, then `lookupNetwork` either has been or is\n      // in the process of being called, so we don't need to go further.\n      return;\n    }\n    this.messagingSystem.unsubscribe(\n      'NetworkController:networkDidChange',\n      listener,\n    );\n\n    this.update((state) => {\n      state.networkId = updatedNetworkId;\n      state.networkStatus = updatedNetworkStatus;\n      if (updatedIsEIP1559Compatible === undefined) {\n        delete state.networkDetails.EIPS[1559];\n      } else {\n        state.networkDetails.EIPS[1559] = updatedIsEIP1559Compatible;\n      }\n    });\n\n    if (isInfura) {\n      if (updatedNetworkStatus === NetworkStatus.Available) {\n        this.messagingSystem.publish('NetworkController:infuraIsUnblocked');\n      } else if (updatedNetworkStatus === NetworkStatus.Blocked) {\n        this.messagingSystem.publish('NetworkController:infuraIsBlocked');\n      }\n    } else {\n      // Always publish infuraIsUnblocked regardless of network status to\n      // prevent consumers from being stuck in a blocked state if they were\n      // previously connected to an Infura network that was blocked\n      this.messagingSystem.publish('NetworkController:infuraIsUnblocked');\n    }\n  }\n\n  /**\n   * Convenience method to update provider network type settings.\n   *\n   * @param type - Human readable network name.\n   */\n  async setProviderType(type: InfuraNetworkType) {\n    assert.notStrictEqual(\n      type,\n      NetworkType.rpc,\n      `NetworkController - cannot call \"setProviderType\" with type \"${NetworkType.rpc}\". Use \"setActiveNetwork\"`,\n    );\n    assert.ok(\n      isInfuraProviderType(type),\n      `Unknown Infura provider type \"${type}\".`,\n    );\n    this.#previousProviderConfig = this.state.providerConfig;\n\n    // If testnet the ticker symbol should use a testnet prefix\n    const ticker =\n      type in NetworksTicker && NetworksTicker[type].length > 0\n        ? NetworksTicker[type]\n        : 'ETH';\n\n    this.update((state) => {\n      state.providerConfig.type = type;\n      state.providerConfig.ticker = ticker;\n      state.providerConfig.chainId = ChainId[type];\n      state.providerConfig.rpcPrefs = BUILT_IN_NETWORKS[type].rpcPrefs;\n      state.providerConfig.rpcUrl = undefined;\n      state.providerConfig.nickname = undefined;\n      state.providerConfig.id = undefined;\n    });\n    await this.#refreshNetwork();\n  }\n\n  /**\n   * Convenience method to update provider RPC settings.\n   *\n   * @param networkConfigurationId - The unique id for the network configuration to set as the active provider.\n   */\n  async setActiveNetwork(networkConfigurationId: string) {\n    this.#previousProviderConfig = this.state.providerConfig;\n\n    const targetNetwork =\n      this.state.networkConfigurations[networkConfigurationId];\n\n    if (!targetNetwork) {\n      throw new Error(\n        `networkConfigurationId ${networkConfigurationId} does not match a configured networkConfiguration`,\n      );\n    }\n\n    this.update((state) => {\n      state.providerConfig.type = NetworkType.rpc;\n      state.providerConfig.rpcUrl = targetNetwork.rpcUrl;\n      state.providerConfig.chainId = targetNetwork.chainId;\n      state.providerConfig.ticker = targetNetwork.ticker;\n      state.providerConfig.nickname = targetNetwork.nickname;\n      state.providerConfig.rpcPrefs = targetNetwork.rpcPrefs;\n      state.providerConfig.id = targetNetwork.id;\n    });\n\n    await this.#refreshNetwork();\n  }\n\n  /**\n   * Retrieves the latest block with retry for the network.\n   *\n   * @param maxAttempts - The maximum number of retries to attempt retrieving the latest block. Defaults to 3.\n   * @returns A promise that either resolves to the block header or null if\n   * there is no latest block, or rejects with an error.\n   */\n  async #getLatestBlockWithRetry(maxAttempts = 3): Promise<Block | null> {\n    let latestBlock;\n    const retryInterval = 500;\n    for (let attempts = 0; attempts <= maxAttempts; attempts++) {\n      latestBlock = await this.#getLatestBlock();\n\n      if (latestBlock) {\n        return latestBlock;\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, retryInterval));\n    }\n    return null;\n  }\n\n  #getLatestBlock(): Promise<Block> {\n    return new Promise((resolve, reject) => {\n      if (!this.#ethQuery) {\n        throw new Error('Provider has not been initialized');\n      }\n      this.#ethQuery.sendAsync(\n        { method: 'eth_getBlockByNumber', params: ['latest', false] },\n        (error: unknown, block?: unknown) => {\n          if (error) {\n            reject(error);\n          } else {\n            // TODO: Validate this type\n            resolve(block as Block);\n          }\n        },\n      );\n    });\n  }\n\n  /**\n   * Determines whether the network supports EIP-1559 by checking whether the\n   * latest block has a `baseFeePerGas` property, then updates state\n   * appropriately.\n   *\n   * @returns A promise that resolves to true if the network supports EIP-1559\n   * and false otherwise.\n   */\n  async getEIP1559Compatibility() {\n    const { EIPS } = this.state.networkDetails;\n\n    if (EIPS[1559] !== undefined) {\n      return EIPS[1559];\n    }\n\n    if (!this.#ethQuery) {\n      return false;\n    }\n\n    const isEIP1559Compatible = await this.#determineEIP1559Compatibility();\n    this.update((state) => {\n      state.networkDetails.EIPS[1559] = isEIP1559Compatible;\n    });\n    return isEIP1559Compatible;\n  }\n\n  /**\n   * Retrieves the latest block from the currently selected network; if the\n   * block has a `baseFeePerGas` property, then we know that the network\n   * supports EIP-1559; otherwise it doesn't. Throws an error if unable to\n   * retrieve the last block.\n   *\n   * @returns A promise that resolves to true if the network supports EIP-1559\n   * and false otherwise.\n   */\n  async #determineEIP1559Compatibility(): Promise<boolean> {\n    const latestBlock = await this.#getLatestBlockWithRetry();\n\n    if (!latestBlock) {\n      throw new Error(\n        'Unable to determine EIP-1559 compatibility. Failed to retrieve the latest block.',\n      );\n    }\n\n    return latestBlock.baseFeePerGas !== undefined;\n  }\n\n  /**\n   * Re-initializes the provider and block tracker for the current network.\n   */\n  async resetConnection() {\n    await this.#refreshNetwork();\n  }\n\n  #setProviderAndBlockTracker({\n    provider,\n    blockTracker,\n  }: {\n    provider: Provider;\n    blockTracker: BlockTracker;\n  }) {\n    if (this.#providerProxy) {\n      this.#providerProxy.setTarget(provider);\n    } else {\n      this.#providerProxy = createEventEmitterProxy(provider);\n    }\n\n    if (this.#blockTrackerProxy) {\n      this.#blockTrackerProxy.setTarget(blockTracker);\n    } else {\n      this.#blockTrackerProxy = createEventEmitterProxy(blockTracker, {\n        eventFilter: 'skipInternal',\n      });\n    }\n  }\n\n  /**\n   * Adds a network configuration if the rpcUrl is not already present on an\n   * existing network configuration. Otherwise updates the entry with the matching rpcUrl.\n   *\n   * @param networkConfiguration - The network configuration to add or, if rpcUrl matches an existing entry, to modify.\n   * @param networkConfiguration.rpcUrl -  RPC provider url.\n   * @param networkConfiguration.chainId - Network ID as per EIP-155.\n   * @param networkConfiguration.ticker - Currency ticker.\n   * @param networkConfiguration.nickname - Personalized network name.\n   * @param networkConfiguration.rpcPrefs - Personalized preferences (i.e. preferred blockExplorer)\n   * @param options - additional configuration options.\n   * @param options.setActive - An option to set the newly added networkConfiguration as the active provider.\n   * @param options.referrer - The site from which the call originated, or 'metamask' for internal calls - used for event metrics.\n   * @param options.source - Where the upsertNetwork event originated (i.e. from a dapp or from the network form) - used for event metrics.\n   * @returns id for the added or updated network configuration\n   */\n  async upsertNetworkConfiguration(\n    { rpcUrl, chainId, ticker, nickname, rpcPrefs }: NetworkConfiguration,\n    {\n      setActive = false,\n      referrer,\n      source,\n    }: { setActive?: boolean; referrer: string; source: string },\n  ): Promise<string> {\n    assertIsStrictHexString(chainId);\n\n    if (!isSafeChainId(chainId)) {\n      throw new Error(\n        `Invalid chain ID \"${chainId}\": numerical value greater than max safe value.`,\n      );\n    }\n\n    if (!rpcUrl) {\n      throw new Error(\n        'An rpcUrl is required to add or update network configuration',\n      );\n    }\n\n    if (!referrer || !source) {\n      throw new Error(\n        'referrer and source are required arguments for adding or updating a network configuration',\n      );\n    }\n\n    try {\n      new URL(rpcUrl);\n    } catch (e: any) {\n      if (e.message.includes('Invalid URL')) {\n        throw new Error('rpcUrl must be a valid URL');\n      }\n    }\n\n    if (!ticker) {\n      throw new Error(\n        'A ticker is required to add or update networkConfiguration',\n      );\n    }\n\n    const newNetworkConfiguration = {\n      rpcUrl,\n      chainId,\n      ticker,\n      nickname,\n      rpcPrefs,\n    };\n\n    const oldNetworkConfigurations = this.state.networkConfigurations;\n\n    const oldNetworkConfigurationId = Object.values(\n      oldNetworkConfigurations,\n    ).find(\n      (networkConfiguration) =>\n        networkConfiguration.rpcUrl?.toLowerCase() === rpcUrl?.toLowerCase(),\n    )?.id;\n\n    const newNetworkConfigurationId = oldNetworkConfigurationId || random();\n    this.update((state) => {\n      state.networkConfigurations = {\n        ...oldNetworkConfigurations,\n        [newNetworkConfigurationId]: {\n          ...newNetworkConfiguration,\n          id: newNetworkConfigurationId,\n        },\n      };\n    });\n\n    if (!oldNetworkConfigurationId) {\n      this.#trackMetaMetricsEvent({\n        event: 'Custom Network Added',\n        category: 'Network',\n        referrer: {\n          url: referrer,\n        },\n        properties: {\n          chain_id: chainId,\n          symbol: ticker,\n          source,\n        },\n      });\n    }\n\n    if (setActive) {\n      await this.setActiveNetwork(newNetworkConfigurationId);\n    }\n\n    return newNetworkConfigurationId;\n  }\n\n  /**\n   * Removes network configuration from state.\n   *\n   * @param networkConfigurationId - The networkConfigurationId of an existing network configuration\n   */\n  removeNetworkConfiguration(networkConfigurationId: string) {\n    if (!this.state.networkConfigurations[networkConfigurationId]) {\n      throw new Error(\n        `networkConfigurationId ${networkConfigurationId} does not match a configured networkConfiguration`,\n      );\n    }\n    this.update((state) => {\n      delete state.networkConfigurations[networkConfigurationId];\n    });\n  }\n\n  /**\n   * Switches to the previous network, assuming that the current network is\n   * different than the initial network (if it is, then this is equivalent to\n   * calling `resetConnection`).\n   */\n  async rollbackToPreviousProvider() {\n    this.update((state) => {\n      state.providerConfig = this.#previousProviderConfig;\n    });\n    await this.#refreshNetwork();\n  }\n\n  /**\n   * Deactivates the controller, stopping any ongoing polling.\n   *\n   * In-progress requests will not be aborted.\n   */\n  async destroy() {\n    await this.#blockTrackerProxy?.destroy();\n  }\n\n  /**\n   * Updates the controller using the given backup data.\n   *\n   * @param backup - The data that has been backed up.\n   * @param backup.networkConfigurations - Network configurations in the backup.\n   */\n  loadBackup({\n    networkConfigurations,\n  }: {\n    networkConfigurations: NetworkState['networkConfigurations'];\n  }): void {\n    this.update((state) => {\n      state.networkConfigurations = {\n        ...state.networkConfigurations,\n        ...networkConfigurations,\n      };\n    });\n  }\n}\n\nexport default NetworkController;\n"]}
\ No newline at end of file
diff --git a/dist/index.d.ts b/dist/index.d.ts
index 94467be4d4e7aef27f0402267a833f89f2580bcf..3f9bd4ba0bf77bd09fe6a133267a07ab13669b6b 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -1,4 +1,4 @@
 export * from './NetworkController';
 export * from './constants';
-export type { Provider } from './types';
+export type { BlockTracker, Provider } from './types';
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/dist/index.d.ts.map b/dist/index.d.ts.map
index d478dddec8bcdadc3a299426c55be59d103dac16..0cf9111d2b119e78a3b2fb40a8f0d9629b5946ee 100644
--- a/dist/index.d.ts.map
+++ b/dist/index.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,qBAAqB,CAAC;AACpC,cAAc,aAAa,CAAC;AAC5B,YAAY,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC"}
\ No newline at end of file
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,qBAAqB,CAAC;AACpC,cAAc,aAAa,CAAC;AAC5B,YAAY,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC"}
\ No newline at end of file
diff --git a/dist/index.js.map b/dist/index.js.map
index a4e77ef9a7ec7ae636aa06c19aa323c576499143..954be6be9982330da831bb644d26b2e42345a98c 100644
--- a/dist/index.js.map
+++ b/dist/index.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,sDAAoC;AACpC,8CAA4B","sourcesContent":["export * from './NetworkController';\nexport * from './constants';\nexport type { Provider } from './types';\n"]}
\ No newline at end of file
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,sDAAoC;AACpC,8CAA4B","sourcesContent":["export * from './NetworkController';\nexport * from './constants';\nexport type { BlockTracker, Provider } from './types';\n"]}
\ No newline at end of file
