import assert from 'assert'
import sinon from 'sinon'
import proxyquire from 'proxyquire'

const convertUtils = proxyquire('./convert.util.js', {
  '../../store/actions': {
    estimateGasFromTxParams: () => Promise.resolve('0x8888'),
  },
})
const { fetchTradesInfo, fetchTokens, quoteToTxParams } = convertUtils

const TRADES_BASE_URL = 'https://metaswap-api.airswap-dev.codefi.network/trades?'
const TOKENS_BASE_URL = 'https://metaswap-api.airswap-dev.codefi.network/tokens'

const tokens = [
  { erc20: true, symbol: 'META', decimals: 18, address: '0x617b3f8050a0BD94b6b1da02B4384eE5B4DF13F4' },
  { erc20: true, symbol: 'ZRX', decimals: 18, address: '0xE41d2489571d322189246DaFA5ebDe1F4699F498' },
  { erc20: true, symbol: 'AST', decimals: 4, address: '0x27054b13b1B798B345b591a4d22e6562d47eA75a' },
  { erc20: true, symbol: 'BAT', decimals: 18, address: '0x0D8775F648430679A709E98d2b0Cb6250d2887EF' },
  { erc20: true, symbol: 'CVL', decimals: 18, address: '0x01FA555c97D7958Fa6f771f3BbD5CCD508f81e22' },
  { erc20: true, symbol: 'GLA', decimals: 8, address: '0x71D01dB8d6a2fBEa7f8d434599C237980C234e4C' },
  { erc20: true, symbol: 'GNO', decimals: 18, address: '0x6810e776880C02933D47DB1b9fc05908e5386b96' },
  { erc20: true, symbol: 'OMG', decimals: 18, address: '0xd26114cd6EE289AccF82350c8d8487fedB8A0C07' },
  { erc20: true, symbol: 'SAI', decimals: 18, address: '0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359' },
  { erc20: true, symbol: 'USDT', decimals: 6, address: '0xdAC17F958D2ee523a2206206994597C13D831ec7' },
  { erc20: true, symbol: 'WED', decimals: 18, address: '0x7848ae8F19671Dc05966dafBeFbBbb0308BDfAbD' },
  { erc20: true, symbol: 'WBTC', decimals: 8, address: '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599' },
]

const mockTradesResponse = [
  {
    'trade': { // the ethereum transaction data for the swap
      'data': '0xa6c3bf330000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000005591360f8c7640fea5771c9682d6b5ecb776e1f8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021486a000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005efe3c3b5dfc3a75ffc8add04bbdbac1e42fa234bf4549d8dab1bc44c8056eaf0e1dfe8600000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000001c4dc1600f3000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000005591360f8c7640fea5771c9682d6b5ecb776e1f800000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000140000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000036691c4f426eb8f42f150ebde43069a31cb080ad000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000021486a00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010400000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000001000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000005efe201b',
      'from': '0x2369267687A84ac7B494daE2f1542C40E37f4455',
      'value': '5700000000000000',
      'to': '0x61935cbdd02287b511119ddb11aeb42f1593b7ef',
    },
    'sourceAmount': '10000000000000000',
    'destinationAmount': '2248687',
    'error': null,
    'sourceToken': tokens[0].address,
    'destinationToken': tokens[1].address,
    'fetchTime': 553,
    'aggregator': 'zeroEx',
    'aggType': 'AGG',
    'approvalNeeded': { // the ethereum transaction data for the approval (if needed)
      'data': '0x095ea7b300000000000000000000000095e6f48254609a6ee006f7d493c8e5fb97094cef0000000000000000000000000000000000000000004a817c7ffffffdabf41c00',
      'to': '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
      'value': '0',
      'from': '0x2369267687A84ac7B494daE2f1542C40E37f4455',
    },
  },
  {
    'sourceAmount': '10000000000000000',
    'destinationAmount': '2248687',
    'error': null,
    'sourceToken': tokens[0].address,
    'destinationToken': tokens[1].address,
    'fetchTime': 553,
    'aggregator': 'zeroEx',
    'aggType': 'AGG',
    'approvalNeeded': { // the ethereum transaction data for the approval (if needed)
      'data': '0x095ea7b300000000000000000000000095e6f48254609a6ee006f7d493c8e5fb97094cef0000000000000000000000000000000000000000004a817c7ffffffdabf41c00',
      'to': '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
      'value': '0',
      'from': '0x2369267687A84ac7B494daE2f1542C40E37f4455',
    },
  },
  {
    'trade': { // the ethereum transaction data for the swap
      'data': '0xa6c3bf330000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000005591360f8c7640fea5771c9682d6b5ecb776e1f8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021486a000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005efe3c3b5dfc3a75ffc8add04bbdbac1e42fa234bf4549d8dab1bc44c8056eaf0e1dfe8600000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000001c4dc1600f3000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000005591360f8c7640fea5771c9682d6b5ecb776e1f800000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000140000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000036691c4f426eb8f42f150ebde43069a31cb080ad000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000021486a00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010400000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000001000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000005efe201b',
      'from': '0x2369267687A84ac7B494daE2f1542C40E37f4455',
      'value': '5700000000000000',
      'to': '0x61935cbdd02287b511119ddb11aeb42f1593b7ef',
    },
    'sourceAmount': '10000000000000000',
    'destinationAmount': '2248687',
    'error': true,
    'sourceToken': tokens[0].address,
    'destinationToken': tokens[1].address,
    'fetchTime': 553,
    'aggregator': 'zeroEx',
    'aggType': 'AGG',
  },
]

describe('Convert Util', function () {
  sinon.stub(window, 'fetch').callsFake((url, fetchObject) => {
    assert.equal(fetchObject.method, 'GET')
    if (url.match(TRADES_BASE_URL)) {
      assert.equal(url, 'https://metaswap-api.airswap-dev.codefi.network/trades?destinationToken=0xE41d2489571d322189246DaFA5ebDe1F4699F498&sourceToken=0x617b3f8050a0BD94b6b1da02B4384eE5B4DF13F4&sourceAmount=1e%2B36&slippage=3&timeout=10000&walletAddress=0xmockAddress')
      return Promise.resolve({ json: () => Promise.resolve(mockTradesResponse) })
    }
    if (url.match(TOKENS_BASE_URL)) {
      assert.equal(url, TOKENS_BASE_URL)
      return Promise.resolve({ json: () => Promise.resolve(tokens) })
    }
    return Promise.resolve()
  })

  describe('fetchTradesInfo', function () {
    const expectedResult = [
      {
        'trade': { // the ethereum transaction data for the swap
          'data': '0xa6c3bf330000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000005591360f8c7640fea5771c9682d6b5ecb776e1f8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021486a000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005efe3c3b5dfc3a75ffc8add04bbdbac1e42fa234bf4549d8dab1bc44c8056eaf0e1dfe8600000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000001c4dc1600f3000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000005591360f8c7640fea5771c9682d6b5ecb776e1f800000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000140000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000036691c4f426eb8f42f150ebde43069a31cb080ad000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000021486a00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010400000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000001000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000005efe201b',
          'from': '0x2369267687A84ac7B494daE2f1542C40E37f4455',
          'value': '5700000000000000',
          'to': '0x61935cbdd02287b511119ddb11aeb42f1593b7ef',
        },
        'sourceAmount': '10000000000000000',
        'destinationAmount': '2248687',
        'error': null,
        'sourceToken': tokens[0].address,
        'destinationToken': tokens[1].address,
        'fetchTime': 553,
        'aggregator': 'zeroEx',
        'aggType': 'AGG',
        'approvalNeeded': {
          'data': '0x095ea7b300000000000000000000000095e6f48254609a6ee006f7d493c8e5fb97094cef0000000000000000000000000000000000000000004a817c7ffffffdabf41c00',
          'to': '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
          'value': '0',
          'from': '0x2369267687A84ac7B494daE2f1542C40E37f4455',
        },
        'sourceTokenInfo': {
          ...tokens[0],
        },
        'destinationTokenInfo': {
          ...tokens[1],
        },
        'slippage': '3',
      },
    ]
    it('should fetch trade info', async function () {
      const result = await fetchTradesInfo({
        tokens,
        slippage: '3',
        sourceToken: tokens[0].address,
        destinationToken: tokens[1].address,
        value: '1000000000000000000',
        fromAddress: '0xmockAddress',
        sourceSymbol: tokens[0].symbol,
        sourceDecimals: tokens[0].decimals,
      })
      assert.deepEqual(result, expectedResult)
    })
  })

  describe('quoteToTxParams', function () {
    const expectedResult = {
      'approveTxParams': {
        'data': '0x095ea7b300000000000000000000000095e6f48254609a6ee006f7d493c8e5fb97094cef0000000000000000000000000000000000000000004a817c7ffffffdabf41c00',
        'from': '0x2369267687A84ac7B494daE2f1542C40E37f4455',
        'gas': '0x8888',
        'gasPrice': 1193046,
        'to': '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
        'value': '0x0',
      },
      'tradeTxParams': {
        'data': '0xa6c3bf330000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000005591360f8c7640fea5771c9682d6b5ecb776e1f8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021486a000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005efe3c3b5dfc3a75ffc8add04bbdbac1e42fa234bf4549d8dab1bc44c8056eaf0e1dfe8600000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000001c4dc1600f3000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000005591360f8c7640fea5771c9682d6b5ecb776e1f800000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000140000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000036691c4f426eb8f42f150ebde43069a31cb080ad000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000021486a00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010400000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000001000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000005efe201b',
        'from': '0x2369267687A84ac7B494daE2f1542C40E37f4455',
        'gas': '0xc3500',
        'gasPrice': 1193046,
        'to': '0x61935cbdd02287b511119ddb11aeb42f1593b7ef',
        'value': '0x14401eab384000',
      },
    }
    it('should convert a quote to txParams when the quote has an approval', async function () {
      const result = await quoteToTxParams(mockTradesResponse[0], 0x123456)
      assert.deepEqual(result, expectedResult)
    })
    it('should convert a quote to txParams when the quote does not have an approval', async function () {
      const result = await quoteToTxParams({ ...mockTradesResponse[0], approvalNeeded: null }, 0x123456)
      assert.deepEqual(result, { ...expectedResult, approveTxParams: undefined })
    })
  })

  describe('fetchTokens', function () {
    it('should fetch tokens', async function () {
      const result = await fetchTokens()
      assert.deepEqual(result, tokens)
    })
  })
})
