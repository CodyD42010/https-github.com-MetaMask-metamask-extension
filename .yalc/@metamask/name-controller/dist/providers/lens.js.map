{"version":3,"file":"lens.js","sourceRoot":"","sources":["../../src/providers/lens.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,sCAA8D;AAO9D,oCAAoC;AACpC,kCAAkC;AAElC,MAAM,EAAE,GAAG,MAAM,CAAC;AAClB,MAAM,KAAK,GAAG,eAAe,CAAC;AAC9B,MAAM,QAAQ,GAAG,sBAAsB,CAAC;AAExC,MAAM,KAAK,GAAG;;;;;;;EAOZ,CAAC;AAEH,MAAM,GAAG,GAAG,IAAA,2BAAkB,EAAC,sBAAa,EAAE,MAAM,CAAC,CAAC;AAYtD,MAAa,gBAAgB;IAG3B,YAAY,EAAE,SAAS,KAAoC,EAAE;QAF7D,8CAA0B;QAGxB,uBAAA,IAAI,+BAAc,SAAS,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAA,CAAC;IAC9C,CAAC;IAED,WAAW;QACT,OAAO;YACL,SAAS,EAAE,EAAE,CAAC,gBAAQ,CAAC,gBAAgB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;YAChD,YAAY,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE;SAC9B,CAAC;IACJ,CAAC;IAEK,gBAAgB,CACpB,OAA4B;;;YAE5B,IAAI,CAAC,uBAAA,IAAI,mCAAW,MAAf,IAAI,CAAa,EAAE;gBACtB,GAAG,CAAC,8BAA8B,CAAC,CAAC;gBAEpC,OAAO;oBACL,OAAO,EAAE;wBACP,CAAC,EAAE,CAAC,EAAE;4BACJ,aAAa,EAAE,EAAE;yBAClB;qBACF;iBACF,CAAC;aACH;YAED,MAAM,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC;YAC1B,MAAM,SAAS,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;YAErC,GAAG,CAAC,iBAAiB,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;YAEtC,IAAI;gBACF,MAAM,YAAY,GAAG,MAAM,IAAA,cAAO,EAChC,QAAQ,EACR,KAAK,EACL,SAAS,CACV,CAAC;gBAEF,MAAM,QAAQ,GAAG,MAAA,MAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,QAAQ,0CAAE,KAAK,mCAAI,EAAE,CAAC;gBACrD,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBAEhE,GAAG,CAAC,oBAAoB,EAAE,aAAa,CAAC,CAAC;gBAEzC,OAAO;oBACL,OAAO,EAAE;wBACP,CAAC,EAAE,CAAC,EAAE;4BACJ,aAAa;yBACd;qBACF;iBACF,CAAC;aACH;YAAC,OAAO,KAAK,EAAE;gBACd,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;gBAC7B,MAAM,KAAK,CAAC;aACb;;KACF;CACF;AA1DD,4CA0DC","sourcesContent":["import { createModuleLogger, projectLogger } from '../logger';\nimport type {\n  NameProvider,\n  NameProviderMetadata,\n  NameProviderRequest,\n  NameProviderResult,\n} from '../types';\nimport { NameType } from '../types';\nimport { graphQL } from '../util';\n\nconst ID = 'lens';\nconst LABEL = 'Lens Protocol';\nconst LENS_URL = `https://api.lens.dev`;\n\nconst QUERY = `\nquery HandlesForAddress($address: EthereumAddress!) {\n  profiles(request: { ownedBy: [$address] }) {\n    items {\n      handle\n    }\n  }\n}`;\n\nconst log = createModuleLogger(projectLogger, 'lens');\n\ntype LensResponse = {\n  profiles: {\n    items: [\n      {\n        handle: string;\n      },\n    ];\n  };\n};\n\nexport class LensNameProvider implements NameProvider {\n  #isEnabled: () => boolean;\n\n  constructor({ isEnabled }: { isEnabled?: () => boolean } = {}) {\n    this.#isEnabled = isEnabled || (() => true);\n  }\n\n  getMetadata(): NameProviderMetadata {\n    return {\n      sourceIds: { [NameType.ETHEREUM_ADDRESS]: [ID] },\n      sourceLabels: { [ID]: LABEL },\n    };\n  }\n\n  async getProposedNames(\n    request: NameProviderRequest,\n  ): Promise<NameProviderResult> {\n    if (!this.#isEnabled()) {\n      log('Skipping request as disabled');\n\n      return {\n        results: {\n          [ID]: {\n            proposedNames: [],\n          },\n        },\n      };\n    }\n\n    const { value } = request;\n    const variables = { address: value };\n\n    log('Sending request', { variables });\n\n    try {\n      const responseData = await graphQL<LensResponse>(\n        LENS_URL,\n        QUERY,\n        variables,\n      );\n\n      const profiles = responseData?.profiles?.items ?? [];\n      const proposedNames = profiles.map((profile) => profile.handle);\n\n      log('New proposed names', proposedNames);\n\n      return {\n        results: {\n          [ID]: {\n            proposedNames,\n          },\n        },\n      };\n    } catch (error) {\n      log('Request failed', error);\n      throw error;\n    }\n  }\n}\n"]}