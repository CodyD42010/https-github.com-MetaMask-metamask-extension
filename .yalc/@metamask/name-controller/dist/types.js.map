{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAAA,sDAAsD;AACtD,IAAY,QAGX;AAHD,WAAY,QAAQ;IAClB,0CAA0C;IAC1C,gDAAoC,CAAA;AACtC,CAAC,EAHW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAGnB","sourcesContent":["/** The name types supported by the NameController. */\nexport enum NameType {\n  /** The address of an Ethereum account. */\n  ETHEREUM_ADDRESS = 'ethereumAddress',\n}\n\n/** The metadata for a name provider. */\nexport type NameProviderMetadata = {\n  /**\n   * IDs for each alternate source of proposed names.\n   * Keyed by the name type.\n   */\n  sourceIds: Record<NameType, string[]>;\n\n  /**\n   * Friendly labels to describe each source of proposed names.\n   * Keyed by the source ID.\n   */\n  sourceLabels: Record<string, string>;\n};\n\n/** The request data to get proposed names from a name provider. */\nexport type NameProviderRequest = {\n  /** The current chain ID of the client. */\n  chainId: string;\n\n  /** The optional list of source IDs to get proposed names from. */\n  sourceIds?: string[];\n\n  /** The type of name being requested. */\n  type: NameType;\n\n  /** The raw value to get proposed names for. */\n  value: string;\n};\n\n/** The resulting data after requesting proposed names from a name provider, for a single source. */\nexport type NameProviderSourceResult = {\n  /**\n   * The array of proposed names from the source.\n   * Undefined if there is an error.\n   */\n  proposedNames?: string[];\n\n  /**\n   * The delay in milliseconds before the next request to the source should be made.\n   * Can be used to avoid rate limiting for example.\n   */\n  retryDelay?: number;\n\n  /**\n   * An error that occurred while fetching the proposed names from the source.\n   * Undefined if there was no error.\n   */\n  error?: unknown;\n};\n\n/** The resulting data after requesting proposed names from a name provider. */\nexport type NameProviderResult = {\n  /**\n   * The resulting data from each alternate source of proposed names supported by the name provider.\n   * Keyed by the source ID.\n   */\n  results: Record<string, NameProviderSourceResult>;\n\n  /**\n   * An error that occurred while fetching the proposed names that was not specific to a single source.\n   * Undefined if there was no error.\n   */\n  error?: unknown;\n};\n\n/** An object capable of proposing friendly names for a raw value of a given type. */\nexport type NameProvider = {\n  /**\n   * Returns metadata about the name provider.\n   */\n  getMetadata(): NameProviderMetadata;\n\n  /**\n   * Returns proposed names for the given value and request data.\n   *\n   * @param request - The request data including the value to propose names for.\n   */\n  getProposedNames(request: NameProviderRequest): Promise<NameProviderResult>;\n};\n"]}