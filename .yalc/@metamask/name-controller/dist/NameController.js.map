{"version":3,"file":"NameController.js","sourceRoot":"","sources":["../src/NameController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseControllerV2 } from '@metamask/base-controller';\nimport type { Patch } from 'immer';\n\nimport type {\n  NameProvider,\n  NameProviderRequest,\n  NameProviderResult,\n} from './types';\nimport { NameType } from './types';\n\nconst DEFAULT_UPDATE_DELAY = 60 * 2; // 2 Minutes\n\nconst controllerName = 'NameController';\n\nconst stateMetadata = {\n  names: { persist: true, anonymous: false },\n  nameSources: { persist: true, anonymous: false },\n};\n\nconst getDefaultState = () => ({\n  names: {\n    [NameType.ETHEREUM_ADDRESS]: {},\n  },\n  nameSources: {},\n});\n\nexport type ProposedNamesEntry = {\n  proposedNames: string[] | null;\n  lastRequestTime: number | null;\n  retryDelay: number | null;\n};\n\nexport type NameEntry = {\n  name: string | null;\n  sourceId: string | null;\n  proposedNames: Record<string, ProposedNamesEntry>;\n};\n\nexport type SourceEntry = {\n  label: string;\n};\n\nexport type NameControllerState = {\n  // Type > Value > Variation > Entry\n  names: Record<NameType, Record<string, Record<string, NameEntry>>>;\n  nameSources: Record<string, SourceEntry>;\n};\n\nexport type GetNameState = {\n  type: `${typeof controllerName}:getState`;\n  handler: () => NameControllerState;\n};\n\nexport type NameStateChange = {\n  type: `${typeof controllerName}:stateChange`;\n  payload: [NameControllerState, Patch[]];\n};\n\nexport type NameControllerActions = GetNameState;\n\nexport type NameControllerEvents = NameStateChange;\n\nexport type NameControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  NameControllerActions,\n  NameControllerEvents,\n  never,\n  never\n>;\n\nexport type NameControllerOptions = {\n  getChainId: () => string;\n  messenger: NameControllerMessenger;\n  providers: NameProvider[];\n  state?: Partial<NameControllerState>;\n};\n\nexport type UpdateProposedNamesRequest = {\n  value: string;\n  type: NameType;\n  sourceIds?: string[];\n  onlyUpdateAfterDelay?: boolean;\n};\n\nexport type UpdateProposedNamesResult = {\n  results: Record<string, { proposedNames?: string[]; error?: unknown }>;\n};\n\nexport type SetNameRequest = {\n  value: string;\n  type: NameType;\n  name: string | null;\n  sourceId?: string;\n};\n\n/**\n * Controller for storing and deriving names for values such as Ethereum addresses.\n */\nexport class NameController extends BaseControllerV2<\n  typeof controllerName,\n  NameControllerState,\n  NameControllerMessenger\n> {\n  #getChainId: () => string;\n\n  #providers: NameProvider[];\n\n  /**\n   * Construct a Name controller.\n   *\n   * @param options - Controller options.\n   * @param options.getChainId - Callback that returns the chain ID of the current network.\n   * @param options.messenger - Restricted controller messenger for the name controller.\n   * @param options.providers - Array of name provider instances to propose names.\n   * @param options.state - Initial state to set on the controller.\n   */\n  constructor({\n    getChainId,\n    messenger,\n    providers,\n    state,\n  }: NameControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: { ...getDefaultState(), ...state },\n    });\n\n    this.#getChainId = getChainId;\n    this.#providers = providers;\n  }\n\n  /**\n   * Set the user specified name for a value.\n   *\n   * @param request - Request object.\n   * @param request.name - Name to set.\n   * @param request.sourceId - Optional ID of the source of the proposed name.\n   * @param request.type - Type of value to set the name for.\n   * @param request.value - Value to set the name for.\n   */\n  setName(request: SetNameRequest) {\n    this.#validateSetNameRequest(request);\n\n    const { value, type, name, sourceId: requestSourceId } = request;\n    const sourceId = requestSourceId ?? null;\n\n    this.#updateEntry(value, type, (entry: NameEntry) => {\n      entry.name = name;\n      entry.sourceId = sourceId;\n    });\n  }\n\n  /**\n   * Generate the proposed names for a value using the name providers and store them in the state.\n   *\n   * @param request - Request object.\n   * @param request.value - Value to update the proposed names for.\n   * @param request.type - Type of value to update the proposed names for.\n   * @param request.sourceIds - Optional array of source IDs to limit which sources are used by the providers. If not provided, all sources in all providers will be used.\n   * @returns The updated proposed names for the value.\n   */\n  async updateProposedNames(\n    request: UpdateProposedNamesRequest,\n  ): Promise<UpdateProposedNamesResult> {\n    this.#validateUpdateProposedNamesRequest(request);\n\n    const chainId = this.#getChainId();\n\n    const providerResponses = (\n      await Promise.all(\n        this.#providers.map((provider) =>\n          this.#getProviderResponse(request, chainId, provider),\n        ),\n      )\n    ).filter((response) => Boolean(response)) as NameProviderResult[];\n\n    this.#updateProposedNameState(request, providerResponses);\n    this.#updateSourceState(this.#providers);\n\n    return this.#getUpdateProposedNamesResult(providerResponses);\n  }\n\n  #updateProposedNameState(\n    request: UpdateProposedNamesRequest,\n    providerResponses: NameProviderResult[],\n  ) {\n    const { value, type } = request;\n    const newProposedNames: { [sourceId: string]: ProposedNamesEntry } = {};\n    const currentTime = this.#getCurrentTimeSeconds();\n\n    for (const providerResponse of providerResponses) {\n      const { results } = providerResponse;\n\n      for (const sourceId of Object.keys(providerResponse.results)) {\n        const result = results[sourceId];\n        const { proposedNames } = result;\n        let finalProposedNames = result.error ? null : proposedNames ?? [];\n\n        if (finalProposedNames) {\n          finalProposedNames = finalProposedNames.filter(\n            (proposedName) => proposedName?.length,\n          );\n        }\n\n        newProposedNames[sourceId] = {\n          proposedNames: finalProposedNames,\n          lastRequestTime: currentTime,\n          retryDelay: result.retryDelay ?? null,\n        };\n      }\n    }\n\n    this.#updateEntry(value, type, (entry: NameEntry) => {\n      entry.proposedNames = {\n        ...this.#removeDormantProposedNames(entry.proposedNames, type),\n        ...newProposedNames,\n      };\n    });\n  }\n\n  #updateSourceState(providers: NameProvider[]) {\n    const newNameSources = { ...this.state.nameSources };\n\n    for (const provider of providers) {\n      const { sourceLabels } = provider.getMetadata();\n\n      for (const sourceId of Object.keys(sourceLabels)) {\n        newNameSources[sourceId] = {\n          label: sourceLabels[sourceId],\n        };\n      }\n    }\n\n    this.update((state) => {\n      state.nameSources = newNameSources;\n    });\n  }\n\n  #getUpdateProposedNamesResult(\n    providerResponses: NameProviderResult[],\n  ): UpdateProposedNamesResult {\n    return providerResponses.reduce(\n      (acc: UpdateProposedNamesResult, providerResponse) => {\n        const { results } = providerResponse;\n\n        for (const sourceId of Object.keys(results)) {\n          const { proposedNames: resultProposedNames, error: resultError } =\n            results[sourceId];\n\n          let proposedNames = resultError\n            ? undefined\n            : resultProposedNames ?? [];\n\n          if (proposedNames) {\n            proposedNames = proposedNames.filter(\n              (proposedName) => proposedName?.length,\n            );\n          }\n\n          acc.results[sourceId] = {\n            proposedNames,\n            error: resultError,\n          };\n        }\n\n        return acc;\n      },\n      { results: {} },\n    );\n  }\n\n  async #getProviderResponse(\n    request: UpdateProposedNamesRequest,\n    chainId: string,\n    provider: NameProvider,\n  ): Promise<NameProviderResult | undefined> {\n    const {\n      value,\n      type,\n      sourceIds: requestedSourceIds,\n      onlyUpdateAfterDelay,\n    } = request;\n\n    const variationKey = this.#getTypeVariationKey(type);\n    const supportedSourceIds = this.#getSourceIds(provider, type);\n    const currentTime = this.#getCurrentTimeSeconds();\n\n    const matchingSourceIds = supportedSourceIds.filter((sourceId) => {\n      if (requestedSourceIds && !requestedSourceIds.includes(sourceId)) {\n        return false;\n      }\n\n      if (onlyUpdateAfterDelay) {\n        const entry = this.state.names[type]?.[value]?.[variationKey] ?? {};\n        const proposedNamesEntry = entry.proposedNames?.[sourceId] ?? {};\n        const lastRequestTime = proposedNamesEntry.lastRequestTime ?? 0;\n\n        const retryDelay =\n          proposedNamesEntry.retryDelay ?? DEFAULT_UPDATE_DELAY;\n\n        if (currentTime - lastRequestTime < retryDelay) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n\n    if (!matchingSourceIds.length) {\n      return undefined;\n    }\n\n    const providerRequest: NameProviderRequest = {\n      chainId,\n      value,\n      type,\n      sourceIds: requestedSourceIds ? matchingSourceIds : undefined,\n    };\n\n    let responseError: unknown | undefined;\n    let response: NameProviderResult | undefined;\n\n    try {\n      response = await provider.getProposedNames(providerRequest);\n      responseError = response.error;\n    } catch (error) {\n      responseError = error;\n    }\n\n    let results = {};\n\n    if (response?.results) {\n      results = Object.keys(response.results).reduce(\n        (acc: NameProviderResult['results'], sourceId) => {\n          if (!requestedSourceIds || requestedSourceIds.includes(sourceId)) {\n            acc[sourceId] = (response as NameProviderResult).results[sourceId];\n          }\n\n          return acc;\n        },\n        {},\n      );\n    }\n\n    if (responseError) {\n      results = supportedSourceIds.reduce(\n        (acc: NameProviderResult['results'], sourceId) => {\n          acc[sourceId] = { proposedNames: [], error: responseError };\n          return acc;\n        },\n        {},\n      );\n    }\n\n    return { results, error: responseError };\n  }\n\n  #updateEntry(\n    value: string,\n    type: NameType,\n    callback: (entry: NameEntry) => void,\n  ) {\n    const variationKey = this.#getTypeVariationKey(type);\n\n    this.update((state) => {\n      const typeEntries = state.names[type] || {};\n      state.names[type] = typeEntries;\n\n      const variationEntries = typeEntries[value] || {};\n      typeEntries[value] = variationEntries;\n\n      const entry = variationEntries[variationKey] ?? {\n        proposedNames: {},\n        name: null,\n        sourceId: null,\n      };\n      variationEntries[variationKey] = entry;\n\n      callback(entry);\n    });\n  }\n\n  #getTypeVariationKey(type: NameType): string {\n    switch (type) {\n      default: {\n        return this.#getChainId();\n      }\n    }\n  }\n\n  #getCurrentTimeSeconds(): number {\n    return Math.round(Date.now() / 1000);\n  }\n\n  #validateSetNameRequest(request: SetNameRequest) {\n    const { name, value, type, sourceId } = request;\n    const errorMessages: string[] = [];\n\n    this.#validateValue(value, errorMessages);\n    this.#validateType(type, errorMessages);\n    this.#validateName(name, errorMessages);\n    this.#validateSourceId(sourceId, type, name, errorMessages);\n\n    if (errorMessages.length) {\n      throw new Error(errorMessages.join(' '));\n    }\n  }\n\n  #validateUpdateProposedNamesRequest(request: UpdateProposedNamesRequest) {\n    const { value, type, sourceIds } = request;\n    const errorMessages: string[] = [];\n\n    this.#validateValue(value, errorMessages);\n    this.#validateType(type, errorMessages);\n    this.#validateSourceIds(sourceIds, type, errorMessages);\n    this.#validateDuplicateSourceIds(type, errorMessages);\n\n    if (errorMessages.length) {\n      throw new Error(errorMessages.join(' '));\n    }\n  }\n\n  #validateValue(value: string, errorMessages: string[]) {\n    if (!value?.length || typeof value !== 'string') {\n      errorMessages.push('Must specify a non-empty string for value.');\n    }\n  }\n\n  #validateType(type: NameType, errorMessages: string[]) {\n    if (!Object.values(NameType).includes(type)) {\n      errorMessages.push(\n        `Must specify one of the following types: ${Object.values(\n          NameType,\n        ).join(', ')}`,\n      );\n    }\n  }\n\n  #validateName(name: string | null, errorMessages: string[]) {\n    if (name === null) {\n      return;\n    }\n\n    if (!name?.length || typeof name !== 'string') {\n      errorMessages.push('Must specify a non-empty string or null for name.');\n    }\n  }\n\n  #validateSourceIds(\n    sourceIds: string[] | undefined,\n    type: NameType,\n    errorMessages: string[],\n  ) {\n    if (!sourceIds) {\n      return;\n    }\n\n    const allSourceIds = this.#getAllSourceIds(type);\n    const missingSourceIds = [];\n\n    for (const sourceId of sourceIds) {\n      if (!allSourceIds.includes(sourceId)) {\n        missingSourceIds.push(sourceId);\n        continue;\n      }\n    }\n\n    if (missingSourceIds.length) {\n      errorMessages.push(\n        `Unknown source IDs for type '${type}': ${missingSourceIds.join(', ')}`,\n      );\n    }\n  }\n\n  #validateSourceId(\n    sourceId: string | undefined,\n    type: NameType,\n    name: string | null,\n    errorMessages: string[],\n  ) {\n    if (sourceId === null || sourceId === undefined) {\n      return;\n    }\n\n    if (name === null) {\n      errorMessages.push(\n        `Cannot specify a source ID when clearing the saved name: ${sourceId}`,\n      );\n      return;\n    }\n\n    const allSourceIds = this.#getAllSourceIds(type);\n\n    if (!sourceId.length || typeof sourceId !== 'string') {\n      errorMessages.push('Must specify a non-empty string for sourceId.');\n      return;\n    }\n\n    if (!allSourceIds.includes(sourceId)) {\n      errorMessages.push(`Unknown source ID for type '${type}': ${sourceId}`);\n    }\n  }\n\n  #validateDuplicateSourceIds(type: NameType, errorMessages: string[]) {\n    const allSourceIds = this.#getAllSourceIds(type);\n\n    const duplicateSourceIds = allSourceIds.filter(\n      (sourceId, index) => allSourceIds.indexOf(sourceId) !== index,\n    );\n\n    if (duplicateSourceIds.length) {\n      errorMessages.push(\n        `Duplicate source IDs found for type '${type}': ${duplicateSourceIds.join(\n          ', ',\n        )}`,\n      );\n    }\n  }\n\n  #getAllSourceIds(type: NameType): string[] {\n    return (\n      this.#providers\n        /* istanbul ignore next */\n        .map((provider) => this.#getSourceIds(provider, type))\n        .flat()\n    );\n  }\n\n  #getSourceIds(provider: NameProvider, type: NameType): string[] {\n    return provider.getMetadata().sourceIds[type];\n  }\n\n  #removeDormantProposedNames(\n    proposedNames: Record<string, ProposedNamesEntry>,\n    type: NameType,\n  ): Record<string, ProposedNamesEntry> {\n    if (!proposedNames || Object.keys(proposedNames).length === 0) {\n      return proposedNames;\n    }\n\n    const typeSourceIds = this.#getAllSourceIds(type);\n\n    return Object.keys(proposedNames)\n      .filter((sourceId) => typeSourceIds.includes(sourceId))\n      .reduce(\n        (acc, sourceId) => ({\n          ...acc,\n          [sourceId]: proposedNames[sourceId],\n        }),\n        {},\n      );\n  }\n}\n"]}