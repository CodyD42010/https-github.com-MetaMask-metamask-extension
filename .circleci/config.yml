version: 2.1

executors:
  node-browsers:
    docker:
      - image: cimg/node:18.17-browsers
  node-browsers-medium-plus:
    docker:
      - image: cimg/node:18.17-browsers
    resource_class: medium+
    environment:
      NODE_OPTIONS: --max_old_space_size=2048
  node-browsers-large:
    docker:
      - image: cimg/node:18.17-browsers
    resource_class: large
    environment:
      NODE_OPTIONS: --max_old_space_size=2048
  shellcheck:
    docker:
      - image: koalaman/shellcheck-alpine@sha256:dfaf08fab58c158549d3be64fb101c626abc5f16f341b569092577ae207db199

orbs:
  gh: circleci/github-cli@2.0
  codecov: codecov/codecov@3.2.2

rc_branch_only: &rc_branch_only
  filters:
    branches:
      only:
        - /^Version-v(\d+)[.](\d+)[.](\d+)/

aliases:
  # Shallow Git Clone
  - &shallow-git-clone
    name: Shallow Git Clone
    command: |
      #!/bin/bash
      set -e
      set -u
      set -o pipefail

      # This Shallow Git Clone code is adapted from what the standard CircleCI `checkout` command does for the case of an external PR (link to example below):
      # https://app.circleci.com/pipelines/github/MetaMask/metamask-extension/49817/workflows/dc195ea6-ac06-4de1-9edf-4c949427b5fb/jobs/1430976/parallel-runs/0/steps/0-101
      ### git clone --no-checkout "$CIRCLE_REPOSITORY_URL" .
      ### git fetch --force origin +refs/pull/18748/head:refs/remotes/origin/pull/18748
      ### git checkout --force -B "$CIRCLE_BRANCH" "$CIRCLE_SHA1"
      ### git --no-pager log --no-color -n 1 --format='HEAD is now at %h %s'

      # Set up SSH access
      # This SSH key is the current github.com SSH key as of June 2023, but it will need to be changed whenever github changes their key (probably every few years)
      GITHUB_SSH_KEY="AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl"
      mkdir -p ~/.ssh
      echo github.com ssh-ed25519 $GITHUB_SSH_KEY >> ~/.ssh/known_hosts

      # Take a different clone path depending on if it's a tag, a PR from an external repo, or the normal case
      if [ -n "${CIRCLE_TAG-}" ]; then
        # tag
        git clone --depth 1 --no-checkout "$CIRCLE_REPOSITORY_URL" .
        git fetch --depth 1 --force origin "+refs/tags/${CIRCLE_TAG}:refs/tags/${CIRCLE_TAG}"
        git checkout --force -q "$CIRCLE_TAG" "$CIRCLE_SHA1"
      elif [[ "$CIRCLE_BRANCH" =~ ^pull\/* ]]; then
        # pull request
        git clone --depth 1 --no-checkout "$CIRCLE_REPOSITORY_URL" .
        git fetch --depth 1 --force origin "${CIRCLE_BRANCH}/head:remotes/origin/${CIRCLE_BRANCH}"
        git checkout --force -B "$CIRCLE_BRANCH" "$CIRCLE_SHA1"
      else
        # normal case
        git clone --depth 1 "$CIRCLE_REPOSITORY_URL" --branch "$CIRCLE_BRANCH" .
      fi

workflows:
  test_and_release:
    jobs:
      - create_release_pull_request:
          <<: *rc_branch_only
          requires:
            - prep-deps
      - prep-deps
      - prep-build-test-mv3:
          requires:
            - prep-deps
      - test-e2e-chrome-mv3:
          requires:
            - prep-build-test-mv3

jobs:
  create_release_pull_request:
    executor: node-browsers
    steps:
      - run: *shallow-git-clone
      - attach_workspace:
          at: .
      - run:
          name: Bump manifest version
          command: .circleci/scripts/release-bump-manifest-version.sh
      - run:
          name: Update changelog
          command: yarn update-changelog --rc
      - run:
          name: Commit changes
          command: .circleci/scripts/release-commit-version-bump.sh
      - run:
          name: Create GitHub Pull Request for version
          command: .circleci/scripts/release-create-release-pr.sh

  prep-deps:
    executor: node-browsers
    steps:
      - run: *shallow-git-clone
      - run:
          name: Save Yarn version
          command: |
            yarn --version > /tmp/YARN_VERSION
      - restore_cache:
          keys:
            # First try to get the specific cache for the checksum of the yarn.lock file.
            # This cache key lookup will fail if the lock file is modified and a cache
            # has not yet been persisted for the new checksum.
            - dependency-cache-{{ checksum "/tmp/YARN_VERSION" }}-{{ checksum "yarn.lock" }}
            # To prevent having to do a full install of every node_module when
            # dependencies change, restore from the last known cache of any
            # branch/checksum with the same Yarn version, the install step will remove
            # cached items that are no longer required and add the new dependencies, and
            # the cache will be persisted.
            - dependency-cache-{{ checksum "/tmp/YARN_VERSION" }}-
      - gh/install
      - run:
          name: Install dependencies
          command: .circleci/scripts/install-dependencies.sh
      - save_cache:
          key: dependency-cache-{{ checksum "/tmp/YARN_VERSION" }}-{{ checksum "yarn.lock" }}
          paths:
            - .yarn/cache
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - build-artifacts

  prep-build-test-mv3:
    executor: node-browsers-medium-plus
    steps:
      - run: *shallow-git-clone
      - attach_workspace:
          at: .
      - run:
          name: Build extension in mv3 for testing
          command: yarn build:test:mv3
      - run:
          name: Move test build to 'dist-test' to avoid conflict with production build
          command: mv ./dist ./dist-test-mv3
      - run:
          name: Move test zips to 'builds-test-mv3' to avoid conflict with production build
          command: mv ./builds ./builds-test-mv3
      - persist_to_workspace:
          root: .
          paths:
            - dist-test-mv3
            - builds-test-mv3

  test-e2e-chrome-mv3:
    executor: node-browsers
    parallelism: 8
    steps:
      - run: *shallow-git-clone
      - run:
          name: Re-Install Chrome
          command: ./.circleci/scripts/chrome-install.sh
      - attach_workspace:
          at: .
      - run:
          name: Move test build to dist
          command: mv ./dist-test-mv3 ./dist
      - run:
          name: Move test zips to builds
          command: mv ./builds-test-mv3 ./builds
      - run:
          name: test:e2e:chrome
          command: |
            if .circleci/scripts/test-run-e2e.sh
            then
              yarn test:e2e:chrome --retries 2 --debug
            fi
          no_output_timeout: 20m
      - store_artifacts:
          path: test-artifacts
          destination: test-artifacts
      - store_test_results:
          path: test/test-results/e2e
